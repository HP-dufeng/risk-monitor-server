// Code generated by protoc-gen-go. DO NOT EDIT.
// source: risk_monitor_server.proto

package riskmonitorserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CustHoldRtn_HoldType int32

const (
	CustHoldRtn_Total     CustHoldRtn_HoldType = 0
	CustHoldRtn_Speculate CustHoldRtn_HoldType = 1
)

var CustHoldRtn_HoldType_name = map[int32]string{
	0: "Total",
	1: "Speculate",
}
var CustHoldRtn_HoldType_value = map[string]int32{
	"Total":     0,
	"Speculate": 1,
}

func (x CustHoldRtn_HoldType) String() string {
	return proto.EnumName(CustHoldRtn_HoldType_name, int32(x))
}
func (CustHoldRtn_HoldType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{11, 0}
}

type CustGroupHoldRtn_HoldType int32

const (
	CustGroupHoldRtn_Total     CustGroupHoldRtn_HoldType = 0
	CustGroupHoldRtn_Speculate CustGroupHoldRtn_HoldType = 1
)

var CustGroupHoldRtn_HoldType_name = map[int32]string{
	0: "Total",
	1: "Speculate",
}
var CustGroupHoldRtn_HoldType_value = map[string]int32{
	"Total":     0,
	"Speculate": 1,
}

func (x CustGroupHoldRtn_HoldType) String() string {
	return proto.EnumName(CustGroupHoldRtn_HoldType_name, int32(x))
}
func (CustGroupHoldRtn_HoldType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{12, 0}
}

type QryCustSimpleInfoRsp_ClientType int32

const (
	QryCustSimpleInfoRsp_NATURAL QryCustSimpleInfoRsp_ClientType = 0
	QryCustSimpleInfoRsp_LEGAL   QryCustSimpleInfoRsp_ClientType = 1
)

var QryCustSimpleInfoRsp_ClientType_name = map[int32]string{
	0: "NATURAL",
	1: "LEGAL",
}
var QryCustSimpleInfoRsp_ClientType_value = map[string]int32{
	"NATURAL": 0,
	"LEGAL":   1,
}

func (x QryCustSimpleInfoRsp_ClientType) String() string {
	return proto.EnumName(QryCustSimpleInfoRsp_ClientType_name, int32(x))
}
func (QryCustSimpleInfoRsp_ClientType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{16, 0}
}

type QuoteMonitorSetting_QuoteType int32

const (
	QuoteMonitorSetting_RiskQuote   QuoteMonitorSetting_QuoteType = 0
	QuoteMonitorSetting_MarginQuote QuoteMonitorSetting_QuoteType = 1
)

var QuoteMonitorSetting_QuoteType_name = map[int32]string{
	0: "RiskQuote",
	1: "MarginQuote",
}
var QuoteMonitorSetting_QuoteType_value = map[string]int32{
	"RiskQuote":   0,
	"MarginQuote": 1,
}

func (x QuoteMonitorSetting_QuoteType) String() string {
	return proto.EnumName(QuoteMonitorSetting_QuoteType_name, int32(x))
}
func (QuoteMonitorSetting_QuoteType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{30, 0}
}

type HoldMaxLimit_HoldLimitConditionType int32

const (
	HoldMaxLimit_SINGLE_SIDE_HOLD_LIMIT HoldMaxLimit_HoldLimitConditionType = 0
	HoldMaxLimit_BOTH_SIDE_HOLD_LIMIT   HoldMaxLimit_HoldLimitConditionType = 1
	HoldMaxLimit_NO_HOLD_LIMIT          HoldMaxLimit_HoldLimitConditionType = 2
)

var HoldMaxLimit_HoldLimitConditionType_name = map[int32]string{
	0: "SINGLE_SIDE_HOLD_LIMIT",
	1: "BOTH_SIDE_HOLD_LIMIT",
	2: "NO_HOLD_LIMIT",
}
var HoldMaxLimit_HoldLimitConditionType_value = map[string]int32{
	"SINGLE_SIDE_HOLD_LIMIT": 0,
	"BOTH_SIDE_HOLD_LIMIT":   1,
	"NO_HOLD_LIMIT":          2,
}

func (x HoldMaxLimit_HoldLimitConditionType) String() string {
	return proto.EnumName(HoldMaxLimit_HoldLimitConditionType_name, int32(x))
}
func (HoldMaxLimit_HoldLimitConditionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{42, 0}
}

type HoldMaxLimit_QtyLimitType int32

const (
	HoldMaxLimit_RATIO_LIMIT  HoldMaxLimit_QtyLimitType = 0
	HoldMaxLimit_AMOUNT_LIMIT HoldMaxLimit_QtyLimitType = 1
	HoldMaxLimit_NO_LIMIT     HoldMaxLimit_QtyLimitType = 2
)

var HoldMaxLimit_QtyLimitType_name = map[int32]string{
	0: "RATIO_LIMIT",
	1: "AMOUNT_LIMIT",
	2: "NO_LIMIT",
}
var HoldMaxLimit_QtyLimitType_value = map[string]int32{
	"RATIO_LIMIT":  0,
	"AMOUNT_LIMIT": 1,
	"NO_LIMIT":     2,
}

func (x HoldMaxLimit_QtyLimitType) String() string {
	return proto.EnumName(HoldMaxLimit_QtyLimitType_name, int32(x))
}
func (HoldMaxLimit_QtyLimitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{42, 1}
}

type HoldMaxLimit_CompareFlag int32

const (
	HoldMaxLimit_Greater         HoldMaxLimit_CompareFlag = 0
	HoldMaxLimit_GreaterAndEqual HoldMaxLimit_CompareFlag = 1
	HoldMaxLimit_Lesser          HoldMaxLimit_CompareFlag = 2
	HoldMaxLimit_LesserAndEqual  HoldMaxLimit_CompareFlag = 3
)

var HoldMaxLimit_CompareFlag_name = map[int32]string{
	0: "Greater",
	1: "GreaterAndEqual",
	2: "Lesser",
	3: "LesserAndEqual",
}
var HoldMaxLimit_CompareFlag_value = map[string]int32{
	"Greater":         0,
	"GreaterAndEqual": 1,
	"Lesser":          2,
	"LesserAndEqual":  3,
}

func (x HoldMaxLimit_CompareFlag) String() string {
	return proto.EnumName(HoldMaxLimit_CompareFlag_name, int32(x))
}
func (HoldMaxLimit_CompareFlag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{42, 2}
}

type ArbitrageLimitDateNode_LimitType int32

const (
	ArbitrageLimitDateNode_CzceDelive ArbitrageLimitDateNode_LimitType = 0
	ArbitrageLimitDateNode_CzceNormal ArbitrageLimitDateNode_LimitType = 1
)

var ArbitrageLimitDateNode_LimitType_name = map[int32]string{
	0: "CzceDelive",
	1: "CzceNormal",
}
var ArbitrageLimitDateNode_LimitType_value = map[string]int32{
	"CzceDelive": 0,
	"CzceNormal": 1,
}

func (x ArbitrageLimitDateNode_LimitType) String() string {
	return proto.EnumName(ArbitrageLimitDateNode_LimitType_name, int32(x))
}
func (ArbitrageLimitDateNode_LimitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{50, 0}
}

type NearDediveSetting_CloseDateType int32

const (
	NearDediveSetting_LastTradeDateDelive1 NearDediveSetting_CloseDateType = 0
	NearDediveSetting_LastTradeDate3       NearDediveSetting_CloseDateType = 1
	NearDediveSetting_LastTradeDate8       NearDediveSetting_CloseDateType = 2
)

var NearDediveSetting_CloseDateType_name = map[int32]string{
	0: "LastTradeDateDelive1",
	1: "LastTradeDate3",
	2: "LastTradeDate8",
}
var NearDediveSetting_CloseDateType_value = map[string]int32{
	"LastTradeDateDelive1": 0,
	"LastTradeDate3":       1,
	"LastTradeDate8":       2,
}

func (x NearDediveSetting_CloseDateType) String() string {
	return proto.EnumName(NearDediveSetting_CloseDateType_name, int32(x))
}
func (NearDediveSetting_CloseDateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{55, 0}
}

type NearDediveSetting_ClientType int32

const (
	NearDediveSetting_LagelPerson           NearDediveSetting_ClientType = 0
	NearDediveSetting_NaturalAndLagelPerson NearDediveSetting_ClientType = 1
)

var NearDediveSetting_ClientType_name = map[int32]string{
	0: "LagelPerson",
	1: "NaturalAndLagelPerson",
}
var NearDediveSetting_ClientType_value = map[string]int32{
	"LagelPerson":           0,
	"NaturalAndLagelPerson": 1,
}

func (x NearDediveSetting_ClientType) String() string {
	return proto.EnumName(NearDediveSetting_ClientType_name, int32(x))
}
func (NearDediveSetting_ClientType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{55, 1}
}

type VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum int32

const (
	VariMarginLimitTimeLineNode_Delivery_Month        VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum = 0
	VariMarginLimitTimeLineNode_Delivery_Month_One    VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum = 1
	VariMarginLimitTimeLineNode_Delivery_Month_Second VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum = 2
	VariMarginLimitTimeLineNode_Delivery_Month_Third  VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum = 3
	VariMarginLimitTimeLineNode_Listing_Date          VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum = 4
	VariMarginLimitTimeLineNode_Last_Trade_Date       VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum = 5
)

var VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum_name = map[int32]string{
	0: "Delivery_Month",
	1: "Delivery_Month_One",
	2: "Delivery_Month_Second",
	3: "Delivery_Month_Third",
	4: "Listing_Date",
	5: "Last_Trade_Date",
}
var VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum_value = map[string]int32{
	"Delivery_Month":        0,
	"Delivery_Month_One":    1,
	"Delivery_Month_Second": 2,
	"Delivery_Month_Third":  3,
	"Listing_Date":          4,
	"Last_Trade_Date":       5,
}

func (x VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum) String() string {
	return proto.EnumName(VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum_name, int32(x))
}
func (VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{57, 0}
}

type VariMarginLimitSetting_StatisticsDateTypeEnum int32

const (
	VariMarginLimitSetting_Trade    VariMarginLimitSetting_StatisticsDateTypeEnum = 0
	VariMarginLimitSetting_Calendar VariMarginLimitSetting_StatisticsDateTypeEnum = 1
)

var VariMarginLimitSetting_StatisticsDateTypeEnum_name = map[int32]string{
	0: "Trade",
	1: "Calendar",
}
var VariMarginLimitSetting_StatisticsDateTypeEnum_value = map[string]int32{
	"Trade":    0,
	"Calendar": 1,
}

func (x VariMarginLimitSetting_StatisticsDateTypeEnum) String() string {
	return proto.EnumName(VariMarginLimitSetting_StatisticsDateTypeEnum_name, int32(x))
}
func (VariMarginLimitSetting_StatisticsDateTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{58, 0}
}

type VariMarginLimitSetting_PositionVariationMarginTypeEnum int32

const (
	VariMarginLimitSetting_Fixed     VariMarginLimitSetting_PositionVariationMarginTypeEnum = 0
	VariMarginLimitSetting_Variation VariMarginLimitSetting_PositionVariationMarginTypeEnum = 1
)

var VariMarginLimitSetting_PositionVariationMarginTypeEnum_name = map[int32]string{
	0: "Fixed",
	1: "Variation",
}
var VariMarginLimitSetting_PositionVariationMarginTypeEnum_value = map[string]int32{
	"Fixed":     0,
	"Variation": 1,
}

func (x VariMarginLimitSetting_PositionVariationMarginTypeEnum) String() string {
	return proto.EnumName(VariMarginLimitSetting_PositionVariationMarginTypeEnum_name, int32(x))
}
func (VariMarginLimitSetting_PositionVariationMarginTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{58, 1}
}

type ConditionHoldLimitObject_CompareFlagEnum int32

const (
	ConditionHoldLimitObject_Greater         ConditionHoldLimitObject_CompareFlagEnum = 0
	ConditionHoldLimitObject_GreaterAndEqual ConditionHoldLimitObject_CompareFlagEnum = 1
	ConditionHoldLimitObject_Lesser          ConditionHoldLimitObject_CompareFlagEnum = 2
	ConditionHoldLimitObject_LesserAndEqual  ConditionHoldLimitObject_CompareFlagEnum = 3
)

var ConditionHoldLimitObject_CompareFlagEnum_name = map[int32]string{
	0: "Greater",
	1: "GreaterAndEqual",
	2: "Lesser",
	3: "LesserAndEqual",
}
var ConditionHoldLimitObject_CompareFlagEnum_value = map[string]int32{
	"Greater":         0,
	"GreaterAndEqual": 1,
	"Lesser":          2,
	"LesserAndEqual":  3,
}

func (x ConditionHoldLimitObject_CompareFlagEnum) String() string {
	return proto.EnumName(ConditionHoldLimitObject_CompareFlagEnum_name, int32(x))
}
func (ConditionHoldLimitObject_CompareFlagEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{59, 0}
}

type ConditionHoldLimitObject_QtyLimitTypeEnum int32

const (
	ConditionHoldLimitObject_RATIO_LIMIT  ConditionHoldLimitObject_QtyLimitTypeEnum = 0
	ConditionHoldLimitObject_AMOUNT_LIMIT ConditionHoldLimitObject_QtyLimitTypeEnum = 1
	ConditionHoldLimitObject_NO_LIMIT     ConditionHoldLimitObject_QtyLimitTypeEnum = 2
)

var ConditionHoldLimitObject_QtyLimitTypeEnum_name = map[int32]string{
	0: "RATIO_LIMIT",
	1: "AMOUNT_LIMIT",
	2: "NO_LIMIT",
}
var ConditionHoldLimitObject_QtyLimitTypeEnum_value = map[string]int32{
	"RATIO_LIMIT":  0,
	"AMOUNT_LIMIT": 1,
	"NO_LIMIT":     2,
}

func (x ConditionHoldLimitObject_QtyLimitTypeEnum) String() string {
	return proto.EnumName(ConditionHoldLimitObject_QtyLimitTypeEnum_name, int32(x))
}
func (ConditionHoldLimitObject_QtyLimitTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{59, 1}
}

type VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum int32

const (
	VariHoldLimitTimeLineNode_Delivery_Month        VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum = 0
	VariHoldLimitTimeLineNode_Delivery_Month_One    VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum = 1
	VariHoldLimitTimeLineNode_Delivery_Month_Second VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum = 2
	VariHoldLimitTimeLineNode_Delivery_Month_Third  VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum = 3
	VariHoldLimitTimeLineNode_Listing_Date          VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum = 4
	VariHoldLimitTimeLineNode_Last_Trade_Date       VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum = 5
)

var VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum_name = map[int32]string{
	0: "Delivery_Month",
	1: "Delivery_Month_One",
	2: "Delivery_Month_Second",
	3: "Delivery_Month_Third",
	4: "Listing_Date",
	5: "Last_Trade_Date",
}
var VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum_value = map[string]int32{
	"Delivery_Month":        0,
	"Delivery_Month_One":    1,
	"Delivery_Month_Second": 2,
	"Delivery_Month_Third":  3,
	"Listing_Date":          4,
	"Last_Trade_Date":       5,
}

func (x VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum) String() string {
	return proto.EnumName(VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum_name, int32(x))
}
func (VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{60, 0}
}

type VariHoldLimitTimeLineNode_HoldLimitConditionTypeEnum int32

const (
	VariHoldLimitTimeLineNode_SINGLE_SIDE_HOLD_LIMIT VariHoldLimitTimeLineNode_HoldLimitConditionTypeEnum = 0
	VariHoldLimitTimeLineNode_BOTH_SIDE_HOLD_LIMIT   VariHoldLimitTimeLineNode_HoldLimitConditionTypeEnum = 1
	VariHoldLimitTimeLineNode_NO_HOLD_LIMIT          VariHoldLimitTimeLineNode_HoldLimitConditionTypeEnum = 2
)

var VariHoldLimitTimeLineNode_HoldLimitConditionTypeEnum_name = map[int32]string{
	0: "SINGLE_SIDE_HOLD_LIMIT",
	1: "BOTH_SIDE_HOLD_LIMIT",
	2: "NO_HOLD_LIMIT",
}
var VariHoldLimitTimeLineNode_HoldLimitConditionTypeEnum_value = map[string]int32{
	"SINGLE_SIDE_HOLD_LIMIT": 0,
	"BOTH_SIDE_HOLD_LIMIT":   1,
	"NO_HOLD_LIMIT":          2,
}

func (x VariHoldLimitTimeLineNode_HoldLimitConditionTypeEnum) String() string {
	return proto.EnumName(VariHoldLimitTimeLineNode_HoldLimitConditionTypeEnum_name, int32(x))
}
func (VariHoldLimitTimeLineNode_HoldLimitConditionTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{60, 1}
}

type VariHoldLimitSetting_StatisticsDateTypeEnum int32

const (
	VariHoldLimitSetting_Trade    VariHoldLimitSetting_StatisticsDateTypeEnum = 0
	VariHoldLimitSetting_Calendar VariHoldLimitSetting_StatisticsDateTypeEnum = 1
)

var VariHoldLimitSetting_StatisticsDateTypeEnum_name = map[int32]string{
	0: "Trade",
	1: "Calendar",
}
var VariHoldLimitSetting_StatisticsDateTypeEnum_value = map[string]int32{
	"Trade":    0,
	"Calendar": 1,
}

func (x VariHoldLimitSetting_StatisticsDateTypeEnum) String() string {
	return proto.EnumName(VariHoldLimitSetting_StatisticsDateTypeEnum_name, int32(x))
}
func (VariHoldLimitSetting_StatisticsDateTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{61, 0}
}

type VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum int32

const (
	VariArbitrageLimitTimeLineNode_Delivery_Month        VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum = 0
	VariArbitrageLimitTimeLineNode_Delivery_Month_One    VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum = 1
	VariArbitrageLimitTimeLineNode_Delivery_Month_Second VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum = 2
	VariArbitrageLimitTimeLineNode_Delivery_Month_Third  VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum = 3
	VariArbitrageLimitTimeLineNode_Listing_Date          VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum = 4
	VariArbitrageLimitTimeLineNode_Last_Trade_Date       VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum = 5
)

var VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum_name = map[int32]string{
	0: "Delivery_Month",
	1: "Delivery_Month_One",
	2: "Delivery_Month_Second",
	3: "Delivery_Month_Third",
	4: "Listing_Date",
	5: "Last_Trade_Date",
}
var VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum_value = map[string]int32{
	"Delivery_Month":        0,
	"Delivery_Month_One":    1,
	"Delivery_Month_Second": 2,
	"Delivery_Month_Third":  3,
	"Listing_Date":          4,
	"Last_Trade_Date":       5,
}

func (x VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum) String() string {
	return proto.EnumName(VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum_name, int32(x))
}
func (VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{62, 0}
}

type VariArbitrageLimitTimeLineNode_LimitTypeEnum int32

const (
	VariArbitrageLimitTimeLineNode_CzceDelive VariArbitrageLimitTimeLineNode_LimitTypeEnum = 0
	VariArbitrageLimitTimeLineNode_CzceNormal VariArbitrageLimitTimeLineNode_LimitTypeEnum = 1
)

var VariArbitrageLimitTimeLineNode_LimitTypeEnum_name = map[int32]string{
	0: "CzceDelive",
	1: "CzceNormal",
}
var VariArbitrageLimitTimeLineNode_LimitTypeEnum_value = map[string]int32{
	"CzceDelive": 0,
	"CzceNormal": 1,
}

func (x VariArbitrageLimitTimeLineNode_LimitTypeEnum) String() string {
	return proto.EnumName(VariArbitrageLimitTimeLineNode_LimitTypeEnum_name, int32(x))
}
func (VariArbitrageLimitTimeLineNode_LimitTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{62, 1}
}

type VariArbitrageLimitSetting_StatisticsDateTypeEnum int32

const (
	VariArbitrageLimitSetting_Trade    VariArbitrageLimitSetting_StatisticsDateTypeEnum = 0
	VariArbitrageLimitSetting_Calendar VariArbitrageLimitSetting_StatisticsDateTypeEnum = 1
)

var VariArbitrageLimitSetting_StatisticsDateTypeEnum_name = map[int32]string{
	0: "Trade",
	1: "Calendar",
}
var VariArbitrageLimitSetting_StatisticsDateTypeEnum_value = map[string]int32{
	"Trade":    0,
	"Calendar": 1,
}

func (x VariArbitrageLimitSetting_StatisticsDateTypeEnum) String() string {
	return proto.EnumName(VariArbitrageLimitSetting_StatisticsDateTypeEnum_name, int32(x))
}
func (VariArbitrageLimitSetting_StatisticsDateTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{63, 0}
}

// 心跳包
type HeartBeat struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartBeat) Reset()         { *m = HeartBeat{} }
func (m *HeartBeat) String() string { return proto.CompactTextString(m) }
func (*HeartBeat) ProtoMessage()    {}
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{0}
}
func (m *HeartBeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartBeat.Unmarshal(m, b)
}
func (m *HeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartBeat.Marshal(b, m, deterministic)
}
func (dst *HeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeat.Merge(dst, src)
}
func (m *HeartBeat) XXX_Size() int {
	return xxx_messageInfo_HeartBeat.Size(m)
}
func (m *HeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeat proto.InternalMessageInfo

// 订阅请求
type SubscribeReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeReq) Reset()         { *m = SubscribeReq{} }
func (m *SubscribeReq) String() string { return proto.CompactTextString(m) }
func (*SubscribeReq) ProtoMessage()    {}
func (*SubscribeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{1}
}
func (m *SubscribeReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeReq.Unmarshal(m, b)
}
func (m *SubscribeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeReq.Marshal(b, m, deterministic)
}
func (dst *SubscribeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeReq.Merge(dst, src)
}
func (m *SubscribeReq) XXX_Size() int {
	return xxx_messageInfo_SubscribeReq.Size(m)
}
func (m *SubscribeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeReq proto.InternalMessageInfo

// 订阅请求
type QryReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryReq) Reset()         { *m = QryReq{} }
func (m *QryReq) String() string { return proto.CompactTextString(m) }
func (*QryReq) ProtoMessage()    {}
func (*QryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{2}
}
func (m *QryReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryReq.Unmarshal(m, b)
}
func (m *QryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryReq.Marshal(b, m, deterministic)
}
func (dst *QryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryReq.Merge(dst, src)
}
func (m *QryReq) XXX_Size() int {
	return xxx_messageInfo_QryReq.Size(m)
}
func (m *QryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryReq proto.InternalMessageInfo

// 返回信息
type RspInfo struct {
	Errid                uint32   `protobuf:"varint,1,opt,name=errid" json:"errid,omitempty"`
	Errmsg               []byte   `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RspInfo) Reset()         { *m = RspInfo{} }
func (m *RspInfo) String() string { return proto.CompactTextString(m) }
func (*RspInfo) ProtoMessage()    {}
func (*RspInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{3}
}
func (m *RspInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspInfo.Unmarshal(m, b)
}
func (m *RspInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspInfo.Marshal(b, m, deterministic)
}
func (dst *RspInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspInfo.Merge(dst, src)
}
func (m *RspInfo) XXX_Size() int {
	return xxx_messageInfo_RspInfo.Size(m)
}
func (m *RspInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RspInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RspInfo proto.InternalMessageInfo

func (m *RspInfo) GetErrid() uint32 {
	if m != nil {
		return m.Errid
	}
	return 0
}

func (m *RspInfo) GetErrmsg() []byte {
	if m != nil {
		return m.Errmsg
	}
	return nil
}

// 值比较配置项
type SettingValueField struct {
	Name                 []byte   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Operator             uint32   `protobuf:"varint,2,opt,name=operator" json:"operator,omitempty"`
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettingValueField) Reset()         { *m = SettingValueField{} }
func (m *SettingValueField) String() string { return proto.CompactTextString(m) }
func (*SettingValueField) ProtoMessage()    {}
func (*SettingValueField) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{4}
}
func (m *SettingValueField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingValueField.Unmarshal(m, b)
}
func (m *SettingValueField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingValueField.Marshal(b, m, deterministic)
}
func (dst *SettingValueField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingValueField.Merge(dst, src)
}
func (m *SettingValueField) XXX_Size() int {
	return xxx_messageInfo_SettingValueField.Size(m)
}
func (m *SettingValueField) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingValueField.DiscardUnknown(m)
}

var xxx_messageInfo_SettingValueField proto.InternalMessageInfo

func (m *SettingValueField) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *SettingValueField) GetOperator() uint32 {
	if m != nil {
		return m.Operator
	}
	return 0
}

func (m *SettingValueField) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type QryHoldCustsByContractReq struct {
	ContractCode         []byte   `protobuf:"bytes,1,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryHoldCustsByContractReq) Reset()         { *m = QryHoldCustsByContractReq{} }
func (m *QryHoldCustsByContractReq) String() string { return proto.CompactTextString(m) }
func (*QryHoldCustsByContractReq) ProtoMessage()    {}
func (*QryHoldCustsByContractReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{5}
}
func (m *QryHoldCustsByContractReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryHoldCustsByContractReq.Unmarshal(m, b)
}
func (m *QryHoldCustsByContractReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryHoldCustsByContractReq.Marshal(b, m, deterministic)
}
func (dst *QryHoldCustsByContractReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryHoldCustsByContractReq.Merge(dst, src)
}
func (m *QryHoldCustsByContractReq) XXX_Size() int {
	return xxx_messageInfo_QryHoldCustsByContractReq.Size(m)
}
func (m *QryHoldCustsByContractReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryHoldCustsByContractReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryHoldCustsByContractReq proto.InternalMessageInfo

func (m *QryHoldCustsByContractReq) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

type QryHoldCustsByContractRsp struct {
	CustNos              [][]byte `protobuf:"bytes,1,rep,name=cust_nos,json=custNos,proto3" json:"cust_nos,omitempty"`
	RspInfo              *RspInfo `protobuf:"bytes,2,opt,name=rspInfo" json:"rspInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryHoldCustsByContractRsp) Reset()         { *m = QryHoldCustsByContractRsp{} }
func (m *QryHoldCustsByContractRsp) String() string { return proto.CompactTextString(m) }
func (*QryHoldCustsByContractRsp) ProtoMessage()    {}
func (*QryHoldCustsByContractRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{6}
}
func (m *QryHoldCustsByContractRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryHoldCustsByContractRsp.Unmarshal(m, b)
}
func (m *QryHoldCustsByContractRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryHoldCustsByContractRsp.Marshal(b, m, deterministic)
}
func (dst *QryHoldCustsByContractRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryHoldCustsByContractRsp.Merge(dst, src)
}
func (m *QryHoldCustsByContractRsp) XXX_Size() int {
	return xxx_messageInfo_QryHoldCustsByContractRsp.Size(m)
}
func (m *QryHoldCustsByContractRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QryHoldCustsByContractRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QryHoldCustsByContractRsp proto.InternalMessageInfo

func (m *QryHoldCustsByContractRsp) GetCustNos() [][]byte {
	if m != nil {
		return m.CustNos
	}
	return nil
}

func (m *QryHoldCustsByContractRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

type QryTradeCalendarReq struct {
	Year                 []byte   `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryTradeCalendarReq) Reset()         { *m = QryTradeCalendarReq{} }
func (m *QryTradeCalendarReq) String() string { return proto.CompactTextString(m) }
func (*QryTradeCalendarReq) ProtoMessage()    {}
func (*QryTradeCalendarReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{7}
}
func (m *QryTradeCalendarReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryTradeCalendarReq.Unmarshal(m, b)
}
func (m *QryTradeCalendarReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryTradeCalendarReq.Marshal(b, m, deterministic)
}
func (dst *QryTradeCalendarReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryTradeCalendarReq.Merge(dst, src)
}
func (m *QryTradeCalendarReq) XXX_Size() int {
	return xxx_messageInfo_QryTradeCalendarReq.Size(m)
}
func (m *QryTradeCalendarReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryTradeCalendarReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryTradeCalendarReq proto.InternalMessageInfo

func (m *QryTradeCalendarReq) GetYear() []byte {
	if m != nil {
		return m.Year
	}
	return nil
}

type QryTradeCalendarRsp struct {
	Calendar             []byte   `protobuf:"bytes,1,opt,name=calendar,proto3" json:"calendar,omitempty"`
	RspInfo              *RspInfo `protobuf:"bytes,2,opt,name=rspInfo" json:"rspInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryTradeCalendarRsp) Reset()         { *m = QryTradeCalendarRsp{} }
func (m *QryTradeCalendarRsp) String() string { return proto.CompactTextString(m) }
func (*QryTradeCalendarRsp) ProtoMessage()    {}
func (*QryTradeCalendarRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{8}
}
func (m *QryTradeCalendarRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryTradeCalendarRsp.Unmarshal(m, b)
}
func (m *QryTradeCalendarRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryTradeCalendarRsp.Marshal(b, m, deterministic)
}
func (dst *QryTradeCalendarRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryTradeCalendarRsp.Merge(dst, src)
}
func (m *QryTradeCalendarRsp) XXX_Size() int {
	return xxx_messageInfo_QryTradeCalendarRsp.Size(m)
}
func (m *QryTradeCalendarRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QryTradeCalendarRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QryTradeCalendarRsp proto.InternalMessageInfo

func (m *QryTradeCalendarRsp) GetCalendar() []byte {
	if m != nil {
		return m.Calendar
	}
	return nil
}

func (m *QryTradeCalendarRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

// 行情监控推送
type QuoteMonRtn struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte   `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	SmarketCode          []byte   `protobuf:"bytes,4,opt,name=smarket_code,json=smarketCode,proto3" json:"smarket_code,omitempty"`
	SecCode              []byte   `protobuf:"bytes,5,opt,name=sec_code,json=secCode,proto3" json:"sec_code,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,6,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	TradeType            []byte   `protobuf:"bytes,7,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	LastPrice            float64  `protobuf:"fixed64,8,opt,name=last_price,json=lastPrice" json:"last_price,omitempty"`
	PreSettlementPrice   float64  `protobuf:"fixed64,9,opt,name=pre_settlement_price,json=preSettlementPrice" json:"pre_settlement_price,omitempty"`
	SettlementPrice      float64  `protobuf:"fixed64,10,opt,name=settlement_price,json=settlementPrice" json:"settlement_price,omitempty"`
	RfLimitPrice         float64  `protobuf:"fixed64,11,opt,name=rf_limit_price,json=rfLimitPrice" json:"rf_limit_price,omitempty"`
	Chg                  float64  `protobuf:"fixed64,12,opt,name=chg" json:"chg,omitempty"`
	RiskLevel            int32    `protobuf:"varint,13,opt,name=risk_level,json=riskLevel" json:"risk_level,omitempty"`
	OpenInterest         uint32   `protobuf:"varint,14,opt,name=open_interest,json=openInterest" json:"open_interest,omitempty"`
	MinMargin            float64  `protobuf:"fixed64,15,opt,name=min_margin,json=minMargin" json:"min_margin,omitempty"`
	MarginRatio          float64  `protobuf:"fixed64,16,opt,name=margin_ratio,json=marginRatio" json:"margin_ratio,omitempty"`
	MarginDiff           float64  `protobuf:"fixed64,17,opt,name=margin_diff,json=marginDiff" json:"margin_diff,omitempty"`
	TickPriceNum         uint32   `protobuf:"varint,18,opt,name=tick_price_num,json=tickPriceNum" json:"tick_price_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuoteMonRtn) Reset()         { *m = QuoteMonRtn{} }
func (m *QuoteMonRtn) String() string { return proto.CompactTextString(m) }
func (*QuoteMonRtn) ProtoMessage()    {}
func (*QuoteMonRtn) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{9}
}
func (m *QuoteMonRtn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuoteMonRtn.Unmarshal(m, b)
}
func (m *QuoteMonRtn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuoteMonRtn.Marshal(b, m, deterministic)
}
func (dst *QuoteMonRtn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteMonRtn.Merge(dst, src)
}
func (m *QuoteMonRtn) XXX_Size() int {
	return xxx_messageInfo_QuoteMonRtn.Size(m)
}
func (m *QuoteMonRtn) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteMonRtn.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteMonRtn proto.InternalMessageInfo

func (m *QuoteMonRtn) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *QuoteMonRtn) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *QuoteMonRtn) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *QuoteMonRtn) GetSmarketCode() []byte {
	if m != nil {
		return m.SmarketCode
	}
	return nil
}

func (m *QuoteMonRtn) GetSecCode() []byte {
	if m != nil {
		return m.SecCode
	}
	return nil
}

func (m *QuoteMonRtn) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *QuoteMonRtn) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *QuoteMonRtn) GetLastPrice() float64 {
	if m != nil {
		return m.LastPrice
	}
	return 0
}

func (m *QuoteMonRtn) GetPreSettlementPrice() float64 {
	if m != nil {
		return m.PreSettlementPrice
	}
	return 0
}

func (m *QuoteMonRtn) GetSettlementPrice() float64 {
	if m != nil {
		return m.SettlementPrice
	}
	return 0
}

func (m *QuoteMonRtn) GetRfLimitPrice() float64 {
	if m != nil {
		return m.RfLimitPrice
	}
	return 0
}

func (m *QuoteMonRtn) GetChg() float64 {
	if m != nil {
		return m.Chg
	}
	return 0
}

func (m *QuoteMonRtn) GetRiskLevel() int32 {
	if m != nil {
		return m.RiskLevel
	}
	return 0
}

func (m *QuoteMonRtn) GetOpenInterest() uint32 {
	if m != nil {
		return m.OpenInterest
	}
	return 0
}

func (m *QuoteMonRtn) GetMinMargin() float64 {
	if m != nil {
		return m.MinMargin
	}
	return 0
}

func (m *QuoteMonRtn) GetMarginRatio() float64 {
	if m != nil {
		return m.MarginRatio
	}
	return 0
}

func (m *QuoteMonRtn) GetMarginDiff() float64 {
	if m != nil {
		return m.MarginDiff
	}
	return 0
}

func (m *QuoteMonRtn) GetTickPriceNum() uint32 {
	if m != nil {
		return m.TickPriceNum
	}
	return 0
}

// 风险客户推送
type CustRiskRtn struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte   `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	CustNo               []byte   `protobuf:"bytes,4,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustClass            []byte   `protobuf:"bytes,5,opt,name=cust_class,json=custClass,proto3" json:"cust_class,omitempty"`
	CustName             []byte   `protobuf:"bytes,6,opt,name=cust_name,json=custName,proto3" json:"cust_name,omitempty"`
	MobilePhone          []byte   `protobuf:"bytes,7,opt,name=mobile_phone,json=mobilePhone,proto3" json:"mobile_phone,omitempty"`
	Clientmode           []byte   `protobuf:"bytes,8,opt,name=clientmode,proto3" json:"clientmode,omitempty"`
	RiskLevel            []byte   `protobuf:"bytes,9,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`
	RiskDegree0          float64  `protobuf:"fixed64,10,opt,name=risk_degree0,json=riskDegree0" json:"risk_degree0,omitempty"`
	RiskDegree1          float64  `protobuf:"fixed64,11,opt,name=risk_degree1,json=riskDegree1" json:"risk_degree1,omitempty"`
	RiskDegree2          float64  `protobuf:"fixed64,12,opt,name=risk_degree2,json=riskDegree2" json:"risk_degree2,omitempty"`
	RiskDegree3          float64  `protobuf:"fixed64,13,opt,name=risk_degree3,json=riskDegree3" json:"risk_degree3,omitempty"`
	LastRiskLevel        []byte   `protobuf:"bytes,14,opt,name=last_risk_level,json=lastRiskLevel,proto3" json:"last_risk_level,omitempty"`
	LastRemain           float64  `protobuf:"fixed64,15,opt,name=last_remain,json=lastRemain" json:"last_remain,omitempty"`
	Margin               float64  `protobuf:"fixed64,16,opt,name=margin" json:"margin,omitempty"`
	DropProfit           float64  `protobuf:"fixed64,17,opt,name=drop_profit,json=dropProfit" json:"drop_profit,omitempty"`
	HoldProfit           float64  `protobuf:"fixed64,18,opt,name=hold_profit,json=holdProfit" json:"hold_profit,omitempty"`
	TodayInout           float64  `protobuf:"fixed64,19,opt,name=today_inout,json=todayInout" json:"today_inout,omitempty"`
	RoyaltyInout         float64  `protobuf:"fixed64,20,opt,name=royalty_inout,json=royaltyInout" json:"royalty_inout,omitempty"`
	DynCapRight          float64  `protobuf:"fixed64,21,opt,name=dyn_cap_right,json=dynCapRight" json:"dyn_cap_right,omitempty"`
	ExchMargin           float64  `protobuf:"fixed64,22,opt,name=exch_margin,json=exchMargin" json:"exch_margin,omitempty"`
	AvailFund            float64  `protobuf:"fixed64,23,opt,name=avail_fund,json=availFund" json:"avail_fund,omitempty"`
	OptionCap            float64  `protobuf:"fixed64,24,opt,name=option_cap,json=optionCap" json:"option_cap,omitempty"`
	DynRights            float64  `protobuf:"fixed64,25,opt,name=dyn_rights,json=dynRights" json:"dyn_rights,omitempty"`
	OptionDynMargin      float64  `protobuf:"fixed64,26,opt,name=option_dyn_margin,json=optionDynMargin" json:"option_dyn_margin,omitempty"`
	FrznMargin           float64  `protobuf:"fixed64,27,opt,name=frzn_margin,json=frznMargin" json:"frzn_margin,omitempty"`
	FrznRoyalty          float64  `protobuf:"fixed64,28,opt,name=frzn_royalty,json=frznRoyalty" json:"frzn_royalty,omitempty"`
	ExchFrznMargin       float64  `protobuf:"fixed64,29,opt,name=exch_frzn_margin,json=exchFrznMargin" json:"exch_frzn_margin,omitempty"`
	FrznStrikeMargin     float64  `protobuf:"fixed64,30,opt,name=frzn_strike_margin,json=frznStrikeMargin" json:"frzn_strike_margin,omitempty"`
	OptionNowMargin      float64  `protobuf:"fixed64,31,opt,name=option_now_margin,json=optionNowMargin" json:"option_now_margin,omitempty"`
	ExchOptionNowMargin  float64  `protobuf:"fixed64,32,opt,name=exch_option_now_margin,json=exchOptionNowMargin" json:"exch_option_now_margin,omitempty"`
	ExchOptionDynMargin  float64  `protobuf:"fixed64,33,opt,name=exch_option_dyn_margin,json=exchOptionDynMargin" json:"exch_option_dyn_margin,omitempty"`
	RiskContractQty      uint32   `protobuf:"varint,34,opt,name=risk_contract_qty,json=riskContractQty" json:"risk_contract_qty,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,35,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	TradingNo            []byte   `protobuf:"bytes,36,opt,name=trading_no,json=tradingNo,proto3" json:"trading_no,omitempty"`
	DynRatio             float64  `protobuf:"fixed64,37,opt,name=dyn_ratio,json=dynRatio" json:"dyn_ratio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustRiskRtn) Reset()         { *m = CustRiskRtn{} }
func (m *CustRiskRtn) String() string { return proto.CompactTextString(m) }
func (*CustRiskRtn) ProtoMessage()    {}
func (*CustRiskRtn) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{10}
}
func (m *CustRiskRtn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustRiskRtn.Unmarshal(m, b)
}
func (m *CustRiskRtn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustRiskRtn.Marshal(b, m, deterministic)
}
func (dst *CustRiskRtn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustRiskRtn.Merge(dst, src)
}
func (m *CustRiskRtn) XXX_Size() int {
	return xxx_messageInfo_CustRiskRtn.Size(m)
}
func (m *CustRiskRtn) XXX_DiscardUnknown() {
	xxx_messageInfo_CustRiskRtn.DiscardUnknown(m)
}

var xxx_messageInfo_CustRiskRtn proto.InternalMessageInfo

func (m *CustRiskRtn) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *CustRiskRtn) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *CustRiskRtn) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *CustRiskRtn) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *CustRiskRtn) GetCustClass() []byte {
	if m != nil {
		return m.CustClass
	}
	return nil
}

func (m *CustRiskRtn) GetCustName() []byte {
	if m != nil {
		return m.CustName
	}
	return nil
}

func (m *CustRiskRtn) GetMobilePhone() []byte {
	if m != nil {
		return m.MobilePhone
	}
	return nil
}

func (m *CustRiskRtn) GetClientmode() []byte {
	if m != nil {
		return m.Clientmode
	}
	return nil
}

func (m *CustRiskRtn) GetRiskLevel() []byte {
	if m != nil {
		return m.RiskLevel
	}
	return nil
}

func (m *CustRiskRtn) GetRiskDegree0() float64 {
	if m != nil {
		return m.RiskDegree0
	}
	return 0
}

func (m *CustRiskRtn) GetRiskDegree1() float64 {
	if m != nil {
		return m.RiskDegree1
	}
	return 0
}

func (m *CustRiskRtn) GetRiskDegree2() float64 {
	if m != nil {
		return m.RiskDegree2
	}
	return 0
}

func (m *CustRiskRtn) GetRiskDegree3() float64 {
	if m != nil {
		return m.RiskDegree3
	}
	return 0
}

func (m *CustRiskRtn) GetLastRiskLevel() []byte {
	if m != nil {
		return m.LastRiskLevel
	}
	return nil
}

func (m *CustRiskRtn) GetLastRemain() float64 {
	if m != nil {
		return m.LastRemain
	}
	return 0
}

func (m *CustRiskRtn) GetMargin() float64 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *CustRiskRtn) GetDropProfit() float64 {
	if m != nil {
		return m.DropProfit
	}
	return 0
}

func (m *CustRiskRtn) GetHoldProfit() float64 {
	if m != nil {
		return m.HoldProfit
	}
	return 0
}

func (m *CustRiskRtn) GetTodayInout() float64 {
	if m != nil {
		return m.TodayInout
	}
	return 0
}

func (m *CustRiskRtn) GetRoyaltyInout() float64 {
	if m != nil {
		return m.RoyaltyInout
	}
	return 0
}

func (m *CustRiskRtn) GetDynCapRight() float64 {
	if m != nil {
		return m.DynCapRight
	}
	return 0
}

func (m *CustRiskRtn) GetExchMargin() float64 {
	if m != nil {
		return m.ExchMargin
	}
	return 0
}

func (m *CustRiskRtn) GetAvailFund() float64 {
	if m != nil {
		return m.AvailFund
	}
	return 0
}

func (m *CustRiskRtn) GetOptionCap() float64 {
	if m != nil {
		return m.OptionCap
	}
	return 0
}

func (m *CustRiskRtn) GetDynRights() float64 {
	if m != nil {
		return m.DynRights
	}
	return 0
}

func (m *CustRiskRtn) GetOptionDynMargin() float64 {
	if m != nil {
		return m.OptionDynMargin
	}
	return 0
}

func (m *CustRiskRtn) GetFrznMargin() float64 {
	if m != nil {
		return m.FrznMargin
	}
	return 0
}

func (m *CustRiskRtn) GetFrznRoyalty() float64 {
	if m != nil {
		return m.FrznRoyalty
	}
	return 0
}

func (m *CustRiskRtn) GetExchFrznMargin() float64 {
	if m != nil {
		return m.ExchFrznMargin
	}
	return 0
}

func (m *CustRiskRtn) GetFrznStrikeMargin() float64 {
	if m != nil {
		return m.FrznStrikeMargin
	}
	return 0
}

func (m *CustRiskRtn) GetOptionNowMargin() float64 {
	if m != nil {
		return m.OptionNowMargin
	}
	return 0
}

func (m *CustRiskRtn) GetExchOptionNowMargin() float64 {
	if m != nil {
		return m.ExchOptionNowMargin
	}
	return 0
}

func (m *CustRiskRtn) GetExchOptionDynMargin() float64 {
	if m != nil {
		return m.ExchOptionDynMargin
	}
	return 0
}

func (m *CustRiskRtn) GetRiskContractQty() uint32 {
	if m != nil {
		return m.RiskContractQty
	}
	return 0
}

func (m *CustRiskRtn) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

func (m *CustRiskRtn) GetTradingNo() []byte {
	if m != nil {
		return m.TradingNo
	}
	return nil
}

func (m *CustRiskRtn) GetDynRatio() float64 {
	if m != nil {
		return m.DynRatio
	}
	return 0
}

// 客户持仓推送
type CustHoldRtn struct {
	PackFlag             uint32               `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32               `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte               `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	CustNo               []byte               `protobuf:"bytes,4,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustClass            []byte               `protobuf:"bytes,5,opt,name=cust_class,json=custClass,proto3" json:"cust_class,omitempty"`
	ExchCode             []byte               `protobuf:"bytes,6,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode             []byte               `protobuf:"bytes,7,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	ContractCode         []byte               `protobuf:"bytes,8,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	DelivDate            []byte               `protobuf:"bytes,9,opt,name=deliv_date,json=delivDate,proto3" json:"deliv_date,omitempty"`
	HoldSum              uint32               `protobuf:"varint,10,opt,name=hold_sum,json=holdSum" json:"hold_sum,omitempty"`
	TradeType            []byte               `protobuf:"bytes,11,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	CpFlag               []byte               `protobuf:"bytes,12,opt,name=cp_flag,json=cpFlag,proto3" json:"cp_flag,omitempty"`
	MonthFlag            []byte               `protobuf:"bytes,13,opt,name=month_flag,json=monthFlag,proto3" json:"month_flag,omitempty"`
	LimitRatio           float64              `protobuf:"fixed64,14,opt,name=limit_ratio,json=limitRatio" json:"limit_ratio,omitempty"`
	LimitVolmue          uint32               `protobuf:"varint,15,opt,name=limit_volmue,json=limitVolmue" json:"limit_volmue,omitempty"`
	OverVolume           uint32               `protobuf:"varint,16,opt,name=over_volume,json=overVolume" json:"over_volume,omitempty"`
	LimitWrning          uint32               `protobuf:"varint,17,opt,name=limit_wrning,json=limitWrning" json:"limit_wrning,omitempty"`
	OverWrning           uint32               `protobuf:"varint,18,opt,name=over_wrning,json=overWrning" json:"over_wrning,omitempty"`
	HoldType             CustHoldRtn_HoldType `protobuf:"varint,19,opt,name=hold_type,json=holdType,enum=riskmonitorserver.CustHoldRtn_HoldType" json:"hold_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CustHoldRtn) Reset()         { *m = CustHoldRtn{} }
func (m *CustHoldRtn) String() string { return proto.CompactTextString(m) }
func (*CustHoldRtn) ProtoMessage()    {}
func (*CustHoldRtn) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{11}
}
func (m *CustHoldRtn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustHoldRtn.Unmarshal(m, b)
}
func (m *CustHoldRtn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustHoldRtn.Marshal(b, m, deterministic)
}
func (dst *CustHoldRtn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustHoldRtn.Merge(dst, src)
}
func (m *CustHoldRtn) XXX_Size() int {
	return xxx_messageInfo_CustHoldRtn.Size(m)
}
func (m *CustHoldRtn) XXX_DiscardUnknown() {
	xxx_messageInfo_CustHoldRtn.DiscardUnknown(m)
}

var xxx_messageInfo_CustHoldRtn proto.InternalMessageInfo

func (m *CustHoldRtn) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *CustHoldRtn) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *CustHoldRtn) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *CustHoldRtn) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *CustHoldRtn) GetCustClass() []byte {
	if m != nil {
		return m.CustClass
	}
	return nil
}

func (m *CustHoldRtn) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *CustHoldRtn) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *CustHoldRtn) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *CustHoldRtn) GetDelivDate() []byte {
	if m != nil {
		return m.DelivDate
	}
	return nil
}

func (m *CustHoldRtn) GetHoldSum() uint32 {
	if m != nil {
		return m.HoldSum
	}
	return 0
}

func (m *CustHoldRtn) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *CustHoldRtn) GetCpFlag() []byte {
	if m != nil {
		return m.CpFlag
	}
	return nil
}

func (m *CustHoldRtn) GetMonthFlag() []byte {
	if m != nil {
		return m.MonthFlag
	}
	return nil
}

func (m *CustHoldRtn) GetLimitRatio() float64 {
	if m != nil {
		return m.LimitRatio
	}
	return 0
}

func (m *CustHoldRtn) GetLimitVolmue() uint32 {
	if m != nil {
		return m.LimitVolmue
	}
	return 0
}

func (m *CustHoldRtn) GetOverVolume() uint32 {
	if m != nil {
		return m.OverVolume
	}
	return 0
}

func (m *CustHoldRtn) GetLimitWrning() uint32 {
	if m != nil {
		return m.LimitWrning
	}
	return 0
}

func (m *CustHoldRtn) GetOverWrning() uint32 {
	if m != nil {
		return m.OverWrning
	}
	return 0
}

func (m *CustHoldRtn) GetHoldType() CustHoldRtn_HoldType {
	if m != nil {
		return m.HoldType
	}
	return CustHoldRtn_Total
}

// 客户组持仓推送
type CustGroupHoldRtn struct {
	PackFlag      uint32                    `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag    uint32                    `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo     []byte                    `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	CustGroupNo   []byte                    `protobuf:"bytes,4,opt,name=cust_group_no,json=custGroupNo,proto3" json:"cust_group_no,omitempty"`
	CustGroupName []byte                    `protobuf:"bytes,5,opt,name=cust_group_name,json=custGroupName,proto3" json:"cust_group_name,omitempty"`
	ExchCode      []byte                    `protobuf:"bytes,6,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode      []byte                    `protobuf:"bytes,7,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	ContractCode  []byte                    `protobuf:"bytes,8,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	DelivDate     []byte                    `protobuf:"bytes,9,opt,name=deliv_date,json=delivDate,proto3" json:"deliv_date,omitempty"`
	HoldSum       uint32                    `protobuf:"varint,10,opt,name=hold_sum,json=holdSum" json:"hold_sum,omitempty"`
	TradeType     []byte                    `protobuf:"bytes,11,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	CpFlag        []byte                    `protobuf:"bytes,12,opt,name=cp_flag,json=cpFlag,proto3" json:"cp_flag,omitempty"`
	MonthFlag     []byte                    `protobuf:"bytes,13,opt,name=month_flag,json=monthFlag,proto3" json:"month_flag,omitempty"`
	LimitRatio    float64                   `protobuf:"fixed64,14,opt,name=limit_ratio,json=limitRatio" json:"limit_ratio,omitempty"`
	LimitVolmue   uint32                    `protobuf:"varint,15,opt,name=limit_volmue,json=limitVolmue" json:"limit_volmue,omitempty"`
	OverVolume    uint32                    `protobuf:"varint,16,opt,name=over_volume,json=overVolume" json:"over_volume,omitempty"`
	LimitWrning   uint32                    `protobuf:"varint,17,opt,name=limit_wrning,json=limitWrning" json:"limit_wrning,omitempty"`
	OverWrning    uint32                    `protobuf:"varint,18,opt,name=over_wrning,json=overWrning" json:"over_wrning,omitempty"`
	HoldType      CustGroupHoldRtn_HoldType `protobuf:"varint,19,opt,name=hold_type,json=holdType,enum=riskmonitorserver.CustGroupHoldRtn_HoldType" json:"hold_type,omitempty"`
	// 客户持仓明细
	CustNo               []byte   `protobuf:"bytes,20,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustClass            []byte   `protobuf:"bytes,21,opt,name=cust_class,json=custClass,proto3" json:"cust_class,omitempty"`
	CustHoldSum          uint32   `protobuf:"varint,22,opt,name=cust_hold_sum,json=custHoldSum" json:"cust_hold_sum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustGroupHoldRtn) Reset()         { *m = CustGroupHoldRtn{} }
func (m *CustGroupHoldRtn) String() string { return proto.CompactTextString(m) }
func (*CustGroupHoldRtn) ProtoMessage()    {}
func (*CustGroupHoldRtn) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{12}
}
func (m *CustGroupHoldRtn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustGroupHoldRtn.Unmarshal(m, b)
}
func (m *CustGroupHoldRtn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustGroupHoldRtn.Marshal(b, m, deterministic)
}
func (dst *CustGroupHoldRtn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustGroupHoldRtn.Merge(dst, src)
}
func (m *CustGroupHoldRtn) XXX_Size() int {
	return xxx_messageInfo_CustGroupHoldRtn.Size(m)
}
func (m *CustGroupHoldRtn) XXX_DiscardUnknown() {
	xxx_messageInfo_CustGroupHoldRtn.DiscardUnknown(m)
}

var xxx_messageInfo_CustGroupHoldRtn proto.InternalMessageInfo

func (m *CustGroupHoldRtn) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *CustGroupHoldRtn) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *CustGroupHoldRtn) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *CustGroupHoldRtn) GetCustGroupNo() []byte {
	if m != nil {
		return m.CustGroupNo
	}
	return nil
}

func (m *CustGroupHoldRtn) GetCustGroupName() []byte {
	if m != nil {
		return m.CustGroupName
	}
	return nil
}

func (m *CustGroupHoldRtn) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *CustGroupHoldRtn) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *CustGroupHoldRtn) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *CustGroupHoldRtn) GetDelivDate() []byte {
	if m != nil {
		return m.DelivDate
	}
	return nil
}

func (m *CustGroupHoldRtn) GetHoldSum() uint32 {
	if m != nil {
		return m.HoldSum
	}
	return 0
}

func (m *CustGroupHoldRtn) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *CustGroupHoldRtn) GetCpFlag() []byte {
	if m != nil {
		return m.CpFlag
	}
	return nil
}

func (m *CustGroupHoldRtn) GetMonthFlag() []byte {
	if m != nil {
		return m.MonthFlag
	}
	return nil
}

func (m *CustGroupHoldRtn) GetLimitRatio() float64 {
	if m != nil {
		return m.LimitRatio
	}
	return 0
}

func (m *CustGroupHoldRtn) GetLimitVolmue() uint32 {
	if m != nil {
		return m.LimitVolmue
	}
	return 0
}

func (m *CustGroupHoldRtn) GetOverVolume() uint32 {
	if m != nil {
		return m.OverVolume
	}
	return 0
}

func (m *CustGroupHoldRtn) GetLimitWrning() uint32 {
	if m != nil {
		return m.LimitWrning
	}
	return 0
}

func (m *CustGroupHoldRtn) GetOverWrning() uint32 {
	if m != nil {
		return m.OverWrning
	}
	return 0
}

func (m *CustGroupHoldRtn) GetHoldType() CustGroupHoldRtn_HoldType {
	if m != nil {
		return m.HoldType
	}
	return CustGroupHoldRtn_Total
}

func (m *CustGroupHoldRtn) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *CustGroupHoldRtn) GetCustClass() []byte {
	if m != nil {
		return m.CustClass
	}
	return nil
}

func (m *CustGroupHoldRtn) GetCustHoldSum() uint32 {
	if m != nil {
		return m.CustHoldSum
	}
	return 0
}

// 临近最后交易日持仓监控推送
type NearDediveHoldRtn struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte   `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	CustNo               []byte   `protobuf:"bytes,4,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustClass            []byte   `protobuf:"bytes,5,opt,name=cust_class,json=custClass,proto3" json:"cust_class,omitempty"`
	ExchCode             []byte   `protobuf:"bytes,6,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode             []byte   `protobuf:"bytes,7,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,8,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	DelivDate            []byte   `protobuf:"bytes,9,opt,name=deliv_date,json=delivDate,proto3" json:"deliv_date,omitempty"`
	HoldSum              uint32   `protobuf:"varint,10,opt,name=hold_sum,json=holdSum" json:"hold_sum,omitempty"`
	TradeType            []byte   `protobuf:"bytes,11,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	CpFlag               []byte   `protobuf:"bytes,12,opt,name=cp_flag,json=cpFlag,proto3" json:"cp_flag,omitempty"`
	ExpireDays           uint32   `protobuf:"varint,13,opt,name=expire_days,json=expireDays" json:"expire_days,omitempty"`
	LimitBase            uint32   `protobuf:"varint,14,opt,name=limit_base,json=limitBase" json:"limit_base,omitempty"`
	CloseDays            uint32   `protobuf:"varint,15,opt,name=close_days,json=closeDays" json:"close_days,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NearDediveHoldRtn) Reset()         { *m = NearDediveHoldRtn{} }
func (m *NearDediveHoldRtn) String() string { return proto.CompactTextString(m) }
func (*NearDediveHoldRtn) ProtoMessage()    {}
func (*NearDediveHoldRtn) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{13}
}
func (m *NearDediveHoldRtn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NearDediveHoldRtn.Unmarshal(m, b)
}
func (m *NearDediveHoldRtn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NearDediveHoldRtn.Marshal(b, m, deterministic)
}
func (dst *NearDediveHoldRtn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NearDediveHoldRtn.Merge(dst, src)
}
func (m *NearDediveHoldRtn) XXX_Size() int {
	return xxx_messageInfo_NearDediveHoldRtn.Size(m)
}
func (m *NearDediveHoldRtn) XXX_DiscardUnknown() {
	xxx_messageInfo_NearDediveHoldRtn.DiscardUnknown(m)
}

var xxx_messageInfo_NearDediveHoldRtn proto.InternalMessageInfo

func (m *NearDediveHoldRtn) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *NearDediveHoldRtn) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *NearDediveHoldRtn) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *NearDediveHoldRtn) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *NearDediveHoldRtn) GetCustClass() []byte {
	if m != nil {
		return m.CustClass
	}
	return nil
}

func (m *NearDediveHoldRtn) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *NearDediveHoldRtn) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *NearDediveHoldRtn) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *NearDediveHoldRtn) GetDelivDate() []byte {
	if m != nil {
		return m.DelivDate
	}
	return nil
}

func (m *NearDediveHoldRtn) GetHoldSum() uint32 {
	if m != nil {
		return m.HoldSum
	}
	return 0
}

func (m *NearDediveHoldRtn) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *NearDediveHoldRtn) GetCpFlag() []byte {
	if m != nil {
		return m.CpFlag
	}
	return nil
}

func (m *NearDediveHoldRtn) GetExpireDays() uint32 {
	if m != nil {
		return m.ExpireDays
	}
	return 0
}

func (m *NearDediveHoldRtn) GetLimitBase() uint32 {
	if m != nil {
		return m.LimitBase
	}
	return 0
}

func (m *NearDediveHoldRtn) GetCloseDays() uint32 {
	if m != nil {
		return m.CloseDays
	}
	return 0
}

// 商品组风险推送
type ProuctGroupRiskRtn struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte   `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	ProductGroupNo       []byte   `protobuf:"bytes,4,opt,name=product_group_no,json=productGroupNo,proto3" json:"product_group_no,omitempty"`
	ProductGroupName     []byte   `protobuf:"bytes,5,opt,name=product_group_name,json=productGroupName,proto3" json:"product_group_name,omitempty"`
	Count                uint32   `protobuf:"varint,6,opt,name=count" json:"count,omitempty"`
	RiskCount            uint32   `protobuf:"varint,7,opt,name=risk_count,json=riskCount" json:"risk_count,omitempty"`
	RiskDegree           float64  `protobuf:"fixed64,8,opt,name=risk_degree,json=riskDegree" json:"risk_degree,omitempty"`
	SmarketCode          []byte   `protobuf:"bytes,9,opt,name=smarket_code,json=smarketCode,proto3" json:"smarket_code,omitempty"`
	SecCode              []byte   `protobuf:"bytes,10,opt,name=sec_code,json=secCode,proto3" json:"sec_code,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,11,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	TradeType            []byte   `protobuf:"bytes,12,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	LastPrice            float64  `protobuf:"fixed64,13,opt,name=last_price,json=lastPrice" json:"last_price,omitempty"`
	PreSettlementPrice   float64  `protobuf:"fixed64,14,opt,name=pre_settlement_price,json=preSettlementPrice" json:"pre_settlement_price,omitempty"`
	SettlementPrice      float64  `protobuf:"fixed64,15,opt,name=settlement_price,json=settlementPrice" json:"settlement_price,omitempty"`
	RfLimitPrice         float64  `protobuf:"fixed64,16,opt,name=rf_limit_price,json=rfLimitPrice" json:"rf_limit_price,omitempty"`
	Chg                  float64  `protobuf:"fixed64,17,opt,name=chg" json:"chg,omitempty"`
	RiskLevel            int32    `protobuf:"varint,18,opt,name=risk_level,json=riskLevel" json:"risk_level,omitempty"`
	OpenInterest         uint32   `protobuf:"varint,19,opt,name=open_interest,json=openInterest" json:"open_interest,omitempty"`
	MinMargin            float64  `protobuf:"fixed64,20,opt,name=min_margin,json=minMargin" json:"min_margin,omitempty"`
	MarginRatio          float64  `protobuf:"fixed64,21,opt,name=margin_ratio,json=marginRatio" json:"margin_ratio,omitempty"`
	MarginDiff           float64  `protobuf:"fixed64,22,opt,name=margin_diff,json=marginDiff" json:"margin_diff,omitempty"`
	TickPriceNum         uint32   `protobuf:"varint,23,opt,name=tick_price_num,json=tickPriceNum" json:"tick_price_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProuctGroupRiskRtn) Reset()         { *m = ProuctGroupRiskRtn{} }
func (m *ProuctGroupRiskRtn) String() string { return proto.CompactTextString(m) }
func (*ProuctGroupRiskRtn) ProtoMessage()    {}
func (*ProuctGroupRiskRtn) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{14}
}
func (m *ProuctGroupRiskRtn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProuctGroupRiskRtn.Unmarshal(m, b)
}
func (m *ProuctGroupRiskRtn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProuctGroupRiskRtn.Marshal(b, m, deterministic)
}
func (dst *ProuctGroupRiskRtn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProuctGroupRiskRtn.Merge(dst, src)
}
func (m *ProuctGroupRiskRtn) XXX_Size() int {
	return xxx_messageInfo_ProuctGroupRiskRtn.Size(m)
}
func (m *ProuctGroupRiskRtn) XXX_DiscardUnknown() {
	xxx_messageInfo_ProuctGroupRiskRtn.DiscardUnknown(m)
}

var xxx_messageInfo_ProuctGroupRiskRtn proto.InternalMessageInfo

func (m *ProuctGroupRiskRtn) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *ProuctGroupRiskRtn) GetProductGroupNo() []byte {
	if m != nil {
		return m.ProductGroupNo
	}
	return nil
}

func (m *ProuctGroupRiskRtn) GetProductGroupName() []byte {
	if m != nil {
		return m.ProductGroupName
	}
	return nil
}

func (m *ProuctGroupRiskRtn) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetRiskCount() uint32 {
	if m != nil {
		return m.RiskCount
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetRiskDegree() float64 {
	if m != nil {
		return m.RiskDegree
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetSmarketCode() []byte {
	if m != nil {
		return m.SmarketCode
	}
	return nil
}

func (m *ProuctGroupRiskRtn) GetSecCode() []byte {
	if m != nil {
		return m.SecCode
	}
	return nil
}

func (m *ProuctGroupRiskRtn) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *ProuctGroupRiskRtn) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *ProuctGroupRiskRtn) GetLastPrice() float64 {
	if m != nil {
		return m.LastPrice
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetPreSettlementPrice() float64 {
	if m != nil {
		return m.PreSettlementPrice
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetSettlementPrice() float64 {
	if m != nil {
		return m.SettlementPrice
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetRfLimitPrice() float64 {
	if m != nil {
		return m.RfLimitPrice
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetChg() float64 {
	if m != nil {
		return m.Chg
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetRiskLevel() int32 {
	if m != nil {
		return m.RiskLevel
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetOpenInterest() uint32 {
	if m != nil {
		return m.OpenInterest
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetMinMargin() float64 {
	if m != nil {
		return m.MinMargin
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetMarginRatio() float64 {
	if m != nil {
		return m.MarginRatio
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetMarginDiff() float64 {
	if m != nil {
		return m.MarginDiff
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetTickPriceNum() uint32 {
	if m != nil {
		return m.TickPriceNum
	}
	return 0
}

// 客户信息查询请求
type QryCustSimpleInfoReq struct {
	CustNo               []byte   `protobuf:"bytes,1,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustClass            []byte   `protobuf:"bytes,2,opt,name=cust_class,json=custClass,proto3" json:"cust_class,omitempty"`
	CustStatus           []byte   `protobuf:"bytes,3,opt,name=cust_status,json=custStatus,proto3" json:"cust_status,omitempty"`
	CustName             []byte   `protobuf:"bytes,4,opt,name=cust_name,json=custName,proto3" json:"cust_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryCustSimpleInfoReq) Reset()         { *m = QryCustSimpleInfoReq{} }
func (m *QryCustSimpleInfoReq) String() string { return proto.CompactTextString(m) }
func (*QryCustSimpleInfoReq) ProtoMessage()    {}
func (*QryCustSimpleInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{15}
}
func (m *QryCustSimpleInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryCustSimpleInfoReq.Unmarshal(m, b)
}
func (m *QryCustSimpleInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryCustSimpleInfoReq.Marshal(b, m, deterministic)
}
func (dst *QryCustSimpleInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryCustSimpleInfoReq.Merge(dst, src)
}
func (m *QryCustSimpleInfoReq) XXX_Size() int {
	return xxx_messageInfo_QryCustSimpleInfoReq.Size(m)
}
func (m *QryCustSimpleInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryCustSimpleInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryCustSimpleInfoReq proto.InternalMessageInfo

func (m *QryCustSimpleInfoReq) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *QryCustSimpleInfoReq) GetCustClass() []byte {
	if m != nil {
		return m.CustClass
	}
	return nil
}

func (m *QryCustSimpleInfoReq) GetCustStatus() []byte {
	if m != nil {
		return m.CustStatus
	}
	return nil
}

func (m *QryCustSimpleInfoReq) GetCustName() []byte {
	if m != nil {
		return m.CustName
	}
	return nil
}

// 客户信息查询应答
type QryCustSimpleInfoRsp struct {
	RspInfo              *RspInfo                        `protobuf:"bytes,1,opt,name=rspInfo" json:"rspInfo,omitempty"`
	PackFlag             uint32                          `protobuf:"varint,2,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	CustNo               []byte                          `protobuf:"bytes,3,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustClass            []byte                          `protobuf:"bytes,4,opt,name=cust_class,json=custClass,proto3" json:"cust_class,omitempty"`
	CustStatus           []byte                          `protobuf:"bytes,5,opt,name=cust_status,json=custStatus,proto3" json:"cust_status,omitempty"`
	CustName             []byte                          `protobuf:"bytes,6,opt,name=cust_name,json=custName,proto3" json:"cust_name,omitempty"`
	Phone                []byte                          `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
	Fax                  []byte                          `protobuf:"bytes,8,opt,name=fax,proto3" json:"fax,omitempty"`
	Addr                 []byte                          `protobuf:"bytes,9,opt,name=addr,proto3" json:"addr,omitempty"`
	CmdAssign1           []byte                          `protobuf:"bytes,10,opt,name=cmd_assign1,json=cmdAssign1,proto3" json:"cmd_assign1,omitempty"`
	FundAllot1           []byte                          `protobuf:"bytes,11,opt,name=fund_allot1,json=fundAllot1,proto3" json:"fund_allot1,omitempty"`
	Email                []byte                          `protobuf:"bytes,12,opt,name=email,proto3" json:"email,omitempty"`
	CmdAssign2           []byte                          `protobuf:"bytes,13,opt,name=cmd_assign2,json=cmdAssign2,proto3" json:"cmd_assign2,omitempty"`
	MobilePhone          []byte                          `protobuf:"bytes,14,opt,name=mobile_phone,json=mobilePhone,proto3" json:"mobile_phone,omitempty"`
	Clientmode           []byte                          `protobuf:"bytes,15,opt,name=clientmode,proto3" json:"clientmode,omitempty"`
	ClientType           QryCustSimpleInfoRsp_ClientType `protobuf:"varint,16,opt,name=client_type,json=clientType,enum=riskmonitorserver.QryCustSimpleInfoRsp_ClientType" json:"client_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *QryCustSimpleInfoRsp) Reset()         { *m = QryCustSimpleInfoRsp{} }
func (m *QryCustSimpleInfoRsp) String() string { return proto.CompactTextString(m) }
func (*QryCustSimpleInfoRsp) ProtoMessage()    {}
func (*QryCustSimpleInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{16}
}
func (m *QryCustSimpleInfoRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryCustSimpleInfoRsp.Unmarshal(m, b)
}
func (m *QryCustSimpleInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryCustSimpleInfoRsp.Marshal(b, m, deterministic)
}
func (dst *QryCustSimpleInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryCustSimpleInfoRsp.Merge(dst, src)
}
func (m *QryCustSimpleInfoRsp) XXX_Size() int {
	return xxx_messageInfo_QryCustSimpleInfoRsp.Size(m)
}
func (m *QryCustSimpleInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QryCustSimpleInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QryCustSimpleInfoRsp proto.InternalMessageInfo

func (m *QryCustSimpleInfoRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *QryCustSimpleInfoRsp) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetCustClass() []byte {
	if m != nil {
		return m.CustClass
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetCustStatus() []byte {
	if m != nil {
		return m.CustStatus
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetCustName() []byte {
	if m != nil {
		return m.CustName
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetPhone() []byte {
	if m != nil {
		return m.Phone
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetFax() []byte {
	if m != nil {
		return m.Fax
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetCmdAssign1() []byte {
	if m != nil {
		return m.CmdAssign1
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetFundAllot1() []byte {
	if m != nil {
		return m.FundAllot1
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetEmail() []byte {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetCmdAssign2() []byte {
	if m != nil {
		return m.CmdAssign2
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetMobilePhone() []byte {
	if m != nil {
		return m.MobilePhone
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetClientmode() []byte {
	if m != nil {
		return m.Clientmode
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetClientType() QryCustSimpleInfoRsp_ClientType {
	if m != nil {
		return m.ClientType
	}
	return QryCustSimpleInfoRsp_NATURAL
}

// 实时资金查询请求
type QryRealFundReq struct {
	CustNo               []byte   `protobuf:"bytes,1,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryRealFundReq) Reset()         { *m = QryRealFundReq{} }
func (m *QryRealFundReq) String() string { return proto.CompactTextString(m) }
func (*QryRealFundReq) ProtoMessage()    {}
func (*QryRealFundReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{17}
}
func (m *QryRealFundReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryRealFundReq.Unmarshal(m, b)
}
func (m *QryRealFundReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryRealFundReq.Marshal(b, m, deterministic)
}
func (dst *QryRealFundReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryRealFundReq.Merge(dst, src)
}
func (m *QryRealFundReq) XXX_Size() int {
	return xxx_messageInfo_QryRealFundReq.Size(m)
}
func (m *QryRealFundReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryRealFundReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryRealFundReq proto.InternalMessageInfo

func (m *QryRealFundReq) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *QryRealFundReq) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

// 实时资金查询应答
type QryRealFundRsp struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	CustNo               []byte   `protobuf:"bytes,2,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustName             []byte   `protobuf:"bytes,3,opt,name=cust_name,json=custName,proto3" json:"cust_name,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	FundAccountNo        []byte   `protobuf:"bytes,5,opt,name=fund_account_no,json=fundAccountNo,proto3" json:"fund_account_no,omitempty"`
	LastRemain           float64  `protobuf:"fixed64,6,opt,name=last_remain,json=lastRemain" json:"last_remain,omitempty"`
	AvailFund            float64  `protobuf:"fixed64,7,opt,name=avail_fund,json=availFund" json:"avail_fund,omitempty"`
	BEntrustFrzn         float64  `protobuf:"fixed64,8,opt,name=b_entrust_frzn,json=bEntrustFrzn" json:"b_entrust_frzn,omitempty"`
	SEntrustFrzn         float64  `protobuf:"fixed64,9,opt,name=s_entrust_frzn,json=sEntrustFrzn" json:"s_entrust_frzn,omitempty"`
	Commi                float64  `protobuf:"fixed64,10,opt,name=commi" json:"commi,omitempty"`
	BMargin              float64  `protobuf:"fixed64,11,opt,name=b_margin,json=bMargin" json:"b_margin,omitempty"`
	SMargin              float64  `protobuf:"fixed64,12,opt,name=s_margin,json=sMargin" json:"s_margin,omitempty"`
	DropProfit           float64  `protobuf:"fixed64,13,opt,name=drop_profit,json=dropProfit" json:"drop_profit,omitempty"`
	HoldProfit           float64  `protobuf:"fixed64,14,opt,name=hold_profit,json=holdProfit" json:"hold_profit,omitempty"`
	WayMoney             float64  `protobuf:"fixed64,15,opt,name=way_money,json=wayMoney" json:"way_money,omitempty"`
	UndelivProfit        float64  `protobuf:"fixed64,16,opt,name=undeliv_profit,json=undelivProfit" json:"undeliv_profit,omitempty"`
	DynRights            float64  `protobuf:"fixed64,17,opt,name=dyn_rights,json=dynRights" json:"dyn_rights,omitempty"`
	TodayInout           float64  `protobuf:"fixed64,18,opt,name=today_inout,json=todayInout" json:"today_inout,omitempty"`
	TotalFrzn            float64  `protobuf:"fixed64,19,opt,name=total_frzn,json=totalFrzn" json:"total_frzn,omitempty"`
	Margin               float64  `protobuf:"fixed64,20,opt,name=margin" json:"margin,omitempty"`
	ExchMargin           float64  `protobuf:"fixed64,21,opt,name=exch_margin,json=exchMargin" json:"exch_margin,omitempty"`
	PledgeAmt            float64  `protobuf:"fixed64,22,opt,name=pledge_amt,json=pledgeAmt" json:"pledge_amt,omitempty"`
	CreditAmt            float64  `protobuf:"fixed64,23,opt,name=credit_amt,json=creditAmt" json:"credit_amt,omitempty"`
	RiskDegree0          float64  `protobuf:"fixed64,24,opt,name=risk_degree0,json=riskDegree0" json:"risk_degree0,omitempty"`
	RiskDegree1          float64  `protobuf:"fixed64,25,opt,name=risk_degree1,json=riskDegree1" json:"risk_degree1,omitempty"`
	RiskDegree2          float64  `protobuf:"fixed64,26,opt,name=risk_degree2,json=riskDegree2" json:"risk_degree2,omitempty"`
	RiskDegree3          float64  `protobuf:"fixed64,27,opt,name=risk_degree3,json=riskDegree3" json:"risk_degree3,omitempty"`
	RiskDegree4          float64  `protobuf:"fixed64,28,opt,name=risk_degree4,json=riskDegree4" json:"risk_degree4,omitempty"`
	RiskLevel            []byte   `protobuf:"bytes,29,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`
	FrznCommi            float64  `protobuf:"fixed64,30,opt,name=frzn_commi,json=frznCommi" json:"frzn_commi,omitempty"`
	CurrencyIn           float64  `protobuf:"fixed64,31,opt,name=currency_in,json=currencyIn" json:"currency_in,omitempty"`
	CurrencyOut          float64  `protobuf:"fixed64,32,opt,name=currency_out,json=currencyOut" json:"currency_out,omitempty"`
	InitialFund          float64  `protobuf:"fixed64,33,opt,name=initial_fund,json=initialFund" json:"initial_fund,omitempty"`
	PledgeBalance        float64  `protobuf:"fixed64,34,opt,name=pledge_balance,json=pledgeBalance" json:"pledge_balance,omitempty"`
	BorrowAmt            float64  `protobuf:"fixed64,35,opt,name=borrow_amt,json=borrowAmt" json:"borrow_amt,omitempty"`
	LendAmt              float64  `protobuf:"fixed64,36,opt,name=lend_amt,json=lendAmt" json:"lend_amt,omitempty"`
	SpecTotalFrzn        float64  `protobuf:"fixed64,37,opt,name=spec_total_frzn,json=specTotalFrzn" json:"spec_total_frzn,omitempty"`
	SpecBEntrustFrzn     float64  `protobuf:"fixed64,38,opt,name=spec_b_entrust_frzn,json=specBEntrustFrzn" json:"spec_b_entrust_frzn,omitempty"`
	SpecSEntrustFrzn     float64  `protobuf:"fixed64,39,opt,name=spec_s_entrust_frzn,json=specSEntrustFrzn" json:"spec_s_entrust_frzn,omitempty"`
	SpecBMargin          float64  `protobuf:"fixed64,40,opt,name=spec_b_margin,json=specBMargin" json:"spec_b_margin,omitempty"`
	SpecSMargin          float64  `protobuf:"fixed64,41,opt,name=spec_s_margin,json=specSMargin" json:"spec_s_margin,omitempty"`
	SpecMargin           float64  `protobuf:"fixed64,42,opt,name=spec_margin,json=specMargin" json:"spec_margin,omitempty"`
	SpecExchMargin       float64  `protobuf:"fixed64,43,opt,name=spec_exch_margin,json=specExchMargin" json:"spec_exch_margin,omitempty"`
	SpecFrznCommi        float64  `protobuf:"fixed64,44,opt,name=spec_frzn_commi,json=specFrznCommi" json:"spec_frzn_commi,omitempty"`
	SpecCommi            float64  `protobuf:"fixed64,45,opt,name=spec_commi,json=specCommi" json:"spec_commi,omitempty"`
	SpecDropProfit       float64  `protobuf:"fixed64,46,opt,name=spec_drop_profit,json=specDropProfit" json:"spec_drop_profit,omitempty"`
	SpecHoldProfit       float64  `protobuf:"fixed64,47,opt,name=spec_hold_profit,json=specHoldProfit" json:"spec_hold_profit,omitempty"`
	PledgeCurrencyIn     float64  `protobuf:"fixed64,48,opt,name=pledge_currency_in,json=pledgeCurrencyIn" json:"pledge_currency_in,omitempty"`
	PledgeCurrencyOut    float64  `protobuf:"fixed64,49,opt,name=pledge_currency_out,json=pledgeCurrencyOut" json:"pledge_currency_out,omitempty"`
	MarginDiscount       float64  `protobuf:"fixed64,50,opt,name=margin_discount,json=marginDiscount" json:"margin_discount,omitempty"`
	RoyaltyIn            float64  `protobuf:"fixed64,51,opt,name=royalty_in,json=royaltyIn" json:"royalty_in,omitempty"`
	RoyaltyOut           float64  `protobuf:"fixed64,52,opt,name=royalty_out,json=royaltyOut" json:"royalty_out,omitempty"`
	FrznRoyalty          float64  `protobuf:"fixed64,53,opt,name=frzn_royalty,json=frznRoyalty" json:"frzn_royalty,omitempty"`
	StrikeFrznMargin     float64  `protobuf:"fixed64,54,opt,name=strike_frzn_margin,json=strikeFrznMargin" json:"strike_frzn_margin,omitempty"`
	OptionCap            float64  `protobuf:"fixed64,55,opt,name=option_cap,json=optionCap" json:"option_cap,omitempty"`
	DynCapRight          float64  `protobuf:"fixed64,56,opt,name=dyn_cap_right,json=dynCapRight" json:"dyn_cap_right,omitempty"`
	RoyaltyInout         float64  `protobuf:"fixed64,57,opt,name=royalty_inout,json=royaltyInout" json:"royalty_inout,omitempty"`
	OptionDynMargin      float64  `protobuf:"fixed64,58,opt,name=option_dyn_margin,json=optionDynMargin" json:"option_dyn_margin,omitempty"`
	ExchDynMargin        float64  `protobuf:"fixed64,59,opt,name=exch_dyn_margin,json=exchDynMargin" json:"exch_dyn_margin,omitempty"`
	BFrznExchMargin      float64  `protobuf:"fixed64,60,opt,name=b_frzn_exch_margin,json=bFrznExchMargin" json:"b_frzn_exch_margin,omitempty"`
	SFrznExchMargin      float64  `protobuf:"fixed64,61,opt,name=s_frzn_exch_margin,json=sFrznExchMargin" json:"s_frzn_exch_margin,omitempty"`
	NowMargin            float64  `protobuf:"fixed64,62,opt,name=now_margin,json=nowMargin" json:"now_margin,omitempty"`
	ExchNowMargin        float64  `protobuf:"fixed64,63,opt,name=exch_now_margin,json=exchNowMargin" json:"exch_now_margin,omitempty"`
	StrikeFrznFund       float64  `protobuf:"fixed64,64,opt,name=strike_frzn_fund,json=strikeFrznFund" json:"strike_frzn_fund,omitempty"`
	StrikeFrznOtherCommi float64  `protobuf:"fixed64,65,opt,name=strike_frzn_other_commi,json=strikeFrznOtherCommi" json:"strike_frzn_other_commi,omitempty"`
	IniTotalFrzn         float64  `protobuf:"fixed64,66,opt,name=ini_total_frzn,json=iniTotalFrzn" json:"ini_total_frzn,omitempty"`
	AccountStatus        []byte   `protobuf:"bytes,67,opt,name=account_status,json=accountStatus,proto3" json:"account_status,omitempty"`
	FundStatus           []byte   `protobuf:"bytes,68,opt,name=fund_status,json=fundStatus,proto3" json:"fund_status,omitempty"`
	TradeStatus          []byte   `protobuf:"bytes,69,opt,name=trade_status,json=tradeStatus,proto3" json:"trade_status,omitempty"`
	HoldProfitOp         float64  `protobuf:"fixed64,70,opt,name=hold_profit_op,json=holdProfitOp" json:"hold_profit_op,omitempty"`
	OpDropProfit         float64  `protobuf:"fixed64,71,opt,name=op_drop_profit,json=opDropProfit" json:"op_drop_profit,omitempty"`
	YestPledgeFrznAmt    float64  `protobuf:"fixed64,72,opt,name=yest_pledge_frzn_amt,json=yestPledgeFrznAmt" json:"yest_pledge_frzn_amt,omitempty"`
	TRemainSwapLimit     float64  `protobuf:"fixed64,73,opt,name=t_remain_swap_limit,json=tRemainSwapLimit" json:"t_remain_swap_limit,omitempty"`
	T1RiskFundFrzn       float64  `protobuf:"fixed64,74,opt,name=t1_risk_fund_frzn,json=t1RiskFundFrzn" json:"t1_risk_fund_frzn,omitempty"`
	MoneyPlegeAmt        float64  `protobuf:"fixed64,75,opt,name=money_plege_amt,json=moneyPlegeAmt" json:"money_plege_amt,omitempty"`
	RspInfo              *RspInfo `protobuf:"bytes,76,opt,name=rspInfo" json:"rspInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryRealFundRsp) Reset()         { *m = QryRealFundRsp{} }
func (m *QryRealFundRsp) String() string { return proto.CompactTextString(m) }
func (*QryRealFundRsp) ProtoMessage()    {}
func (*QryRealFundRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{18}
}
func (m *QryRealFundRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryRealFundRsp.Unmarshal(m, b)
}
func (m *QryRealFundRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryRealFundRsp.Marshal(b, m, deterministic)
}
func (dst *QryRealFundRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryRealFundRsp.Merge(dst, src)
}
func (m *QryRealFundRsp) XXX_Size() int {
	return xxx_messageInfo_QryRealFundRsp.Size(m)
}
func (m *QryRealFundRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QryRealFundRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QryRealFundRsp proto.InternalMessageInfo

func (m *QryRealFundRsp) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *QryRealFundRsp) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *QryRealFundRsp) GetCustName() []byte {
	if m != nil {
		return m.CustName
	}
	return nil
}

func (m *QryRealFundRsp) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

func (m *QryRealFundRsp) GetFundAccountNo() []byte {
	if m != nil {
		return m.FundAccountNo
	}
	return nil
}

func (m *QryRealFundRsp) GetLastRemain() float64 {
	if m != nil {
		return m.LastRemain
	}
	return 0
}

func (m *QryRealFundRsp) GetAvailFund() float64 {
	if m != nil {
		return m.AvailFund
	}
	return 0
}

func (m *QryRealFundRsp) GetBEntrustFrzn() float64 {
	if m != nil {
		return m.BEntrustFrzn
	}
	return 0
}

func (m *QryRealFundRsp) GetSEntrustFrzn() float64 {
	if m != nil {
		return m.SEntrustFrzn
	}
	return 0
}

func (m *QryRealFundRsp) GetCommi() float64 {
	if m != nil {
		return m.Commi
	}
	return 0
}

func (m *QryRealFundRsp) GetBMargin() float64 {
	if m != nil {
		return m.BMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetSMargin() float64 {
	if m != nil {
		return m.SMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetDropProfit() float64 {
	if m != nil {
		return m.DropProfit
	}
	return 0
}

func (m *QryRealFundRsp) GetHoldProfit() float64 {
	if m != nil {
		return m.HoldProfit
	}
	return 0
}

func (m *QryRealFundRsp) GetWayMoney() float64 {
	if m != nil {
		return m.WayMoney
	}
	return 0
}

func (m *QryRealFundRsp) GetUndelivProfit() float64 {
	if m != nil {
		return m.UndelivProfit
	}
	return 0
}

func (m *QryRealFundRsp) GetDynRights() float64 {
	if m != nil {
		return m.DynRights
	}
	return 0
}

func (m *QryRealFundRsp) GetTodayInout() float64 {
	if m != nil {
		return m.TodayInout
	}
	return 0
}

func (m *QryRealFundRsp) GetTotalFrzn() float64 {
	if m != nil {
		return m.TotalFrzn
	}
	return 0
}

func (m *QryRealFundRsp) GetMargin() float64 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *QryRealFundRsp) GetExchMargin() float64 {
	if m != nil {
		return m.ExchMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetPledgeAmt() float64 {
	if m != nil {
		return m.PledgeAmt
	}
	return 0
}

func (m *QryRealFundRsp) GetCreditAmt() float64 {
	if m != nil {
		return m.CreditAmt
	}
	return 0
}

func (m *QryRealFundRsp) GetRiskDegree0() float64 {
	if m != nil {
		return m.RiskDegree0
	}
	return 0
}

func (m *QryRealFundRsp) GetRiskDegree1() float64 {
	if m != nil {
		return m.RiskDegree1
	}
	return 0
}

func (m *QryRealFundRsp) GetRiskDegree2() float64 {
	if m != nil {
		return m.RiskDegree2
	}
	return 0
}

func (m *QryRealFundRsp) GetRiskDegree3() float64 {
	if m != nil {
		return m.RiskDegree3
	}
	return 0
}

func (m *QryRealFundRsp) GetRiskDegree4() float64 {
	if m != nil {
		return m.RiskDegree4
	}
	return 0
}

func (m *QryRealFundRsp) GetRiskLevel() []byte {
	if m != nil {
		return m.RiskLevel
	}
	return nil
}

func (m *QryRealFundRsp) GetFrznCommi() float64 {
	if m != nil {
		return m.FrznCommi
	}
	return 0
}

func (m *QryRealFundRsp) GetCurrencyIn() float64 {
	if m != nil {
		return m.CurrencyIn
	}
	return 0
}

func (m *QryRealFundRsp) GetCurrencyOut() float64 {
	if m != nil {
		return m.CurrencyOut
	}
	return 0
}

func (m *QryRealFundRsp) GetInitialFund() float64 {
	if m != nil {
		return m.InitialFund
	}
	return 0
}

func (m *QryRealFundRsp) GetPledgeBalance() float64 {
	if m != nil {
		return m.PledgeBalance
	}
	return 0
}

func (m *QryRealFundRsp) GetBorrowAmt() float64 {
	if m != nil {
		return m.BorrowAmt
	}
	return 0
}

func (m *QryRealFundRsp) GetLendAmt() float64 {
	if m != nil {
		return m.LendAmt
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecTotalFrzn() float64 {
	if m != nil {
		return m.SpecTotalFrzn
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecBEntrustFrzn() float64 {
	if m != nil {
		return m.SpecBEntrustFrzn
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecSEntrustFrzn() float64 {
	if m != nil {
		return m.SpecSEntrustFrzn
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecBMargin() float64 {
	if m != nil {
		return m.SpecBMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecSMargin() float64 {
	if m != nil {
		return m.SpecSMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecMargin() float64 {
	if m != nil {
		return m.SpecMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecExchMargin() float64 {
	if m != nil {
		return m.SpecExchMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecFrznCommi() float64 {
	if m != nil {
		return m.SpecFrznCommi
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecCommi() float64 {
	if m != nil {
		return m.SpecCommi
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecDropProfit() float64 {
	if m != nil {
		return m.SpecDropProfit
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecHoldProfit() float64 {
	if m != nil {
		return m.SpecHoldProfit
	}
	return 0
}

func (m *QryRealFundRsp) GetPledgeCurrencyIn() float64 {
	if m != nil {
		return m.PledgeCurrencyIn
	}
	return 0
}

func (m *QryRealFundRsp) GetPledgeCurrencyOut() float64 {
	if m != nil {
		return m.PledgeCurrencyOut
	}
	return 0
}

func (m *QryRealFundRsp) GetMarginDiscount() float64 {
	if m != nil {
		return m.MarginDiscount
	}
	return 0
}

func (m *QryRealFundRsp) GetRoyaltyIn() float64 {
	if m != nil {
		return m.RoyaltyIn
	}
	return 0
}

func (m *QryRealFundRsp) GetRoyaltyOut() float64 {
	if m != nil {
		return m.RoyaltyOut
	}
	return 0
}

func (m *QryRealFundRsp) GetFrznRoyalty() float64 {
	if m != nil {
		return m.FrznRoyalty
	}
	return 0
}

func (m *QryRealFundRsp) GetStrikeFrznMargin() float64 {
	if m != nil {
		return m.StrikeFrznMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetOptionCap() float64 {
	if m != nil {
		return m.OptionCap
	}
	return 0
}

func (m *QryRealFundRsp) GetDynCapRight() float64 {
	if m != nil {
		return m.DynCapRight
	}
	return 0
}

func (m *QryRealFundRsp) GetRoyaltyInout() float64 {
	if m != nil {
		return m.RoyaltyInout
	}
	return 0
}

func (m *QryRealFundRsp) GetOptionDynMargin() float64 {
	if m != nil {
		return m.OptionDynMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetExchDynMargin() float64 {
	if m != nil {
		return m.ExchDynMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetBFrznExchMargin() float64 {
	if m != nil {
		return m.BFrznExchMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetSFrznExchMargin() float64 {
	if m != nil {
		return m.SFrznExchMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetNowMargin() float64 {
	if m != nil {
		return m.NowMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetExchNowMargin() float64 {
	if m != nil {
		return m.ExchNowMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetStrikeFrznFund() float64 {
	if m != nil {
		return m.StrikeFrznFund
	}
	return 0
}

func (m *QryRealFundRsp) GetStrikeFrznOtherCommi() float64 {
	if m != nil {
		return m.StrikeFrznOtherCommi
	}
	return 0
}

func (m *QryRealFundRsp) GetIniTotalFrzn() float64 {
	if m != nil {
		return m.IniTotalFrzn
	}
	return 0
}

func (m *QryRealFundRsp) GetAccountStatus() []byte {
	if m != nil {
		return m.AccountStatus
	}
	return nil
}

func (m *QryRealFundRsp) GetFundStatus() []byte {
	if m != nil {
		return m.FundStatus
	}
	return nil
}

func (m *QryRealFundRsp) GetTradeStatus() []byte {
	if m != nil {
		return m.TradeStatus
	}
	return nil
}

func (m *QryRealFundRsp) GetHoldProfitOp() float64 {
	if m != nil {
		return m.HoldProfitOp
	}
	return 0
}

func (m *QryRealFundRsp) GetOpDropProfit() float64 {
	if m != nil {
		return m.OpDropProfit
	}
	return 0
}

func (m *QryRealFundRsp) GetYestPledgeFrznAmt() float64 {
	if m != nil {
		return m.YestPledgeFrznAmt
	}
	return 0
}

func (m *QryRealFundRsp) GetTRemainSwapLimit() float64 {
	if m != nil {
		return m.TRemainSwapLimit
	}
	return 0
}

func (m *QryRealFundRsp) GetT1RiskFundFrzn() float64 {
	if m != nil {
		return m.T1RiskFundFrzn
	}
	return 0
}

func (m *QryRealFundRsp) GetMoneyPlegeAmt() float64 {
	if m != nil {
		return m.MoneyPlegeAmt
	}
	return 0
}

func (m *QryRealFundRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

// 通道资金推送
type TunnelRealFundRtn struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte   `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	TunnelCode           []byte   `protobuf:"bytes,4,opt,name=tunnel_code,json=tunnelCode,proto3" json:"tunnel_code,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	AvailMarginBalance   float64  `protobuf:"fixed64,6,opt,name=avail_margin_balance,json=availMarginBalance" json:"avail_margin_balance,omitempty"`
	TodayMarginBalance   float64  `protobuf:"fixed64,7,opt,name=today_margin_balance,json=todayMarginBalance" json:"today_margin_balance,omitempty"`
	OccupiedMargin       float64  `protobuf:"fixed64,8,opt,name=occupied_margin,json=occupiedMargin" json:"occupied_margin,omitempty"`
	MarginOccupiedRate   float64  `protobuf:"fixed64,9,opt,name=margin_occupied_rate,json=marginOccupiedRate" json:"margin_occupied_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TunnelRealFundRtn) Reset()         { *m = TunnelRealFundRtn{} }
func (m *TunnelRealFundRtn) String() string { return proto.CompactTextString(m) }
func (*TunnelRealFundRtn) ProtoMessage()    {}
func (*TunnelRealFundRtn) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{19}
}
func (m *TunnelRealFundRtn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelRealFundRtn.Unmarshal(m, b)
}
func (m *TunnelRealFundRtn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelRealFundRtn.Marshal(b, m, deterministic)
}
func (dst *TunnelRealFundRtn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelRealFundRtn.Merge(dst, src)
}
func (m *TunnelRealFundRtn) XXX_Size() int {
	return xxx_messageInfo_TunnelRealFundRtn.Size(m)
}
func (m *TunnelRealFundRtn) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelRealFundRtn.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelRealFundRtn proto.InternalMessageInfo

func (m *TunnelRealFundRtn) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *TunnelRealFundRtn) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *TunnelRealFundRtn) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *TunnelRealFundRtn) GetTunnelCode() []byte {
	if m != nil {
		return m.TunnelCode
	}
	return nil
}

func (m *TunnelRealFundRtn) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

func (m *TunnelRealFundRtn) GetAvailMarginBalance() float64 {
	if m != nil {
		return m.AvailMarginBalance
	}
	return 0
}

func (m *TunnelRealFundRtn) GetTodayMarginBalance() float64 {
	if m != nil {
		return m.TodayMarginBalance
	}
	return 0
}

func (m *TunnelRealFundRtn) GetOccupiedMargin() float64 {
	if m != nil {
		return m.OccupiedMargin
	}
	return 0
}

func (m *TunnelRealFundRtn) GetMarginOccupiedRate() float64 {
	if m != nil {
		return m.MarginOccupiedRate
	}
	return 0
}

// 公司持仓监控推送
type CorpHoldMonRtn struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte   `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	SmarketCode          []byte   `protobuf:"bytes,4,opt,name=smarket_code,json=smarketCode,proto3" json:"smarket_code,omitempty"`
	SecCode              []byte   `protobuf:"bytes,5,opt,name=sec_code,json=secCode,proto3" json:"sec_code,omitempty"`
	SecName              []byte   `protobuf:"bytes,6,opt,name=sec_name,json=secName,proto3" json:"sec_name,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,7,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	DirectionType        []byte   `protobuf:"bytes,8,opt,name=direction_type,json=directionType,proto3" json:"direction_type,omitempty"`
	HoldQty              uint32   `protobuf:"varint,9,opt,name=hold_qty,json=holdQty" json:"hold_qty,omitempty"`
	HoldRate             float64  `protobuf:"fixed64,10,opt,name=hold_rate,json=holdRate" json:"hold_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CorpHoldMonRtn) Reset()         { *m = CorpHoldMonRtn{} }
func (m *CorpHoldMonRtn) String() string { return proto.CompactTextString(m) }
func (*CorpHoldMonRtn) ProtoMessage()    {}
func (*CorpHoldMonRtn) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{20}
}
func (m *CorpHoldMonRtn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorpHoldMonRtn.Unmarshal(m, b)
}
func (m *CorpHoldMonRtn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorpHoldMonRtn.Marshal(b, m, deterministic)
}
func (dst *CorpHoldMonRtn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorpHoldMonRtn.Merge(dst, src)
}
func (m *CorpHoldMonRtn) XXX_Size() int {
	return xxx_messageInfo_CorpHoldMonRtn.Size(m)
}
func (m *CorpHoldMonRtn) XXX_DiscardUnknown() {
	xxx_messageInfo_CorpHoldMonRtn.DiscardUnknown(m)
}

var xxx_messageInfo_CorpHoldMonRtn proto.InternalMessageInfo

func (m *CorpHoldMonRtn) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *CorpHoldMonRtn) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *CorpHoldMonRtn) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *CorpHoldMonRtn) GetSmarketCode() []byte {
	if m != nil {
		return m.SmarketCode
	}
	return nil
}

func (m *CorpHoldMonRtn) GetSecCode() []byte {
	if m != nil {
		return m.SecCode
	}
	return nil
}

func (m *CorpHoldMonRtn) GetSecName() []byte {
	if m != nil {
		return m.SecName
	}
	return nil
}

func (m *CorpHoldMonRtn) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *CorpHoldMonRtn) GetDirectionType() []byte {
	if m != nil {
		return m.DirectionType
	}
	return nil
}

func (m *CorpHoldMonRtn) GetHoldQty() uint32 {
	if m != nil {
		return m.HoldQty
	}
	return 0
}

func (m *CorpHoldMonRtn) GetHoldRate() float64 {
	if m != nil {
		return m.HoldRate
	}
	return 0
}

// 客户持仓查询请求
type QryCustHoldReq struct {
	CustNo               []byte   `protobuf:"bytes,1,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,2,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	QueryHoldFlag        []byte   `protobuf:"bytes,3,opt,name=query_hold_flag,json=queryHoldFlag,proto3" json:"query_hold_flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryCustHoldReq) Reset()         { *m = QryCustHoldReq{} }
func (m *QryCustHoldReq) String() string { return proto.CompactTextString(m) }
func (*QryCustHoldReq) ProtoMessage()    {}
func (*QryCustHoldReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{21}
}
func (m *QryCustHoldReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryCustHoldReq.Unmarshal(m, b)
}
func (m *QryCustHoldReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryCustHoldReq.Marshal(b, m, deterministic)
}
func (dst *QryCustHoldReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryCustHoldReq.Merge(dst, src)
}
func (m *QryCustHoldReq) XXX_Size() int {
	return xxx_messageInfo_QryCustHoldReq.Size(m)
}
func (m *QryCustHoldReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryCustHoldReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryCustHoldReq proto.InternalMessageInfo

func (m *QryCustHoldReq) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *QryCustHoldReq) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *QryCustHoldReq) GetQueryHoldFlag() []byte {
	if m != nil {
		return m.QueryHoldFlag
	}
	return nil
}

// 客户持仓查询应答
type QryCustHoldRsp struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	CustNo               []byte   `protobuf:"bytes,2,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustClass            []byte   `protobuf:"bytes,3,opt,name=cust_class,json=custClass,proto3" json:"cust_class,omitempty"`
	CustName             []byte   `protobuf:"bytes,4,opt,name=cust_name,json=custName,proto3" json:"cust_name,omitempty"`
	TxDate               []byte   `protobuf:"bytes,5,opt,name=tx_date,json=txDate,proto3" json:"tx_date,omitempty"`
	ExchCode             []byte   `protobuf:"bytes,6,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode             []byte   `protobuf:"bytes,7,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,8,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	DelivDate            []byte   `protobuf:"bytes,9,opt,name=deliv_date,json=delivDate,proto3" json:"deliv_date,omitempty"`
	ShFlag               []byte   `protobuf:"bytes,10,opt,name=sh_flag,json=shFlag,proto3" json:"sh_flag,omitempty"`
	BsFlag               []byte   `protobuf:"bytes,11,opt,name=bs_flag,json=bsFlag,proto3" json:"bs_flag,omitempty"`
	HoldBSum             uint32   `protobuf:"varint,12,opt,name=hold_b_sum,json=holdBSum" json:"hold_b_sum,omitempty"`
	HoldBTodaySum        uint32   `protobuf:"varint,13,opt,name=hold_b_today_sum,json=holdBTodaySum" json:"hold_b_today_sum,omitempty"`
	HoldBAvgPrice        float64  `protobuf:"fixed64,14,opt,name=hold_b_avg_price,json=holdBAvgPrice" json:"hold_b_avg_price,omitempty"`
	HoldProfit           float64  `protobuf:"fixed64,15,opt,name=hold_profit,json=holdProfit" json:"hold_profit,omitempty"`
	HoldSAvgPrice        float64  `protobuf:"fixed64,16,opt,name=hold_s_avg_price,json=holdSAvgPrice" json:"hold_s_avg_price,omitempty"`
	Hands                uint32   `protobuf:"varint,17,opt,name=hands" json:"hands,omitempty"`
	NewPrice             float64  `protobuf:"fixed64,18,opt,name=new_price,json=newPrice" json:"new_price,omitempty"`
	HoldSSum             uint32   `protobuf:"varint,19,opt,name=hold_s_sum,json=holdSSum" json:"hold_s_sum,omitempty"`
	HoldSTodaySum        uint32   `protobuf:"varint,20,opt,name=hold_s_today_sum,json=holdSTodaySum" json:"hold_s_today_sum,omitempty"`
	BMargin              float64  `protobuf:"fixed64,21,opt,name=b_margin,json=bMargin" json:"b_margin,omitempty"`
	SMargin              float64  `protobuf:"fixed64,22,opt,name=s_margin,json=sMargin" json:"s_margin,omitempty"`
	StrategyCode         []byte   `protobuf:"bytes,23,opt,name=strategy_code,json=strategyCode,proto3" json:"strategy_code,omitempty"`
	StrategyName         []byte   `protobuf:"bytes,24,opt,name=strategy_name,json=strategyName,proto3" json:"strategy_name,omitempty"`
	CaContract           []byte   `protobuf:"bytes,25,opt,name=ca_contract,json=caContract,proto3" json:"ca_contract,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,26,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	ContractShortName    []byte   `protobuf:"bytes,27,opt,name=contract_short_name,json=contractShortName,proto3" json:"contract_short_name,omitempty"`
	TradeType            []byte   `protobuf:"bytes,28,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	Royalty              float64  `protobuf:"fixed64,29,opt,name=royalty" json:"royalty,omitempty"`
	ExchMargin           float64  `protobuf:"fixed64,30,opt,name=exch_margin,json=exchMargin" json:"exch_margin,omitempty"`
	ExpireDays           uint32   `protobuf:"varint,31,opt,name=expire_days,json=expireDays" json:"expire_days,omitempty"`
	TodayDegree          float64  `protobuf:"fixed64,32,opt,name=today_degree,json=todayDegree" json:"today_degree,omitempty"`
	OptHoldProfit        float64  `protobuf:"fixed64,33,opt,name=opt_hold_profit,json=optHoldProfit" json:"opt_hold_profit,omitempty"`
	FrznQty              uint32   `protobuf:"varint,34,opt,name=frzn_qty,json=frznQty" json:"frzn_qty,omitempty"`
	ExerFrznQty          uint32   `protobuf:"varint,35,opt,name=exer_frzn_qty,json=exerFrznQty" json:"exer_frzn_qty,omitempty"`
	ExecDate             []byte   `protobuf:"bytes,36,opt,name=exec_date,json=execDate,proto3" json:"exec_date,omitempty"`
	CpFlag               []byte   `protobuf:"bytes,37,opt,name=cp_flag,json=cpFlag,proto3" json:"cp_flag,omitempty"`
	HoldOptCap           float64  `protobuf:"fixed64,38,opt,name=hold_opt_cap,json=holdOptCap" json:"hold_opt_cap,omitempty"`
	CloseAllPosition     float64  `protobuf:"fixed64,39,opt,name=close_all_position,json=closeAllPosition" json:"close_all_position,omitempty"`
	VariName             []byte   `protobuf:"bytes,40,opt,name=vari_name,json=variName,proto3" json:"vari_name,omitempty"`
	RspInfo              *RspInfo `protobuf:"bytes,41,opt,name=rspInfo" json:"rspInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryCustHoldRsp) Reset()         { *m = QryCustHoldRsp{} }
func (m *QryCustHoldRsp) String() string { return proto.CompactTextString(m) }
func (*QryCustHoldRsp) ProtoMessage()    {}
func (*QryCustHoldRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{22}
}
func (m *QryCustHoldRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryCustHoldRsp.Unmarshal(m, b)
}
func (m *QryCustHoldRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryCustHoldRsp.Marshal(b, m, deterministic)
}
func (dst *QryCustHoldRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryCustHoldRsp.Merge(dst, src)
}
func (m *QryCustHoldRsp) XXX_Size() int {
	return xxx_messageInfo_QryCustHoldRsp.Size(m)
}
func (m *QryCustHoldRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QryCustHoldRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QryCustHoldRsp proto.InternalMessageInfo

func (m *QryCustHoldRsp) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *QryCustHoldRsp) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *QryCustHoldRsp) GetCustClass() []byte {
	if m != nil {
		return m.CustClass
	}
	return nil
}

func (m *QryCustHoldRsp) GetCustName() []byte {
	if m != nil {
		return m.CustName
	}
	return nil
}

func (m *QryCustHoldRsp) GetTxDate() []byte {
	if m != nil {
		return m.TxDate
	}
	return nil
}

func (m *QryCustHoldRsp) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *QryCustHoldRsp) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *QryCustHoldRsp) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *QryCustHoldRsp) GetDelivDate() []byte {
	if m != nil {
		return m.DelivDate
	}
	return nil
}

func (m *QryCustHoldRsp) GetShFlag() []byte {
	if m != nil {
		return m.ShFlag
	}
	return nil
}

func (m *QryCustHoldRsp) GetBsFlag() []byte {
	if m != nil {
		return m.BsFlag
	}
	return nil
}

func (m *QryCustHoldRsp) GetHoldBSum() uint32 {
	if m != nil {
		return m.HoldBSum
	}
	return 0
}

func (m *QryCustHoldRsp) GetHoldBTodaySum() uint32 {
	if m != nil {
		return m.HoldBTodaySum
	}
	return 0
}

func (m *QryCustHoldRsp) GetHoldBAvgPrice() float64 {
	if m != nil {
		return m.HoldBAvgPrice
	}
	return 0
}

func (m *QryCustHoldRsp) GetHoldProfit() float64 {
	if m != nil {
		return m.HoldProfit
	}
	return 0
}

func (m *QryCustHoldRsp) GetHoldSAvgPrice() float64 {
	if m != nil {
		return m.HoldSAvgPrice
	}
	return 0
}

func (m *QryCustHoldRsp) GetHands() uint32 {
	if m != nil {
		return m.Hands
	}
	return 0
}

func (m *QryCustHoldRsp) GetNewPrice() float64 {
	if m != nil {
		return m.NewPrice
	}
	return 0
}

func (m *QryCustHoldRsp) GetHoldSSum() uint32 {
	if m != nil {
		return m.HoldSSum
	}
	return 0
}

func (m *QryCustHoldRsp) GetHoldSTodaySum() uint32 {
	if m != nil {
		return m.HoldSTodaySum
	}
	return 0
}

func (m *QryCustHoldRsp) GetBMargin() float64 {
	if m != nil {
		return m.BMargin
	}
	return 0
}

func (m *QryCustHoldRsp) GetSMargin() float64 {
	if m != nil {
		return m.SMargin
	}
	return 0
}

func (m *QryCustHoldRsp) GetStrategyCode() []byte {
	if m != nil {
		return m.StrategyCode
	}
	return nil
}

func (m *QryCustHoldRsp) GetStrategyName() []byte {
	if m != nil {
		return m.StrategyName
	}
	return nil
}

func (m *QryCustHoldRsp) GetCaContract() []byte {
	if m != nil {
		return m.CaContract
	}
	return nil
}

func (m *QryCustHoldRsp) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

func (m *QryCustHoldRsp) GetContractShortName() []byte {
	if m != nil {
		return m.ContractShortName
	}
	return nil
}

func (m *QryCustHoldRsp) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *QryCustHoldRsp) GetRoyalty() float64 {
	if m != nil {
		return m.Royalty
	}
	return 0
}

func (m *QryCustHoldRsp) GetExchMargin() float64 {
	if m != nil {
		return m.ExchMargin
	}
	return 0
}

func (m *QryCustHoldRsp) GetExpireDays() uint32 {
	if m != nil {
		return m.ExpireDays
	}
	return 0
}

func (m *QryCustHoldRsp) GetTodayDegree() float64 {
	if m != nil {
		return m.TodayDegree
	}
	return 0
}

func (m *QryCustHoldRsp) GetOptHoldProfit() float64 {
	if m != nil {
		return m.OptHoldProfit
	}
	return 0
}

func (m *QryCustHoldRsp) GetFrznQty() uint32 {
	if m != nil {
		return m.FrznQty
	}
	return 0
}

func (m *QryCustHoldRsp) GetExerFrznQty() uint32 {
	if m != nil {
		return m.ExerFrznQty
	}
	return 0
}

func (m *QryCustHoldRsp) GetExecDate() []byte {
	if m != nil {
		return m.ExecDate
	}
	return nil
}

func (m *QryCustHoldRsp) GetCpFlag() []byte {
	if m != nil {
		return m.CpFlag
	}
	return nil
}

func (m *QryCustHoldRsp) GetHoldOptCap() float64 {
	if m != nil {
		return m.HoldOptCap
	}
	return 0
}

func (m *QryCustHoldRsp) GetCloseAllPosition() float64 {
	if m != nil {
		return m.CloseAllPosition
	}
	return 0
}

func (m *QryCustHoldRsp) GetVariName() []byte {
	if m != nil {
		return m.VariName
	}
	return nil
}

func (m *QryCustHoldRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

// 客户委托信息查询请求
type QrySingleCustEntrustReq struct {
	CustNo               []byte   `protobuf:"bytes,1,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QrySingleCustEntrustReq) Reset()         { *m = QrySingleCustEntrustReq{} }
func (m *QrySingleCustEntrustReq) String() string { return proto.CompactTextString(m) }
func (*QrySingleCustEntrustReq) ProtoMessage()    {}
func (*QrySingleCustEntrustReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{23}
}
func (m *QrySingleCustEntrustReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QrySingleCustEntrustReq.Unmarshal(m, b)
}
func (m *QrySingleCustEntrustReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QrySingleCustEntrustReq.Marshal(b, m, deterministic)
}
func (dst *QrySingleCustEntrustReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QrySingleCustEntrustReq.Merge(dst, src)
}
func (m *QrySingleCustEntrustReq) XXX_Size() int {
	return xxx_messageInfo_QrySingleCustEntrustReq.Size(m)
}
func (m *QrySingleCustEntrustReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QrySingleCustEntrustReq.DiscardUnknown(m)
}

var xxx_messageInfo_QrySingleCustEntrustReq proto.InternalMessageInfo

func (m *QrySingleCustEntrustReq) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

// 客户委托信息查询应答
type QrySingleCustEntrustRsp struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	CustNo               []byte   `protobuf:"bytes,2,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustName             []byte   `protobuf:"bytes,3,opt,name=cust_name,json=custName,proto3" json:"cust_name,omitempty"`
	EntrustNo            []byte   `protobuf:"bytes,4,opt,name=entrust_no,json=entrustNo,proto3" json:"entrust_no,omitempty"`
	EntrustOper          []byte   `protobuf:"bytes,5,opt,name=entrust_oper,json=entrustOper,proto3" json:"entrust_oper,omitempty"`
	ExchCode             []byte   `protobuf:"bytes,6,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode             []byte   `protobuf:"bytes,7,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,8,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	DelivDate            []byte   `protobuf:"bytes,9,opt,name=deliv_date,json=delivDate,proto3" json:"deliv_date,omitempty"`
	ShFlag               []byte   `protobuf:"bytes,10,opt,name=sh_flag,json=shFlag,proto3" json:"sh_flag,omitempty"`
	BsFlag               []byte   `protobuf:"bytes,11,opt,name=bs_flag,json=bsFlag,proto3" json:"bs_flag,omitempty"`
	EoFlag               []byte   `protobuf:"bytes,12,opt,name=eo_flag,json=eoFlag,proto3" json:"eo_flag,omitempty"`
	EntrustStatus        []byte   `protobuf:"bytes,13,opt,name=entrust_status,json=entrustStatus,proto3" json:"entrust_status,omitempty"`
	EntrustQty           uint32   `protobuf:"varint,14,opt,name=entrust_qty,json=entrustQty" json:"entrust_qty,omitempty"`
	EntrustPrice         float64  `protobuf:"fixed64,15,opt,name=entrust_price,json=entrustPrice" json:"entrust_price,omitempty"`
	RemainQty            uint32   `protobuf:"varint,16,opt,name=remain_qty,json=remainQty" json:"remain_qty,omitempty"`
	DonePrice            float64  `protobuf:"fixed64,17,opt,name=done_price,json=donePrice" json:"done_price,omitempty"`
	DoneQty              uint32   `protobuf:"varint,18,opt,name=done_qty,json=doneQty" json:"done_qty,omitempty"`
	SysNo                []byte   `protobuf:"bytes,19,opt,name=sys_no,json=sysNo,proto3" json:"sys_no,omitempty"`
	EntrustTime          []byte   `protobuf:"bytes,20,opt,name=entrust_time,json=entrustTime,proto3" json:"entrust_time,omitempty"`
	OrderTime            []byte   `protobuf:"bytes,21,opt,name=order_time,json=orderTime,proto3" json:"order_time,omitempty"`
	TxNo                 []byte   `protobuf:"bytes,22,opt,name=tx_no,json=txNo,proto3" json:"tx_no,omitempty"`
	EntrustWay           []byte   `protobuf:"bytes,23,opt,name=entrust_way,json=entrustWay,proto3" json:"entrust_way,omitempty"`
	CancelOper           []byte   `protobuf:"bytes,24,opt,name=cancel_oper,json=cancelOper,proto3" json:"cancel_oper,omitempty"`
	CancelTime           []byte   `protobuf:"bytes,25,opt,name=cancel_time,json=cancelTime,proto3" json:"cancel_time,omitempty"`
	EntrustType          []byte   `protobuf:"bytes,26,opt,name=entrust_type,json=entrustType,proto3" json:"entrust_type,omitempty"`
	TunnelCode           []byte   `protobuf:"bytes,27,opt,name=tunnel_code,json=tunnelCode,proto3" json:"tunnel_code,omitempty"`
	Remark               []byte   `protobuf:"bytes,28,opt,name=remark,proto3" json:"remark,omitempty"`
	UpdateBatch          uint32   `protobuf:"varint,29,opt,name=update_batch,json=updateBatch" json:"update_batch,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,30,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	ForceOffset          []byte   `protobuf:"bytes,31,opt,name=force_offset,json=forceOffset,proto3" json:"force_offset,omitempty"`
	CmdNo                uint32   `protobuf:"varint,32,opt,name=cmd_no,json=cmdNo" json:"cmd_no,omitempty"`
	EntrustSeatNo        []byte   `protobuf:"bytes,33,opt,name=entrust_seat_no,json=entrustSeatNo,proto3" json:"entrust_seat_no,omitempty"`
	OtherSystem          []byte   `protobuf:"bytes,34,opt,name=other_system,json=otherSystem,proto3" json:"other_system,omitempty"`
	StrategyCode         []byte   `protobuf:"bytes,35,opt,name=strategy_code,json=strategyCode,proto3" json:"strategy_code,omitempty"`
	OrderType            []byte   `protobuf:"bytes,36,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	DoneAttribute        []byte   `protobuf:"bytes,37,opt,name=done_attribute,json=doneAttribute,proto3" json:"done_attribute,omitempty"`
	SlpPrice             float64  `protobuf:"fixed64,38,opt,name=slp_price,json=slpPrice" json:"slp_price,omitempty"`
	CombinationType      []byte   `protobuf:"bytes,39,opt,name=combination_type,json=combinationType,proto3" json:"combination_type,omitempty"`
	TriggerTime          []byte   `protobuf:"bytes,40,opt,name=trigger_time,json=triggerTime,proto3" json:"trigger_time,omitempty"`
	EnOperType           []byte   `protobuf:"bytes,41,opt,name=en_oper_type,json=enOperType,proto3" json:"en_oper_type,omitempty"`
	PrivateInfo          []byte   `protobuf:"bytes,42,opt,name=private_info,json=privateInfo,proto3" json:"private_info,omitempty"`
	PrivateFlag          []byte   `protobuf:"bytes,43,opt,name=private_flag,json=privateFlag,proto3" json:"private_flag,omitempty"`
	PrivateSerialNo      []byte   `protobuf:"bytes,44,opt,name=private_serial_no,json=privateSerialNo,proto3" json:"private_serial_no,omitempty"`
	SessionId            uint32   `protobuf:"varint,45,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	CancelSessionId      uint32   `protobuf:"varint,46,opt,name=cancel_session_id,json=cancelSessionId" json:"cancel_session_id,omitempty"`
	FrznMargin           float64  `protobuf:"fixed64,47,opt,name=frzn_margin,json=frznMargin" json:"frzn_margin,omitempty"`
	FrznCommi            float64  `protobuf:"fixed64,48,opt,name=frzn_commi,json=frznCommi" json:"frzn_commi,omitempty"`
	MinDoneQty           uint32   `protobuf:"varint,49,opt,name=min_done_qty,json=minDoneQty" json:"min_done_qty,omitempty"`
	TradeType            []byte   `protobuf:"bytes,50,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	ContractShortName    []byte   `protobuf:"bytes,51,opt,name=contract_short_name,json=contractShortName,proto3" json:"contract_short_name,omitempty"`
	FrznRoyalty          float64  `protobuf:"fixed64,52,opt,name=frzn_royalty,json=frznRoyalty" json:"frzn_royalty,omitempty"`
	RspInfo              *RspInfo `protobuf:"bytes,53,opt,name=rspInfo" json:"rspInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QrySingleCustEntrustRsp) Reset()         { *m = QrySingleCustEntrustRsp{} }
func (m *QrySingleCustEntrustRsp) String() string { return proto.CompactTextString(m) }
func (*QrySingleCustEntrustRsp) ProtoMessage()    {}
func (*QrySingleCustEntrustRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{24}
}
func (m *QrySingleCustEntrustRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QrySingleCustEntrustRsp.Unmarshal(m, b)
}
func (m *QrySingleCustEntrustRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QrySingleCustEntrustRsp.Marshal(b, m, deterministic)
}
func (dst *QrySingleCustEntrustRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QrySingleCustEntrustRsp.Merge(dst, src)
}
func (m *QrySingleCustEntrustRsp) XXX_Size() int {
	return xxx_messageInfo_QrySingleCustEntrustRsp.Size(m)
}
func (m *QrySingleCustEntrustRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QrySingleCustEntrustRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QrySingleCustEntrustRsp proto.InternalMessageInfo

func (m *QrySingleCustEntrustRsp) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetCustName() []byte {
	if m != nil {
		return m.CustName
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEntrustNo() []byte {
	if m != nil {
		return m.EntrustNo
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEntrustOper() []byte {
	if m != nil {
		return m.EntrustOper
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetDelivDate() []byte {
	if m != nil {
		return m.DelivDate
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetShFlag() []byte {
	if m != nil {
		return m.ShFlag
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetBsFlag() []byte {
	if m != nil {
		return m.BsFlag
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEoFlag() []byte {
	if m != nil {
		return m.EoFlag
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEntrustStatus() []byte {
	if m != nil {
		return m.EntrustStatus
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEntrustQty() uint32 {
	if m != nil {
		return m.EntrustQty
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetEntrustPrice() float64 {
	if m != nil {
		return m.EntrustPrice
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetRemainQty() uint32 {
	if m != nil {
		return m.RemainQty
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetDonePrice() float64 {
	if m != nil {
		return m.DonePrice
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetDoneQty() uint32 {
	if m != nil {
		return m.DoneQty
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetSysNo() []byte {
	if m != nil {
		return m.SysNo
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEntrustTime() []byte {
	if m != nil {
		return m.EntrustTime
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetOrderTime() []byte {
	if m != nil {
		return m.OrderTime
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetTxNo() []byte {
	if m != nil {
		return m.TxNo
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEntrustWay() []byte {
	if m != nil {
		return m.EntrustWay
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetCancelOper() []byte {
	if m != nil {
		return m.CancelOper
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetCancelTime() []byte {
	if m != nil {
		return m.CancelTime
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEntrustType() []byte {
	if m != nil {
		return m.EntrustType
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetTunnelCode() []byte {
	if m != nil {
		return m.TunnelCode
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetRemark() []byte {
	if m != nil {
		return m.Remark
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetUpdateBatch() uint32 {
	if m != nil {
		return m.UpdateBatch
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetForceOffset() []byte {
	if m != nil {
		return m.ForceOffset
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetCmdNo() uint32 {
	if m != nil {
		return m.CmdNo
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetEntrustSeatNo() []byte {
	if m != nil {
		return m.EntrustSeatNo
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetOtherSystem() []byte {
	if m != nil {
		return m.OtherSystem
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetStrategyCode() []byte {
	if m != nil {
		return m.StrategyCode
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetOrderType() []byte {
	if m != nil {
		return m.OrderType
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetDoneAttribute() []byte {
	if m != nil {
		return m.DoneAttribute
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetSlpPrice() float64 {
	if m != nil {
		return m.SlpPrice
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetCombinationType() []byte {
	if m != nil {
		return m.CombinationType
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetTriggerTime() []byte {
	if m != nil {
		return m.TriggerTime
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEnOperType() []byte {
	if m != nil {
		return m.EnOperType
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetPrivateInfo() []byte {
	if m != nil {
		return m.PrivateInfo
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetPrivateFlag() []byte {
	if m != nil {
		return m.PrivateFlag
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetPrivateSerialNo() []byte {
	if m != nil {
		return m.PrivateSerialNo
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetSessionId() uint32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetCancelSessionId() uint32 {
	if m != nil {
		return m.CancelSessionId
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetFrznMargin() float64 {
	if m != nil {
		return m.FrznMargin
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetFrznCommi() float64 {
	if m != nil {
		return m.FrznCommi
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetMinDoneQty() uint32 {
	if m != nil {
		return m.MinDoneQty
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetContractShortName() []byte {
	if m != nil {
		return m.ContractShortName
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetFrznRoyalty() float64 {
	if m != nil {
		return m.FrznRoyalty
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

// 交易所对应品种查询请求
type QryExchVariReq struct {
	ExchCode             []byte   `protobuf:"bytes,1,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	TradeType            []byte   `protobuf:"bytes,2,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryExchVariReq) Reset()         { *m = QryExchVariReq{} }
func (m *QryExchVariReq) String() string { return proto.CompactTextString(m) }
func (*QryExchVariReq) ProtoMessage()    {}
func (*QryExchVariReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{25}
}
func (m *QryExchVariReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryExchVariReq.Unmarshal(m, b)
}
func (m *QryExchVariReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryExchVariReq.Marshal(b, m, deterministic)
}
func (dst *QryExchVariReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryExchVariReq.Merge(dst, src)
}
func (m *QryExchVariReq) XXX_Size() int {
	return xxx_messageInfo_QryExchVariReq.Size(m)
}
func (m *QryExchVariReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryExchVariReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryExchVariReq proto.InternalMessageInfo

func (m *QryExchVariReq) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *QryExchVariReq) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

// 交易所对应品种查询应答
type QryExchVariRsp struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ExchCode             []byte   `protobuf:"bytes,2,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode             []byte   `protobuf:"bytes,3,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	VariName             []byte   `protobuf:"bytes,4,opt,name=vari_name,json=variName,proto3" json:"vari_name,omitempty"`
	TradeType            []byte   `protobuf:"bytes,5,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	RspInfo              *RspInfo `protobuf:"bytes,6,opt,name=rspInfo" json:"rspInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryExchVariRsp) Reset()         { *m = QryExchVariRsp{} }
func (m *QryExchVariRsp) String() string { return proto.CompactTextString(m) }
func (*QryExchVariRsp) ProtoMessage()    {}
func (*QryExchVariRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{26}
}
func (m *QryExchVariRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryExchVariRsp.Unmarshal(m, b)
}
func (m *QryExchVariRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryExchVariRsp.Marshal(b, m, deterministic)
}
func (dst *QryExchVariRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryExchVariRsp.Merge(dst, src)
}
func (m *QryExchVariRsp) XXX_Size() int {
	return xxx_messageInfo_QryExchVariRsp.Size(m)
}
func (m *QryExchVariRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QryExchVariRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QryExchVariRsp proto.InternalMessageInfo

func (m *QryExchVariRsp) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *QryExchVariRsp) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *QryExchVariRsp) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *QryExchVariRsp) GetVariName() []byte {
	if m != nil {
		return m.VariName
	}
	return nil
}

func (m *QryExchVariRsp) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *QryExchVariRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

// 合约查询请求
type QryContractReq struct {
	ExchCode             []byte   `protobuf:"bytes,1,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	TradeType            []byte   `protobuf:"bytes,2,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,3,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	VariCode             []byte   `protobuf:"bytes,4,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryContractReq) Reset()         { *m = QryContractReq{} }
func (m *QryContractReq) String() string { return proto.CompactTextString(m) }
func (*QryContractReq) ProtoMessage()    {}
func (*QryContractReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{27}
}
func (m *QryContractReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryContractReq.Unmarshal(m, b)
}
func (m *QryContractReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryContractReq.Marshal(b, m, deterministic)
}
func (dst *QryContractReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryContractReq.Merge(dst, src)
}
func (m *QryContractReq) XXX_Size() int {
	return xxx_messageInfo_QryContractReq.Size(m)
}
func (m *QryContractReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryContractReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryContractReq proto.InternalMessageInfo

func (m *QryContractReq) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *QryContractReq) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *QryContractReq) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *QryContractReq) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

// 合约查询应答
type QryContractRsp struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ExchCode             []byte   `protobuf:"bytes,2,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	ExchName             []byte   `protobuf:"bytes,3,opt,name=exch_name,json=exchName,proto3" json:"exch_name,omitempty"`
	VariCode             []byte   `protobuf:"bytes,4,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	VariName             []byte   `protobuf:"bytes,5,opt,name=vari_name,json=variName,proto3" json:"vari_name,omitempty"`
	DelivDate            []byte   `protobuf:"bytes,6,opt,name=deliv_date,json=delivDate,proto3" json:"deliv_date,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,7,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	TradeType            []byte   `protobuf:"bytes,8,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	Hands                uint32   `protobuf:"varint,9,opt,name=hands" json:"hands,omitempty"`
	TradeRule            []byte   `protobuf:"bytes,10,opt,name=trade_rule,json=tradeRule,proto3" json:"trade_rule,omitempty"`
	MinHand              uint32   `protobuf:"varint,11,opt,name=min_hand,json=minHand" json:"min_hand,omitempty"`
	MaxHand              uint32   `protobuf:"varint,12,opt,name=max_hand,json=maxHand" json:"max_hand,omitempty"`
	MarketMaxHand        uint32   `protobuf:"varint,13,opt,name=market_max_hand,json=marketMaxHand" json:"market_max_hand,omitempty"`
	MaxHold              uint32   `protobuf:"varint,14,opt,name=max_hold,json=maxHold" json:"max_hold,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,15,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	PriceUnit            float64  `protobuf:"fixed64,16,opt,name=price_unit,json=priceUnit" json:"price_unit,omitempty"`
	ContractStatus       []byte   `protobuf:"bytes,17,opt,name=contract_status,json=contractStatus,proto3" json:"contract_status,omitempty"`
	ContractShortName    []byte   `protobuf:"bytes,18,opt,name=contract_short_name,json=contractShortName,proto3" json:"contract_short_name,omitempty"`
	FundAlgorithm        []byte   `protobuf:"bytes,19,opt,name=fund_algorithm,json=fundAlgorithm,proto3" json:"fund_algorithm,omitempty"`
	IfMarginDis          []byte   `protobuf:"bytes,20,opt,name=if_margin_dis,json=ifMarginDis,proto3" json:"if_margin_dis,omitempty"`
	ListingPrice         float64  `protobuf:"fixed64,21,opt,name=listing_price,json=listingPrice" json:"listing_price,omitempty"`
	StrikePrice          float64  `protobuf:"fixed64,22,opt,name=strike_price,json=strikePrice" json:"strike_price,omitempty"`
	OptionType           []byte   `protobuf:"bytes,23,opt,name=option_type,json=optionType,proto3" json:"option_type,omitempty"`
	CpFlag               []byte   `protobuf:"bytes,24,opt,name=cp_flag,json=cpFlag,proto3" json:"cp_flag,omitempty"`
	LastTradeDate        []byte   `protobuf:"bytes,25,opt,name=last_trade_date,json=lastTradeDate,proto3" json:"last_trade_date,omitempty"`
	TradeCode            []byte   `protobuf:"bytes,26,opt,name=trade_code,json=tradeCode,proto3" json:"trade_code,omitempty"`
	ContractType         []byte   `protobuf:"bytes,27,opt,name=contract_type,json=contractType,proto3" json:"contract_type,omitempty"`
	YesClosePrice        float64  `protobuf:"fixed64,28,opt,name=yes_close_price,json=yesClosePrice" json:"yes_close_price,omitempty"`
	YesSettlePrice       float64  `protobuf:"fixed64,29,opt,name=yes_settle_price,json=yesSettlePrice" json:"yes_settle_price,omitempty"`
	ContractUnit         uint32   `protobuf:"varint,30,opt,name=contract_unit,json=contractUnit" json:"contract_unit,omitempty"`
	VariType             []byte   `protobuf:"bytes,31,opt,name=vari_type,json=variType,proto3" json:"vari_type,omitempty"`
	ExecDate             []byte   `protobuf:"bytes,32,opt,name=exec_date,json=execDate,proto3" json:"exec_date,omitempty"`
	ExpireDate           []byte   `protobuf:"bytes,33,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	UnoverPisitionNum    uint32   `protobuf:"varint,34,opt,name=unover_pisition_num,json=unoverPisitionNum" json:"unover_pisition_num,omitempty"`
	LastVariPrice        float64  `protobuf:"fixed64,35,opt,name=last_vari_price,json=lastVariPrice" json:"last_vari_price,omitempty"`
	MarginUnit           float64  `protobuf:"fixed64,36,opt,name=margin_unit,json=marginUnit" json:"margin_unit,omitempty"`
	MarginRatio1         uint32   `protobuf:"varint,44,opt,name=margin_ratio1,json=marginRatio1" json:"margin_ratio1,omitempty"`
	MarginRatio2         uint32   `protobuf:"varint,45,opt,name=margin_ratio2,json=marginRatio2" json:"margin_ratio2,omitempty"`
	MarketMinHands       uint32   `protobuf:"varint,46,opt,name=market_min_hands,json=marketMinHands" json:"market_min_hands,omitempty"`
	ListingDate          []byte   `protobuf:"bytes,47,opt,name=listing_date,json=listingDate,proto3" json:"listing_date,omitempty"`
	ExpireDays           uint32   `protobuf:"varint,48,opt,name=expire_days,json=expireDays" json:"expire_days,omitempty"`
	NewPrice             float64  `protobuf:"fixed64,49,opt,name=new_price,json=newPrice" json:"new_price,omitempty"`
	TodaySettlePrice     float64  `protobuf:"fixed64,50,opt,name=today_settle_price,json=todaySettlePrice" json:"today_settle_price,omitempty"`
	LastPrice            float64  `protobuf:"fixed64,51,opt,name=last_price,json=lastPrice" json:"last_price,omitempty"`
	VolatilityRate       float64  `protobuf:"fixed64,52,opt,name=volatility_rate,json=volatilityRate" json:"volatility_rate,omitempty"`
	RspInfo              *RspInfo `protobuf:"bytes,53,opt,name=rspInfo" json:"rspInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryContractRsp) Reset()         { *m = QryContractRsp{} }
func (m *QryContractRsp) String() string { return proto.CompactTextString(m) }
func (*QryContractRsp) ProtoMessage()    {}
func (*QryContractRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{28}
}
func (m *QryContractRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryContractRsp.Unmarshal(m, b)
}
func (m *QryContractRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryContractRsp.Marshal(b, m, deterministic)
}
func (dst *QryContractRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryContractRsp.Merge(dst, src)
}
func (m *QryContractRsp) XXX_Size() int {
	return xxx_messageInfo_QryContractRsp.Size(m)
}
func (m *QryContractRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QryContractRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QryContractRsp proto.InternalMessageInfo

func (m *QryContractRsp) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *QryContractRsp) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *QryContractRsp) GetExchName() []byte {
	if m != nil {
		return m.ExchName
	}
	return nil
}

func (m *QryContractRsp) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *QryContractRsp) GetVariName() []byte {
	if m != nil {
		return m.VariName
	}
	return nil
}

func (m *QryContractRsp) GetDelivDate() []byte {
	if m != nil {
		return m.DelivDate
	}
	return nil
}

func (m *QryContractRsp) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *QryContractRsp) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *QryContractRsp) GetHands() uint32 {
	if m != nil {
		return m.Hands
	}
	return 0
}

func (m *QryContractRsp) GetTradeRule() []byte {
	if m != nil {
		return m.TradeRule
	}
	return nil
}

func (m *QryContractRsp) GetMinHand() uint32 {
	if m != nil {
		return m.MinHand
	}
	return 0
}

func (m *QryContractRsp) GetMaxHand() uint32 {
	if m != nil {
		return m.MaxHand
	}
	return 0
}

func (m *QryContractRsp) GetMarketMaxHand() uint32 {
	if m != nil {
		return m.MarketMaxHand
	}
	return 0
}

func (m *QryContractRsp) GetMaxHold() uint32 {
	if m != nil {
		return m.MaxHold
	}
	return 0
}

func (m *QryContractRsp) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

func (m *QryContractRsp) GetPriceUnit() float64 {
	if m != nil {
		return m.PriceUnit
	}
	return 0
}

func (m *QryContractRsp) GetContractStatus() []byte {
	if m != nil {
		return m.ContractStatus
	}
	return nil
}

func (m *QryContractRsp) GetContractShortName() []byte {
	if m != nil {
		return m.ContractShortName
	}
	return nil
}

func (m *QryContractRsp) GetFundAlgorithm() []byte {
	if m != nil {
		return m.FundAlgorithm
	}
	return nil
}

func (m *QryContractRsp) GetIfMarginDis() []byte {
	if m != nil {
		return m.IfMarginDis
	}
	return nil
}

func (m *QryContractRsp) GetListingPrice() float64 {
	if m != nil {
		return m.ListingPrice
	}
	return 0
}

func (m *QryContractRsp) GetStrikePrice() float64 {
	if m != nil {
		return m.StrikePrice
	}
	return 0
}

func (m *QryContractRsp) GetOptionType() []byte {
	if m != nil {
		return m.OptionType
	}
	return nil
}

func (m *QryContractRsp) GetCpFlag() []byte {
	if m != nil {
		return m.CpFlag
	}
	return nil
}

func (m *QryContractRsp) GetLastTradeDate() []byte {
	if m != nil {
		return m.LastTradeDate
	}
	return nil
}

func (m *QryContractRsp) GetTradeCode() []byte {
	if m != nil {
		return m.TradeCode
	}
	return nil
}

func (m *QryContractRsp) GetContractType() []byte {
	if m != nil {
		return m.ContractType
	}
	return nil
}

func (m *QryContractRsp) GetYesClosePrice() float64 {
	if m != nil {
		return m.YesClosePrice
	}
	return 0
}

func (m *QryContractRsp) GetYesSettlePrice() float64 {
	if m != nil {
		return m.YesSettlePrice
	}
	return 0
}

func (m *QryContractRsp) GetContractUnit() uint32 {
	if m != nil {
		return m.ContractUnit
	}
	return 0
}

func (m *QryContractRsp) GetVariType() []byte {
	if m != nil {
		return m.VariType
	}
	return nil
}

func (m *QryContractRsp) GetExecDate() []byte {
	if m != nil {
		return m.ExecDate
	}
	return nil
}

func (m *QryContractRsp) GetExpireDate() []byte {
	if m != nil {
		return m.ExpireDate
	}
	return nil
}

func (m *QryContractRsp) GetUnoverPisitionNum() uint32 {
	if m != nil {
		return m.UnoverPisitionNum
	}
	return 0
}

func (m *QryContractRsp) GetLastVariPrice() float64 {
	if m != nil {
		return m.LastVariPrice
	}
	return 0
}

func (m *QryContractRsp) GetMarginUnit() float64 {
	if m != nil {
		return m.MarginUnit
	}
	return 0
}

func (m *QryContractRsp) GetMarginRatio1() uint32 {
	if m != nil {
		return m.MarginRatio1
	}
	return 0
}

func (m *QryContractRsp) GetMarginRatio2() uint32 {
	if m != nil {
		return m.MarginRatio2
	}
	return 0
}

func (m *QryContractRsp) GetMarketMinHands() uint32 {
	if m != nil {
		return m.MarketMinHands
	}
	return 0
}

func (m *QryContractRsp) GetListingDate() []byte {
	if m != nil {
		return m.ListingDate
	}
	return nil
}

func (m *QryContractRsp) GetExpireDays() uint32 {
	if m != nil {
		return m.ExpireDays
	}
	return 0
}

func (m *QryContractRsp) GetNewPrice() float64 {
	if m != nil {
		return m.NewPrice
	}
	return 0
}

func (m *QryContractRsp) GetTodaySettlePrice() float64 {
	if m != nil {
		return m.TodaySettlePrice
	}
	return 0
}

func (m *QryContractRsp) GetLastPrice() float64 {
	if m != nil {
		return m.LastPrice
	}
	return 0
}

func (m *QryContractRsp) GetVolatilityRate() float64 {
	if m != nil {
		return m.VolatilityRate
	}
	return 0
}

func (m *QryContractRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

// 合约范围项
type ContrRangeField struct {
	Name                 []byte   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type                 []byte   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContrRangeField) Reset()         { *m = ContrRangeField{} }
func (m *ContrRangeField) String() string { return proto.CompactTextString(m) }
func (*ContrRangeField) ProtoMessage()    {}
func (*ContrRangeField) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{29}
}
func (m *ContrRangeField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContrRangeField.Unmarshal(m, b)
}
func (m *ContrRangeField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContrRangeField.Marshal(b, m, deterministic)
}
func (dst *ContrRangeField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContrRangeField.Merge(dst, src)
}
func (m *ContrRangeField) XXX_Size() int {
	return xxx_messageInfo_ContrRangeField.Size(m)
}
func (m *ContrRangeField) XXX_DiscardUnknown() {
	xxx_messageInfo_ContrRangeField.DiscardUnknown(m)
}

var xxx_messageInfo_ContrRangeField proto.InternalMessageInfo

func (m *ContrRangeField) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ContrRangeField) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ContrRangeField) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// 行情监控设置
type QuoteMonitorSetting struct {
	PackFlag             uint32                        `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32                        `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte                        `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	TradeType            []byte                        `protobuf:"bytes,4,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	FilterFields         []*SettingValueField          `protobuf:"bytes,5,rep,name=filter_fields,json=filterFields" json:"filter_fields,omitempty"`
	RangeFields          []*ContrRangeField            `protobuf:"bytes,6,rep,name=range_fields,json=rangeFields" json:"range_fields,omitempty"`
	QuoteType            QuoteMonitorSetting_QuoteType `protobuf:"varint,7,opt,name=quote_type,json=quoteType,enum=riskmonitorserver.QuoteMonitorSetting_QuoteType" json:"quote_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *QuoteMonitorSetting) Reset()         { *m = QuoteMonitorSetting{} }
func (m *QuoteMonitorSetting) String() string { return proto.CompactTextString(m) }
func (*QuoteMonitorSetting) ProtoMessage()    {}
func (*QuoteMonitorSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{30}
}
func (m *QuoteMonitorSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuoteMonitorSetting.Unmarshal(m, b)
}
func (m *QuoteMonitorSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuoteMonitorSetting.Marshal(b, m, deterministic)
}
func (dst *QuoteMonitorSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteMonitorSetting.Merge(dst, src)
}
func (m *QuoteMonitorSetting) XXX_Size() int {
	return xxx_messageInfo_QuoteMonitorSetting.Size(m)
}
func (m *QuoteMonitorSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteMonitorSetting.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteMonitorSetting proto.InternalMessageInfo

func (m *QuoteMonitorSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *QuoteMonitorSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *QuoteMonitorSetting) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *QuoteMonitorSetting) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *QuoteMonitorSetting) GetFilterFields() []*SettingValueField {
	if m != nil {
		return m.FilterFields
	}
	return nil
}

func (m *QuoteMonitorSetting) GetRangeFields() []*ContrRangeField {
	if m != nil {
		return m.RangeFields
	}
	return nil
}

func (m *QuoteMonitorSetting) GetQuoteType() QuoteMonitorSetting_QuoteType {
	if m != nil {
		return m.QuoteType
	}
	return QuoteMonitorSetting_RiskQuote
}

// 风险合约级别设置
type RiskContrLevelSetting struct {
	PackFlag             uint32    `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32    `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	SettingNo            []byte    `protobuf:"bytes,3,opt,name=setting_no,json=settingNo,proto3" json:"setting_no,omitempty"`
	SmarketCode          []byte    `protobuf:"bytes,4,opt,name=smarket_code,json=smarketCode,proto3" json:"smarket_code,omitempty"`
	SecCode              []byte    `protobuf:"bytes,5,opt,name=sec_code,json=secCode,proto3" json:"sec_code,omitempty"`
	TradeType            []byte    `protobuf:"bytes,6,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	LevelValues          []float64 `protobuf:"fixed64,7,rep,packed,name=level_values,json=levelValues" json:"level_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RiskContrLevelSetting) Reset()         { *m = RiskContrLevelSetting{} }
func (m *RiskContrLevelSetting) String() string { return proto.CompactTextString(m) }
func (*RiskContrLevelSetting) ProtoMessage()    {}
func (*RiskContrLevelSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{31}
}
func (m *RiskContrLevelSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RiskContrLevelSetting.Unmarshal(m, b)
}
func (m *RiskContrLevelSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RiskContrLevelSetting.Marshal(b, m, deterministic)
}
func (dst *RiskContrLevelSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RiskContrLevelSetting.Merge(dst, src)
}
func (m *RiskContrLevelSetting) XXX_Size() int {
	return xxx_messageInfo_RiskContrLevelSetting.Size(m)
}
func (m *RiskContrLevelSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_RiskContrLevelSetting.DiscardUnknown(m)
}

var xxx_messageInfo_RiskContrLevelSetting proto.InternalMessageInfo

func (m *RiskContrLevelSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *RiskContrLevelSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *RiskContrLevelSetting) GetSettingNo() []byte {
	if m != nil {
		return m.SettingNo
	}
	return nil
}

func (m *RiskContrLevelSetting) GetSmarketCode() []byte {
	if m != nil {
		return m.SmarketCode
	}
	return nil
}

func (m *RiskContrLevelSetting) GetSecCode() []byte {
	if m != nil {
		return m.SecCode
	}
	return nil
}

func (m *RiskContrLevelSetting) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *RiskContrLevelSetting) GetLevelValues() []float64 {
	if m != nil {
		return m.LevelValues
	}
	return nil
}

// 合约组配置
type ContrGroupSetting struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	ContrGroupNo         []byte   `protobuf:"bytes,3,opt,name=contr_group_no,json=contrGroupNo,proto3" json:"contr_group_no,omitempty"`
	ContrGroupName       []byte   `protobuf:"bytes,4,opt,name=contr_group_name,json=contrGroupName,proto3" json:"contr_group_name,omitempty"`
	Contrs               [][]byte `protobuf:"bytes,5,rep,name=contrs,proto3" json:"contrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContrGroupSetting) Reset()         { *m = ContrGroupSetting{} }
func (m *ContrGroupSetting) String() string { return proto.CompactTextString(m) }
func (*ContrGroupSetting) ProtoMessage()    {}
func (*ContrGroupSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{32}
}
func (m *ContrGroupSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContrGroupSetting.Unmarshal(m, b)
}
func (m *ContrGroupSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContrGroupSetting.Marshal(b, m, deterministic)
}
func (dst *ContrGroupSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContrGroupSetting.Merge(dst, src)
}
func (m *ContrGroupSetting) XXX_Size() int {
	return xxx_messageInfo_ContrGroupSetting.Size(m)
}
func (m *ContrGroupSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ContrGroupSetting.DiscardUnknown(m)
}

var xxx_messageInfo_ContrGroupSetting proto.InternalMessageInfo

func (m *ContrGroupSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *ContrGroupSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *ContrGroupSetting) GetContrGroupNo() []byte {
	if m != nil {
		return m.ContrGroupNo
	}
	return nil
}

func (m *ContrGroupSetting) GetContrGroupName() []byte {
	if m != nil {
		return m.ContrGroupName
	}
	return nil
}

func (m *ContrGroupSetting) GetContrs() [][]byte {
	if m != nil {
		return m.Contrs
	}
	return nil
}

// 商品组监控设置
type ProductGroupMonitorSetting struct {
	PackFlag             uint32               `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32               `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte               `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	ContrGroupNos        [][]byte             `protobuf:"bytes,4,rep,name=contr_group_nos,json=contrGroupNos,proto3" json:"contr_group_nos,omitempty"`
	FilterFields         []*SettingValueField `protobuf:"bytes,5,rep,name=filter_fields,json=filterFields" json:"filter_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ProductGroupMonitorSetting) Reset()         { *m = ProductGroupMonitorSetting{} }
func (m *ProductGroupMonitorSetting) String() string { return proto.CompactTextString(m) }
func (*ProductGroupMonitorSetting) ProtoMessage()    {}
func (*ProductGroupMonitorSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{33}
}
func (m *ProductGroupMonitorSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductGroupMonitorSetting.Unmarshal(m, b)
}
func (m *ProductGroupMonitorSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductGroupMonitorSetting.Marshal(b, m, deterministic)
}
func (dst *ProductGroupMonitorSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductGroupMonitorSetting.Merge(dst, src)
}
func (m *ProductGroupMonitorSetting) XXX_Size() int {
	return xxx_messageInfo_ProductGroupMonitorSetting.Size(m)
}
func (m *ProductGroupMonitorSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductGroupMonitorSetting.DiscardUnknown(m)
}

var xxx_messageInfo_ProductGroupMonitorSetting proto.InternalMessageInfo

func (m *ProductGroupMonitorSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *ProductGroupMonitorSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *ProductGroupMonitorSetting) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *ProductGroupMonitorSetting) GetContrGroupNos() [][]byte {
	if m != nil {
		return m.ContrGroupNos
	}
	return nil
}

func (m *ProductGroupMonitorSetting) GetFilterFields() []*SettingValueField {
	if m != nil {
		return m.FilterFields
	}
	return nil
}

// 客户风险监控设置
type CustRiskMonitorSetting struct {
	PackFlag             uint32               `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32               `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte               `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	Custs                [][]byte             `protobuf:"bytes,5,rep,name=custs,proto3" json:"custs,omitempty"`
	FilterFields         []*SettingValueField `protobuf:"bytes,4,rep,name=filter_fields,json=filterFields" json:"filter_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CustRiskMonitorSetting) Reset()         { *m = CustRiskMonitorSetting{} }
func (m *CustRiskMonitorSetting) String() string { return proto.CompactTextString(m) }
func (*CustRiskMonitorSetting) ProtoMessage()    {}
func (*CustRiskMonitorSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{34}
}
func (m *CustRiskMonitorSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustRiskMonitorSetting.Unmarshal(m, b)
}
func (m *CustRiskMonitorSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustRiskMonitorSetting.Marshal(b, m, deterministic)
}
func (dst *CustRiskMonitorSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustRiskMonitorSetting.Merge(dst, src)
}
func (m *CustRiskMonitorSetting) XXX_Size() int {
	return xxx_messageInfo_CustRiskMonitorSetting.Size(m)
}
func (m *CustRiskMonitorSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_CustRiskMonitorSetting.DiscardUnknown(m)
}

var xxx_messageInfo_CustRiskMonitorSetting proto.InternalMessageInfo

func (m *CustRiskMonitorSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *CustRiskMonitorSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *CustRiskMonitorSetting) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *CustRiskMonitorSetting) GetCusts() [][]byte {
	if m != nil {
		return m.Custs
	}
	return nil
}

func (m *CustRiskMonitorSetting) GetFilterFields() []*SettingValueField {
	if m != nil {
		return m.FilterFields
	}
	return nil
}

// 客户组设置
type CustGroupSetting struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	CustGroupNo          []byte   `protobuf:"bytes,3,opt,name=cust_group_no,json=custGroupNo,proto3" json:"cust_group_no,omitempty"`
	CustGroupName        []byte   `protobuf:"bytes,4,opt,name=cust_group_name,json=custGroupName,proto3" json:"cust_group_name,omitempty"`
	Custs                [][]byte `protobuf:"bytes,5,rep,name=custs,proto3" json:"custs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustGroupSetting) Reset()         { *m = CustGroupSetting{} }
func (m *CustGroupSetting) String() string { return proto.CompactTextString(m) }
func (*CustGroupSetting) ProtoMessage()    {}
func (*CustGroupSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{35}
}
func (m *CustGroupSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustGroupSetting.Unmarshal(m, b)
}
func (m *CustGroupSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustGroupSetting.Marshal(b, m, deterministic)
}
func (dst *CustGroupSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustGroupSetting.Merge(dst, src)
}
func (m *CustGroupSetting) XXX_Size() int {
	return xxx_messageInfo_CustGroupSetting.Size(m)
}
func (m *CustGroupSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_CustGroupSetting.DiscardUnknown(m)
}

var xxx_messageInfo_CustGroupSetting proto.InternalMessageInfo

func (m *CustGroupSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *CustGroupSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *CustGroupSetting) GetCustGroupNo() []byte {
	if m != nil {
		return m.CustGroupNo
	}
	return nil
}

func (m *CustGroupSetting) GetCustGroupName() []byte {
	if m != nil {
		return m.CustGroupName
	}
	return nil
}

func (m *CustGroupSetting) GetCusts() [][]byte {
	if m != nil {
		return m.Custs
	}
	return nil
}

// 公司持仓监控设置
type CorpHoldMonitorSetting struct {
	PackFlag             uint32               `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32               `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte               `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	Contrs               [][]byte             `protobuf:"bytes,4,rep,name=contrs,proto3" json:"contrs,omitempty"`
	FilterFields         []*SettingValueField `protobuf:"bytes,5,rep,name=filter_fields,json=filterFields" json:"filter_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CorpHoldMonitorSetting) Reset()         { *m = CorpHoldMonitorSetting{} }
func (m *CorpHoldMonitorSetting) String() string { return proto.CompactTextString(m) }
func (*CorpHoldMonitorSetting) ProtoMessage()    {}
func (*CorpHoldMonitorSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{36}
}
func (m *CorpHoldMonitorSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorpHoldMonitorSetting.Unmarshal(m, b)
}
func (m *CorpHoldMonitorSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorpHoldMonitorSetting.Marshal(b, m, deterministic)
}
func (dst *CorpHoldMonitorSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorpHoldMonitorSetting.Merge(dst, src)
}
func (m *CorpHoldMonitorSetting) XXX_Size() int {
	return xxx_messageInfo_CorpHoldMonitorSetting.Size(m)
}
func (m *CorpHoldMonitorSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_CorpHoldMonitorSetting.DiscardUnknown(m)
}

var xxx_messageInfo_CorpHoldMonitorSetting proto.InternalMessageInfo

func (m *CorpHoldMonitorSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *CorpHoldMonitorSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *CorpHoldMonitorSetting) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *CorpHoldMonitorSetting) GetContrs() [][]byte {
	if m != nil {
		return m.Contrs
	}
	return nil
}

func (m *CorpHoldMonitorSetting) GetFilterFields() []*SettingValueField {
	if m != nil {
		return m.FilterFields
	}
	return nil
}

// 强平客户信息查询请求
type QryForceCustInfoReq struct {
	CustNo               []byte   `protobuf:"bytes,1,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryForceCustInfoReq) Reset()         { *m = QryForceCustInfoReq{} }
func (m *QryForceCustInfoReq) String() string { return proto.CompactTextString(m) }
func (*QryForceCustInfoReq) ProtoMessage()    {}
func (*QryForceCustInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{37}
}
func (m *QryForceCustInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryForceCustInfoReq.Unmarshal(m, b)
}
func (m *QryForceCustInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryForceCustInfoReq.Marshal(b, m, deterministic)
}
func (dst *QryForceCustInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryForceCustInfoReq.Merge(dst, src)
}
func (m *QryForceCustInfoReq) XXX_Size() int {
	return xxx_messageInfo_QryForceCustInfoReq.Size(m)
}
func (m *QryForceCustInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryForceCustInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryForceCustInfoReq proto.InternalMessageInfo

func (m *QryForceCustInfoReq) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *QryForceCustInfoReq) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

// 强平客户信息应答
type ForceCustInfoRsp struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	CustNo               []byte   `protobuf:"bytes,2,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustName             []byte   `protobuf:"bytes,3,opt,name=cust_name,json=custName,proto3" json:"cust_name,omitempty"`
	CustClass            []byte   `protobuf:"bytes,4,opt,name=cust_class,json=custClass,proto3" json:"cust_class,omitempty"`
	Phone                []byte   `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Mobile               []byte   `protobuf:"bytes,6,opt,name=mobile,proto3" json:"mobile,omitempty"`
	BrokerList           []byte   `protobuf:"bytes,7,opt,name=broker_list,json=brokerList,proto3" json:"broker_list,omitempty"`
	DynRight             float64  `protobuf:"fixed64,8,opt,name=dyn_right,json=dynRight" json:"dyn_right,omitempty"`
	Margin               float64  `protobuf:"fixed64,9,opt,name=margin" json:"margin,omitempty"`
	AddMargin            float64  `protobuf:"fixed64,10,opt,name=add_margin,json=addMargin" json:"add_margin,omitempty"`
	LastAddMargin        float64  `protobuf:"fixed64,11,opt,name=last_add_margin,json=lastAddMargin" json:"last_add_margin,omitempty"`
	TodayInout           float64  `protobuf:"fixed64,12,opt,name=today_inout,json=todayInout" json:"today_inout,omitempty"`
	CmdAssign            []byte   `protobuf:"bytes,13,opt,name=cmd_assign,json=cmdAssign,proto3" json:"cmd_assign,omitempty"`
	ExchMargin           float64  `protobuf:"fixed64,14,opt,name=exch_margin,json=exchMargin" json:"exch_margin,omitempty"`
	ExchAddMargin        float64  `protobuf:"fixed64,15,opt,name=exch_add_margin,json=exchAddMargin" json:"exch_add_margin,omitempty"`
	CreditLevel          []byte   `protobuf:"bytes,16,opt,name=credit_level,json=creditLevel,proto3" json:"credit_level,omitempty"`
	RiskLevel            []byte   `protobuf:"bytes,17,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`
	RiskType             []byte   `protobuf:"bytes,18,opt,name=risk_type,json=riskType,proto3" json:"risk_type,omitempty"`
	BatchForceOffset     []byte   `protobuf:"bytes,19,opt,name=batch_force_offset,json=batchForceOffset,proto3" json:"batch_force_offset,omitempty"`
	FundAllot1           []byte   `protobuf:"bytes,20,opt,name=fund_allot1,json=fundAllot1,proto3" json:"fund_allot1,omitempty"`
	FundAllotTel1        []byte   `protobuf:"bytes,21,opt,name=fund_allot_tel1,json=fundAllotTel1,proto3" json:"fund_allot_tel1,omitempty"`
	CmdAssign1Tell       []byte   `protobuf:"bytes,22,opt,name=cmd_assign1_tell,json=cmdAssign1Tell,proto3" json:"cmd_assign1_tell,omitempty"`
	LastAvailFund        float64  `protobuf:"fixed64,23,opt,name=last_avail_fund,json=lastAvailFund" json:"last_avail_fund,omitempty"`
	LastRights           float64  `protobuf:"fixed64,24,opt,name=last_rights,json=lastRights" json:"last_rights,omitempty"`
	RiskDegree1          float64  `protobuf:"fixed64,25,opt,name=risk_degree1,json=riskDegree1" json:"risk_degree1,omitempty"`
	NotifyStatus         []byte   `protobuf:"bytes,26,opt,name=notify_status,json=notifyStatus,proto3" json:"notify_status,omitempty"`
	TopNotifyLevel       []byte   `protobuf:"bytes,27,opt,name=top_notify_level,json=topNotifyLevel,proto3" json:"top_notify_level,omitempty"`
	RiskDegree2          float64  `protobuf:"fixed64,28,opt,name=risk_degree2,json=riskDegree2" json:"risk_degree2,omitempty"`
	NotifyInfo           []byte   `protobuf:"bytes,29,opt,name=notify_info,json=notifyInfo,proto3" json:"notify_info,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,30,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	RoyaltyInout         float64  `protobuf:"fixed64,31,opt,name=royalty_inout,json=royaltyInout" json:"royalty_inout,omitempty"`
	OptionCap            float64  `protobuf:"fixed64,32,opt,name=option_cap,json=optionCap" json:"option_cap,omitempty"`
	DyncCapRight         float64  `protobuf:"fixed64,33,opt,name=dync_cap_right,json=dyncCapRight" json:"dync_cap_right,omitempty"`
	OptionDynMargin      float64  `protobuf:"fixed64,34,opt,name=option_dyn_margin,json=optionDynMargin" json:"option_dyn_margin,omitempty"`
	ExchOptionDynMargin  float64  `protobuf:"fixed64,35,opt,name=exch_option_dyn_margin,json=exchOptionDynMargin" json:"exch_option_dyn_margin,omitempty"`
	FrznMargin           float64  `protobuf:"fixed64,36,opt,name=frzn_margin,json=frznMargin" json:"frzn_margin,omitempty"`
	ExchFrznMargin       float64  `protobuf:"fixed64,37,opt,name=exch_frzn_margin,json=exchFrznMargin" json:"exch_frzn_margin,omitempty"`
	FrznStrikeMargin     float64  `protobuf:"fixed64,38,opt,name=frzn_strike_margin,json=frznStrikeMargin" json:"frzn_strike_margin,omitempty"`
	FrznRoyalty          float64  `protobuf:"fixed64,39,opt,name=frzn_royalty,json=frznRoyalty" json:"frzn_royalty,omitempty"`
	TradeLevel           uint32   `protobuf:"varint,40,opt,name=trade_level,json=tradeLevel" json:"trade_level,omitempty"`
	TradeLevelSzse       uint32   `protobuf:"varint,41,opt,name=trade_level_szse,json=tradeLevelSzse" json:"trade_level_szse,omitempty"`
	Clientmode           []byte   `protobuf:"bytes,42,opt,name=clientmode,proto3" json:"clientmode,omitempty"`
	AvailFund            float64  `protobuf:"fixed64,43,opt,name=avail_fund,json=availFund" json:"avail_fund,omitempty"`
	RspInfo              *RspInfo `protobuf:"bytes,44,opt,name=rspInfo" json:"rspInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForceCustInfoRsp) Reset()         { *m = ForceCustInfoRsp{} }
func (m *ForceCustInfoRsp) String() string { return proto.CompactTextString(m) }
func (*ForceCustInfoRsp) ProtoMessage()    {}
func (*ForceCustInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{38}
}
func (m *ForceCustInfoRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForceCustInfoRsp.Unmarshal(m, b)
}
func (m *ForceCustInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForceCustInfoRsp.Marshal(b, m, deterministic)
}
func (dst *ForceCustInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceCustInfoRsp.Merge(dst, src)
}
func (m *ForceCustInfoRsp) XXX_Size() int {
	return xxx_messageInfo_ForceCustInfoRsp.Size(m)
}
func (m *ForceCustInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceCustInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ForceCustInfoRsp proto.InternalMessageInfo

func (m *ForceCustInfoRsp) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *ForceCustInfoRsp) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *ForceCustInfoRsp) GetCustName() []byte {
	if m != nil {
		return m.CustName
	}
	return nil
}

func (m *ForceCustInfoRsp) GetCustClass() []byte {
	if m != nil {
		return m.CustClass
	}
	return nil
}

func (m *ForceCustInfoRsp) GetPhone() []byte {
	if m != nil {
		return m.Phone
	}
	return nil
}

func (m *ForceCustInfoRsp) GetMobile() []byte {
	if m != nil {
		return m.Mobile
	}
	return nil
}

func (m *ForceCustInfoRsp) GetBrokerList() []byte {
	if m != nil {
		return m.BrokerList
	}
	return nil
}

func (m *ForceCustInfoRsp) GetDynRight() float64 {
	if m != nil {
		return m.DynRight
	}
	return 0
}

func (m *ForceCustInfoRsp) GetMargin() float64 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetAddMargin() float64 {
	if m != nil {
		return m.AddMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetLastAddMargin() float64 {
	if m != nil {
		return m.LastAddMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetTodayInout() float64 {
	if m != nil {
		return m.TodayInout
	}
	return 0
}

func (m *ForceCustInfoRsp) GetCmdAssign() []byte {
	if m != nil {
		return m.CmdAssign
	}
	return nil
}

func (m *ForceCustInfoRsp) GetExchMargin() float64 {
	if m != nil {
		return m.ExchMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetExchAddMargin() float64 {
	if m != nil {
		return m.ExchAddMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetCreditLevel() []byte {
	if m != nil {
		return m.CreditLevel
	}
	return nil
}

func (m *ForceCustInfoRsp) GetRiskLevel() []byte {
	if m != nil {
		return m.RiskLevel
	}
	return nil
}

func (m *ForceCustInfoRsp) GetRiskType() []byte {
	if m != nil {
		return m.RiskType
	}
	return nil
}

func (m *ForceCustInfoRsp) GetBatchForceOffset() []byte {
	if m != nil {
		return m.BatchForceOffset
	}
	return nil
}

func (m *ForceCustInfoRsp) GetFundAllot1() []byte {
	if m != nil {
		return m.FundAllot1
	}
	return nil
}

func (m *ForceCustInfoRsp) GetFundAllotTel1() []byte {
	if m != nil {
		return m.FundAllotTel1
	}
	return nil
}

func (m *ForceCustInfoRsp) GetCmdAssign1Tell() []byte {
	if m != nil {
		return m.CmdAssign1Tell
	}
	return nil
}

func (m *ForceCustInfoRsp) GetLastAvailFund() float64 {
	if m != nil {
		return m.LastAvailFund
	}
	return 0
}

func (m *ForceCustInfoRsp) GetLastRights() float64 {
	if m != nil {
		return m.LastRights
	}
	return 0
}

func (m *ForceCustInfoRsp) GetRiskDegree1() float64 {
	if m != nil {
		return m.RiskDegree1
	}
	return 0
}

func (m *ForceCustInfoRsp) GetNotifyStatus() []byte {
	if m != nil {
		return m.NotifyStatus
	}
	return nil
}

func (m *ForceCustInfoRsp) GetTopNotifyLevel() []byte {
	if m != nil {
		return m.TopNotifyLevel
	}
	return nil
}

func (m *ForceCustInfoRsp) GetRiskDegree2() float64 {
	if m != nil {
		return m.RiskDegree2
	}
	return 0
}

func (m *ForceCustInfoRsp) GetNotifyInfo() []byte {
	if m != nil {
		return m.NotifyInfo
	}
	return nil
}

func (m *ForceCustInfoRsp) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

func (m *ForceCustInfoRsp) GetRoyaltyInout() float64 {
	if m != nil {
		return m.RoyaltyInout
	}
	return 0
}

func (m *ForceCustInfoRsp) GetOptionCap() float64 {
	if m != nil {
		return m.OptionCap
	}
	return 0
}

func (m *ForceCustInfoRsp) GetDyncCapRight() float64 {
	if m != nil {
		return m.DyncCapRight
	}
	return 0
}

func (m *ForceCustInfoRsp) GetOptionDynMargin() float64 {
	if m != nil {
		return m.OptionDynMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetExchOptionDynMargin() float64 {
	if m != nil {
		return m.ExchOptionDynMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetFrznMargin() float64 {
	if m != nil {
		return m.FrznMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetExchFrznMargin() float64 {
	if m != nil {
		return m.ExchFrznMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetFrznStrikeMargin() float64 {
	if m != nil {
		return m.FrznStrikeMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetFrznRoyalty() float64 {
	if m != nil {
		return m.FrznRoyalty
	}
	return 0
}

func (m *ForceCustInfoRsp) GetTradeLevel() uint32 {
	if m != nil {
		return m.TradeLevel
	}
	return 0
}

func (m *ForceCustInfoRsp) GetTradeLevelSzse() uint32 {
	if m != nil {
		return m.TradeLevelSzse
	}
	return 0
}

func (m *ForceCustInfoRsp) GetClientmode() []byte {
	if m != nil {
		return m.Clientmode
	}
	return nil
}

func (m *ForceCustInfoRsp) GetAvailFund() float64 {
	if m != nil {
		return m.AvailFund
	}
	return 0
}

func (m *ForceCustInfoRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

type CustHoldMonitorSetting struct {
	PackFlag             uint32               `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32               `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte               `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	Custs                [][]byte             `protobuf:"bytes,4,rep,name=custs,proto3" json:"custs,omitempty"`
	FilterFields         []*SettingValueField `protobuf:"bytes,5,rep,name=filter_fields,json=filterFields" json:"filter_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CustHoldMonitorSetting) Reset()         { *m = CustHoldMonitorSetting{} }
func (m *CustHoldMonitorSetting) String() string { return proto.CompactTextString(m) }
func (*CustHoldMonitorSetting) ProtoMessage()    {}
func (*CustHoldMonitorSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{39}
}
func (m *CustHoldMonitorSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustHoldMonitorSetting.Unmarshal(m, b)
}
func (m *CustHoldMonitorSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustHoldMonitorSetting.Marshal(b, m, deterministic)
}
func (dst *CustHoldMonitorSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustHoldMonitorSetting.Merge(dst, src)
}
func (m *CustHoldMonitorSetting) XXX_Size() int {
	return xxx_messageInfo_CustHoldMonitorSetting.Size(m)
}
func (m *CustHoldMonitorSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_CustHoldMonitorSetting.DiscardUnknown(m)
}

var xxx_messageInfo_CustHoldMonitorSetting proto.InternalMessageInfo

func (m *CustHoldMonitorSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *CustHoldMonitorSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *CustHoldMonitorSetting) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *CustHoldMonitorSetting) GetCusts() [][]byte {
	if m != nil {
		return m.Custs
	}
	return nil
}

func (m *CustHoldMonitorSetting) GetFilterFields() []*SettingValueField {
	if m != nil {
		return m.FilterFields
	}
	return nil
}

type CustGroupHoldMonitorSetting struct {
	PackFlag             uint32               `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32               `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte               `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	CustGroupNos         [][]byte             `protobuf:"bytes,4,rep,name=cust_group_nos,json=custGroupNos,proto3" json:"cust_group_nos,omitempty"`
	FilterFields         []*SettingValueField `protobuf:"bytes,5,rep,name=filter_fields,json=filterFields" json:"filter_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CustGroupHoldMonitorSetting) Reset()         { *m = CustGroupHoldMonitorSetting{} }
func (m *CustGroupHoldMonitorSetting) String() string { return proto.CompactTextString(m) }
func (*CustGroupHoldMonitorSetting) ProtoMessage()    {}
func (*CustGroupHoldMonitorSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{40}
}
func (m *CustGroupHoldMonitorSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustGroupHoldMonitorSetting.Unmarshal(m, b)
}
func (m *CustGroupHoldMonitorSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustGroupHoldMonitorSetting.Marshal(b, m, deterministic)
}
func (dst *CustGroupHoldMonitorSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustGroupHoldMonitorSetting.Merge(dst, src)
}
func (m *CustGroupHoldMonitorSetting) XXX_Size() int {
	return xxx_messageInfo_CustGroupHoldMonitorSetting.Size(m)
}
func (m *CustGroupHoldMonitorSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_CustGroupHoldMonitorSetting.DiscardUnknown(m)
}

var xxx_messageInfo_CustGroupHoldMonitorSetting proto.InternalMessageInfo

func (m *CustGroupHoldMonitorSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *CustGroupHoldMonitorSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *CustGroupHoldMonitorSetting) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *CustGroupHoldMonitorSetting) GetCustGroupNos() [][]byte {
	if m != nil {
		return m.CustGroupNos
	}
	return nil
}

func (m *CustGroupHoldMonitorSetting) GetFilterFields() []*SettingValueField {
	if m != nil {
		return m.FilterFields
	}
	return nil
}

type NearDediveHoldMonitorSetting struct {
	PackFlag             uint32               `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32               `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte               `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	Custs                [][]byte             `protobuf:"bytes,4,rep,name=custs,proto3" json:"custs,omitempty"`
	FilterFields         []*SettingValueField `protobuf:"bytes,5,rep,name=filter_fields,json=filterFields" json:"filter_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NearDediveHoldMonitorSetting) Reset()         { *m = NearDediveHoldMonitorSetting{} }
func (m *NearDediveHoldMonitorSetting) String() string { return proto.CompactTextString(m) }
func (*NearDediveHoldMonitorSetting) ProtoMessage()    {}
func (*NearDediveHoldMonitorSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{41}
}
func (m *NearDediveHoldMonitorSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NearDediveHoldMonitorSetting.Unmarshal(m, b)
}
func (m *NearDediveHoldMonitorSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NearDediveHoldMonitorSetting.Marshal(b, m, deterministic)
}
func (dst *NearDediveHoldMonitorSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NearDediveHoldMonitorSetting.Merge(dst, src)
}
func (m *NearDediveHoldMonitorSetting) XXX_Size() int {
	return xxx_messageInfo_NearDediveHoldMonitorSetting.Size(m)
}
func (m *NearDediveHoldMonitorSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_NearDediveHoldMonitorSetting.DiscardUnknown(m)
}

var xxx_messageInfo_NearDediveHoldMonitorSetting proto.InternalMessageInfo

func (m *NearDediveHoldMonitorSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *NearDediveHoldMonitorSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *NearDediveHoldMonitorSetting) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *NearDediveHoldMonitorSetting) GetCusts() [][]byte {
	if m != nil {
		return m.Custs
	}
	return nil
}

func (m *NearDediveHoldMonitorSetting) GetFilterFields() []*SettingValueField {
	if m != nil {
		return m.FilterFields
	}
	return nil
}

type HoldMaxLimit struct {
	ConditionType        HoldMaxLimit_HoldLimitConditionType `protobuf:"varint,1,opt,name=condition_type,json=conditionType,enum=riskmonitorserver.HoldMaxLimit_HoldLimitConditionType" json:"condition_type,omitempty"`
	ConditionValue       float64                             `protobuf:"fixed64,2,opt,name=condition_value,json=conditionValue" json:"condition_value,omitempty"`
	Conditioncompareflag HoldMaxLimit_CompareFlag            `protobuf:"varint,3,opt,name=conditioncompareflag,enum=riskmonitorserver.HoldMaxLimit_CompareFlag" json:"conditioncompareflag,omitempty"`
	HoldValueLimitType   HoldMaxLimit_QtyLimitType           `protobuf:"varint,4,opt,name=hold_value_limit_type,json=holdValueLimitType,enum=riskmonitorserver.HoldMaxLimit_QtyLimitType" json:"hold_value_limit_type,omitempty"`
	HoldValue            float64                             `protobuf:"fixed64,5,opt,name=hold_value,json=holdValue" json:"hold_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *HoldMaxLimit) Reset()         { *m = HoldMaxLimit{} }
func (m *HoldMaxLimit) String() string { return proto.CompactTextString(m) }
func (*HoldMaxLimit) ProtoMessage()    {}
func (*HoldMaxLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{42}
}
func (m *HoldMaxLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HoldMaxLimit.Unmarshal(m, b)
}
func (m *HoldMaxLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HoldMaxLimit.Marshal(b, m, deterministic)
}
func (dst *HoldMaxLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HoldMaxLimit.Merge(dst, src)
}
func (m *HoldMaxLimit) XXX_Size() int {
	return xxx_messageInfo_HoldMaxLimit.Size(m)
}
func (m *HoldMaxLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_HoldMaxLimit.DiscardUnknown(m)
}

var xxx_messageInfo_HoldMaxLimit proto.InternalMessageInfo

func (m *HoldMaxLimit) GetConditionType() HoldMaxLimit_HoldLimitConditionType {
	if m != nil {
		return m.ConditionType
	}
	return HoldMaxLimit_SINGLE_SIDE_HOLD_LIMIT
}

func (m *HoldMaxLimit) GetConditionValue() float64 {
	if m != nil {
		return m.ConditionValue
	}
	return 0
}

func (m *HoldMaxLimit) GetConditioncompareflag() HoldMaxLimit_CompareFlag {
	if m != nil {
		return m.Conditioncompareflag
	}
	return HoldMaxLimit_Greater
}

func (m *HoldMaxLimit) GetHoldValueLimitType() HoldMaxLimit_QtyLimitType {
	if m != nil {
		return m.HoldValueLimitType
	}
	return HoldMaxLimit_RATIO_LIMIT
}

func (m *HoldMaxLimit) GetHoldValue() float64 {
	if m != nil {
		return m.HoldValue
	}
	return 0
}

type HoldLimitDateNode struct {
	Date                 []byte          `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	HoldMaxLimits        []*HoldMaxLimit `protobuf:"bytes,2,rep,name=hold_max_limits,json=holdMaxLimits" json:"hold_max_limits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HoldLimitDateNode) Reset()         { *m = HoldLimitDateNode{} }
func (m *HoldLimitDateNode) String() string { return proto.CompactTextString(m) }
func (*HoldLimitDateNode) ProtoMessage()    {}
func (*HoldLimitDateNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{43}
}
func (m *HoldLimitDateNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HoldLimitDateNode.Unmarshal(m, b)
}
func (m *HoldLimitDateNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HoldLimitDateNode.Marshal(b, m, deterministic)
}
func (dst *HoldLimitDateNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HoldLimitDateNode.Merge(dst, src)
}
func (m *HoldLimitDateNode) XXX_Size() int {
	return xxx_messageInfo_HoldLimitDateNode.Size(m)
}
func (m *HoldLimitDateNode) XXX_DiscardUnknown() {
	xxx_messageInfo_HoldLimitDateNode.DiscardUnknown(m)
}

var xxx_messageInfo_HoldLimitDateNode proto.InternalMessageInfo

func (m *HoldLimitDateNode) GetDate() []byte {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *HoldLimitDateNode) GetHoldMaxLimits() []*HoldMaxLimit {
	if m != nil {
		return m.HoldMaxLimits
	}
	return nil
}

type HoldLimitTimeLine struct {
	ContractCode         []byte               `protobuf:"bytes,1,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	DateNodes            []*HoldLimitDateNode `protobuf:"bytes,2,rep,name=date_nodes,json=dateNodes" json:"date_nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *HoldLimitTimeLine) Reset()         { *m = HoldLimitTimeLine{} }
func (m *HoldLimitTimeLine) String() string { return proto.CompactTextString(m) }
func (*HoldLimitTimeLine) ProtoMessage()    {}
func (*HoldLimitTimeLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{44}
}
func (m *HoldLimitTimeLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HoldLimitTimeLine.Unmarshal(m, b)
}
func (m *HoldLimitTimeLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HoldLimitTimeLine.Marshal(b, m, deterministic)
}
func (dst *HoldLimitTimeLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HoldLimitTimeLine.Merge(dst, src)
}
func (m *HoldLimitTimeLine) XXX_Size() int {
	return xxx_messageInfo_HoldLimitTimeLine.Size(m)
}
func (m *HoldLimitTimeLine) XXX_DiscardUnknown() {
	xxx_messageInfo_HoldLimitTimeLine.DiscardUnknown(m)
}

var xxx_messageInfo_HoldLimitTimeLine proto.InternalMessageInfo

func (m *HoldLimitTimeLine) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *HoldLimitTimeLine) GetDateNodes() []*HoldLimitDateNode {
	if m != nil {
		return m.DateNodes
	}
	return nil
}

type MarginLimitDateNode struct {
	Date                 []byte   `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	MinMarginRatio       float64  `protobuf:"fixed64,2,opt,name=min_margin_ratio,json=minMarginRatio" json:"min_margin_ratio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarginLimitDateNode) Reset()         { *m = MarginLimitDateNode{} }
func (m *MarginLimitDateNode) String() string { return proto.CompactTextString(m) }
func (*MarginLimitDateNode) ProtoMessage()    {}
func (*MarginLimitDateNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{45}
}
func (m *MarginLimitDateNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarginLimitDateNode.Unmarshal(m, b)
}
func (m *MarginLimitDateNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarginLimitDateNode.Marshal(b, m, deterministic)
}
func (dst *MarginLimitDateNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarginLimitDateNode.Merge(dst, src)
}
func (m *MarginLimitDateNode) XXX_Size() int {
	return xxx_messageInfo_MarginLimitDateNode.Size(m)
}
func (m *MarginLimitDateNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MarginLimitDateNode.DiscardUnknown(m)
}

var xxx_messageInfo_MarginLimitDateNode proto.InternalMessageInfo

func (m *MarginLimitDateNode) GetDate() []byte {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *MarginLimitDateNode) GetMinMarginRatio() float64 {
	if m != nil {
		return m.MinMarginRatio
	}
	return 0
}

type MarginLimitHoldNode struct {
	LowerLimitQty        uint32   `protobuf:"varint,1,opt,name=lower_limit_qty,json=lowerLimitQty" json:"lower_limit_qty,omitempty"`
	UpperLimitQty        uint32   `protobuf:"varint,2,opt,name=upper_limit_qty,json=upperLimitQty" json:"upper_limit_qty,omitempty"`
	MinMarginRatio       float64  `protobuf:"fixed64,3,opt,name=min_margin_ratio,json=minMarginRatio" json:"min_margin_ratio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarginLimitHoldNode) Reset()         { *m = MarginLimitHoldNode{} }
func (m *MarginLimitHoldNode) String() string { return proto.CompactTextString(m) }
func (*MarginLimitHoldNode) ProtoMessage()    {}
func (*MarginLimitHoldNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{46}
}
func (m *MarginLimitHoldNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarginLimitHoldNode.Unmarshal(m, b)
}
func (m *MarginLimitHoldNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarginLimitHoldNode.Marshal(b, m, deterministic)
}
func (dst *MarginLimitHoldNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarginLimitHoldNode.Merge(dst, src)
}
func (m *MarginLimitHoldNode) XXX_Size() int {
	return xxx_messageInfo_MarginLimitHoldNode.Size(m)
}
func (m *MarginLimitHoldNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MarginLimitHoldNode.DiscardUnknown(m)
}

var xxx_messageInfo_MarginLimitHoldNode proto.InternalMessageInfo

func (m *MarginLimitHoldNode) GetLowerLimitQty() uint32 {
	if m != nil {
		return m.LowerLimitQty
	}
	return 0
}

func (m *MarginLimitHoldNode) GetUpperLimitQty() uint32 {
	if m != nil {
		return m.UpperLimitQty
	}
	return 0
}

func (m *MarginLimitHoldNode) GetMinMarginRatio() float64 {
	if m != nil {
		return m.MinMarginRatio
	}
	return 0
}

type MarginLimitTimeLine struct {
	ContractCode         []byte                 `protobuf:"bytes,1,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	DateNodes            []*MarginLimitDateNode `protobuf:"bytes,2,rep,name=date_nodes,json=dateNodes" json:"date_nodes,omitempty"`
	HoldNodes            []*MarginLimitHoldNode `protobuf:"bytes,3,rep,name=hold_nodes,json=holdNodes" json:"hold_nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *MarginLimitTimeLine) Reset()         { *m = MarginLimitTimeLine{} }
func (m *MarginLimitTimeLine) String() string { return proto.CompactTextString(m) }
func (*MarginLimitTimeLine) ProtoMessage()    {}
func (*MarginLimitTimeLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{47}
}
func (m *MarginLimitTimeLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarginLimitTimeLine.Unmarshal(m, b)
}
func (m *MarginLimitTimeLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarginLimitTimeLine.Marshal(b, m, deterministic)
}
func (dst *MarginLimitTimeLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarginLimitTimeLine.Merge(dst, src)
}
func (m *MarginLimitTimeLine) XXX_Size() int {
	return xxx_messageInfo_MarginLimitTimeLine.Size(m)
}
func (m *MarginLimitTimeLine) XXX_DiscardUnknown() {
	xxx_messageInfo_MarginLimitTimeLine.DiscardUnknown(m)
}

var xxx_messageInfo_MarginLimitTimeLine proto.InternalMessageInfo

func (m *MarginLimitTimeLine) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *MarginLimitTimeLine) GetDateNodes() []*MarginLimitDateNode {
	if m != nil {
		return m.DateNodes
	}
	return nil
}

func (m *MarginLimitTimeLine) GetHoldNodes() []*MarginLimitHoldNode {
	if m != nil {
		return m.HoldNodes
	}
	return nil
}

type HoldLimitSetting struct {
	PackFlag             uint32               `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32               `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	ExchCode             []byte               `protobuf:"bytes,3,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode             []byte               `protobuf:"bytes,4,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	Settings             []*HoldLimitTimeLine `protobuf:"bytes,5,rep,name=settings" json:"settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *HoldLimitSetting) Reset()         { *m = HoldLimitSetting{} }
func (m *HoldLimitSetting) String() string { return proto.CompactTextString(m) }
func (*HoldLimitSetting) ProtoMessage()    {}
func (*HoldLimitSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{48}
}
func (m *HoldLimitSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HoldLimitSetting.Unmarshal(m, b)
}
func (m *HoldLimitSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HoldLimitSetting.Marshal(b, m, deterministic)
}
func (dst *HoldLimitSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HoldLimitSetting.Merge(dst, src)
}
func (m *HoldLimitSetting) XXX_Size() int {
	return xxx_messageInfo_HoldLimitSetting.Size(m)
}
func (m *HoldLimitSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_HoldLimitSetting.DiscardUnknown(m)
}

var xxx_messageInfo_HoldLimitSetting proto.InternalMessageInfo

func (m *HoldLimitSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *HoldLimitSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *HoldLimitSetting) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *HoldLimitSetting) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *HoldLimitSetting) GetSettings() []*HoldLimitTimeLine {
	if m != nil {
		return m.Settings
	}
	return nil
}

type MarginLimitSetting struct {
	PackFlag             uint32                 `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32                 `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	ExchCode             []byte                 `protobuf:"bytes,3,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode             []byte                 `protobuf:"bytes,4,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	Settings             []*MarginLimitTimeLine `protobuf:"bytes,5,rep,name=settings" json:"settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *MarginLimitSetting) Reset()         { *m = MarginLimitSetting{} }
func (m *MarginLimitSetting) String() string { return proto.CompactTextString(m) }
func (*MarginLimitSetting) ProtoMessage()    {}
func (*MarginLimitSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{49}
}
func (m *MarginLimitSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarginLimitSetting.Unmarshal(m, b)
}
func (m *MarginLimitSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarginLimitSetting.Marshal(b, m, deterministic)
}
func (dst *MarginLimitSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarginLimitSetting.Merge(dst, src)
}
func (m *MarginLimitSetting) XXX_Size() int {
	return xxx_messageInfo_MarginLimitSetting.Size(m)
}
func (m *MarginLimitSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_MarginLimitSetting.DiscardUnknown(m)
}

var xxx_messageInfo_MarginLimitSetting proto.InternalMessageInfo

func (m *MarginLimitSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *MarginLimitSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *MarginLimitSetting) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *MarginLimitSetting) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *MarginLimitSetting) GetSettings() []*MarginLimitTimeLine {
	if m != nil {
		return m.Settings
	}
	return nil
}

type ArbitrageLimitDateNode struct {
	Date                 []byte                           `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Type                 ArbitrageLimitDateNode_LimitType `protobuf:"varint,2,opt,name=type,enum=riskmonitorserver.ArbitrageLimitDateNode_LimitType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ArbitrageLimitDateNode) Reset()         { *m = ArbitrageLimitDateNode{} }
func (m *ArbitrageLimitDateNode) String() string { return proto.CompactTextString(m) }
func (*ArbitrageLimitDateNode) ProtoMessage()    {}
func (*ArbitrageLimitDateNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{50}
}
func (m *ArbitrageLimitDateNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArbitrageLimitDateNode.Unmarshal(m, b)
}
func (m *ArbitrageLimitDateNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArbitrageLimitDateNode.Marshal(b, m, deterministic)
}
func (dst *ArbitrageLimitDateNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbitrageLimitDateNode.Merge(dst, src)
}
func (m *ArbitrageLimitDateNode) XXX_Size() int {
	return xxx_messageInfo_ArbitrageLimitDateNode.Size(m)
}
func (m *ArbitrageLimitDateNode) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbitrageLimitDateNode.DiscardUnknown(m)
}

var xxx_messageInfo_ArbitrageLimitDateNode proto.InternalMessageInfo

func (m *ArbitrageLimitDateNode) GetDate() []byte {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *ArbitrageLimitDateNode) GetType() ArbitrageLimitDateNode_LimitType {
	if m != nil {
		return m.Type
	}
	return ArbitrageLimitDateNode_CzceDelive
}

type ArbitrageLimitTimeLine struct {
	ContractCode         []byte                    `protobuf:"bytes,1,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	DateNodes            []*ArbitrageLimitDateNode `protobuf:"bytes,2,rep,name=date_nodes,json=dateNodes" json:"date_nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ArbitrageLimitTimeLine) Reset()         { *m = ArbitrageLimitTimeLine{} }
func (m *ArbitrageLimitTimeLine) String() string { return proto.CompactTextString(m) }
func (*ArbitrageLimitTimeLine) ProtoMessage()    {}
func (*ArbitrageLimitTimeLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{51}
}
func (m *ArbitrageLimitTimeLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArbitrageLimitTimeLine.Unmarshal(m, b)
}
func (m *ArbitrageLimitTimeLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArbitrageLimitTimeLine.Marshal(b, m, deterministic)
}
func (dst *ArbitrageLimitTimeLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbitrageLimitTimeLine.Merge(dst, src)
}
func (m *ArbitrageLimitTimeLine) XXX_Size() int {
	return xxx_messageInfo_ArbitrageLimitTimeLine.Size(m)
}
func (m *ArbitrageLimitTimeLine) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbitrageLimitTimeLine.DiscardUnknown(m)
}

var xxx_messageInfo_ArbitrageLimitTimeLine proto.InternalMessageInfo

func (m *ArbitrageLimitTimeLine) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *ArbitrageLimitTimeLine) GetDateNodes() []*ArbitrageLimitDateNode {
	if m != nil {
		return m.DateNodes
	}
	return nil
}

type ArbitrageLimitSetting struct {
	PackFlag             uint32                    `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32                    `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	ExchCode             []byte                    `protobuf:"bytes,3,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode             []byte                    `protobuf:"bytes,4,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	Settings             []*ArbitrageLimitTimeLine `protobuf:"bytes,5,rep,name=settings" json:"settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ArbitrageLimitSetting) Reset()         { *m = ArbitrageLimitSetting{} }
func (m *ArbitrageLimitSetting) String() string { return proto.CompactTextString(m) }
func (*ArbitrageLimitSetting) ProtoMessage()    {}
func (*ArbitrageLimitSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{52}
}
func (m *ArbitrageLimitSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArbitrageLimitSetting.Unmarshal(m, b)
}
func (m *ArbitrageLimitSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArbitrageLimitSetting.Marshal(b, m, deterministic)
}
func (dst *ArbitrageLimitSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbitrageLimitSetting.Merge(dst, src)
}
func (m *ArbitrageLimitSetting) XXX_Size() int {
	return xxx_messageInfo_ArbitrageLimitSetting.Size(m)
}
func (m *ArbitrageLimitSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbitrageLimitSetting.DiscardUnknown(m)
}

var xxx_messageInfo_ArbitrageLimitSetting proto.InternalMessageInfo

func (m *ArbitrageLimitSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *ArbitrageLimitSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *ArbitrageLimitSetting) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *ArbitrageLimitSetting) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *ArbitrageLimitSetting) GetSettings() []*ArbitrageLimitTimeLine {
	if m != nil {
		return m.Settings
	}
	return nil
}

type EarlyWrningTimeSetting struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	EarlyTradedays       int32    `protobuf:"varint,3,opt,name=early_tradedays,json=earlyTradedays" json:"early_tradedays,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EarlyWrningTimeSetting) Reset()         { *m = EarlyWrningTimeSetting{} }
func (m *EarlyWrningTimeSetting) String() string { return proto.CompactTextString(m) }
func (*EarlyWrningTimeSetting) ProtoMessage()    {}
func (*EarlyWrningTimeSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{53}
}
func (m *EarlyWrningTimeSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EarlyWrningTimeSetting.Unmarshal(m, b)
}
func (m *EarlyWrningTimeSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EarlyWrningTimeSetting.Marshal(b, m, deterministic)
}
func (dst *EarlyWrningTimeSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EarlyWrningTimeSetting.Merge(dst, src)
}
func (m *EarlyWrningTimeSetting) XXX_Size() int {
	return xxx_messageInfo_EarlyWrningTimeSetting.Size(m)
}
func (m *EarlyWrningTimeSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_EarlyWrningTimeSetting.DiscardUnknown(m)
}

var xxx_messageInfo_EarlyWrningTimeSetting proto.InternalMessageInfo

func (m *EarlyWrningTimeSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *EarlyWrningTimeSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *EarlyWrningTimeSetting) GetEarlyTradedays() int32 {
	if m != nil {
		return m.EarlyTradedays
	}
	return 0
}

type EarlyWrningValueSetting struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	ExchCode             []byte   `protobuf:"bytes,3,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode             []byte   `protobuf:"bytes,4,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	EarlyValue           int32    `protobuf:"varint,5,opt,name=early_value,json=earlyValue" json:"early_value,omitempty"`
	EarlyRadio           int32    `protobuf:"varint,6,opt,name=early_radio,json=earlyRadio" json:"early_radio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EarlyWrningValueSetting) Reset()         { *m = EarlyWrningValueSetting{} }
func (m *EarlyWrningValueSetting) String() string { return proto.CompactTextString(m) }
func (*EarlyWrningValueSetting) ProtoMessage()    {}
func (*EarlyWrningValueSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{54}
}
func (m *EarlyWrningValueSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EarlyWrningValueSetting.Unmarshal(m, b)
}
func (m *EarlyWrningValueSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EarlyWrningValueSetting.Marshal(b, m, deterministic)
}
func (dst *EarlyWrningValueSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EarlyWrningValueSetting.Merge(dst, src)
}
func (m *EarlyWrningValueSetting) XXX_Size() int {
	return xxx_messageInfo_EarlyWrningValueSetting.Size(m)
}
func (m *EarlyWrningValueSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_EarlyWrningValueSetting.DiscardUnknown(m)
}

var xxx_messageInfo_EarlyWrningValueSetting proto.InternalMessageInfo

func (m *EarlyWrningValueSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *EarlyWrningValueSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *EarlyWrningValueSetting) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *EarlyWrningValueSetting) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *EarlyWrningValueSetting) GetEarlyValue() int32 {
	if m != nil {
		return m.EarlyValue
	}
	return 0
}

func (m *EarlyWrningValueSetting) GetEarlyRadio() int32 {
	if m != nil {
		return m.EarlyRadio
	}
	return 0
}

type NearDediveSetting struct {
	PackFlag             uint32                          `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32                          `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	ExchCode             []byte                          `protobuf:"bytes,3,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode             []byte                          `protobuf:"bytes,4,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	CloseDate            NearDediveSetting_CloseDateType `protobuf:"varint,5,opt,name=close_date,json=closeDate,enum=riskmonitorserver.NearDediveSetting_CloseDateType" json:"close_date,omitempty"`
	ClientType           NearDediveSetting_ClientType    `protobuf:"varint,6,opt,name=client_type,json=clientType,enum=riskmonitorserver.NearDediveSetting_ClientType" json:"client_type,omitempty"`
	BaseHold             int32                           `protobuf:"varint,7,opt,name=base_hold,json=baseHold" json:"base_hold,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *NearDediveSetting) Reset()         { *m = NearDediveSetting{} }
func (m *NearDediveSetting) String() string { return proto.CompactTextString(m) }
func (*NearDediveSetting) ProtoMessage()    {}
func (*NearDediveSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{55}
}
func (m *NearDediveSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NearDediveSetting.Unmarshal(m, b)
}
func (m *NearDediveSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NearDediveSetting.Marshal(b, m, deterministic)
}
func (dst *NearDediveSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NearDediveSetting.Merge(dst, src)
}
func (m *NearDediveSetting) XXX_Size() int {
	return xxx_messageInfo_NearDediveSetting.Size(m)
}
func (m *NearDediveSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_NearDediveSetting.DiscardUnknown(m)
}

var xxx_messageInfo_NearDediveSetting proto.InternalMessageInfo

func (m *NearDediveSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *NearDediveSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *NearDediveSetting) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *NearDediveSetting) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *NearDediveSetting) GetCloseDate() NearDediveSetting_CloseDateType {
	if m != nil {
		return m.CloseDate
	}
	return NearDediveSetting_LastTradeDateDelive1
}

func (m *NearDediveSetting) GetClientType() NearDediveSetting_ClientType {
	if m != nil {
		return m.ClientType
	}
	return NearDediveSetting_LagelPerson
}

func (m *NearDediveSetting) GetBaseHold() int32 {
	if m != nil {
		return m.BaseHold
	}
	return 0
}

// 随合约持仓量变化调整
type VariationObject struct {
	Start                uint32   `protobuf:"varint,1,opt,name=Start" json:"Start,omitempty"`
	End                  uint32   `protobuf:"varint,2,opt,name=End" json:"End,omitempty"`
	Margin               float64  `protobuf:"fixed64,3,opt,name=Margin" json:"Margin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VariationObject) Reset()         { *m = VariationObject{} }
func (m *VariationObject) String() string { return proto.CompactTextString(m) }
func (*VariationObject) ProtoMessage()    {}
func (*VariationObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{56}
}
func (m *VariationObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VariationObject.Unmarshal(m, b)
}
func (m *VariationObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VariationObject.Marshal(b, m, deterministic)
}
func (dst *VariationObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariationObject.Merge(dst, src)
}
func (m *VariationObject) XXX_Size() int {
	return xxx_messageInfo_VariationObject.Size(m)
}
func (m *VariationObject) XXX_DiscardUnknown() {
	xxx_messageInfo_VariationObject.DiscardUnknown(m)
}

var xxx_messageInfo_VariationObject proto.InternalMessageInfo

func (m *VariationObject) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *VariationObject) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *VariationObject) GetMargin() float64 {
	if m != nil {
		return m.Margin
	}
	return 0
}

// 区间配置项
type VariMarginLimitTimeLineNode struct {
	TiemLineNodeType     VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum `protobuf:"varint,1,opt,name=TiemLineNodeType,enum=riskmonitorserver.VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum" json:"TiemLineNodeType,omitempty"`
	Day                  uint32                                           `protobuf:"varint,2,opt,name=Day" json:"Day,omitempty"`
	MinMargin            float64                                          `protobuf:"fixed64,3,opt,name=MinMargin" json:"MinMargin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *VariMarginLimitTimeLineNode) Reset()         { *m = VariMarginLimitTimeLineNode{} }
func (m *VariMarginLimitTimeLineNode) String() string { return proto.CompactTextString(m) }
func (*VariMarginLimitTimeLineNode) ProtoMessage()    {}
func (*VariMarginLimitTimeLineNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{57}
}
func (m *VariMarginLimitTimeLineNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VariMarginLimitTimeLineNode.Unmarshal(m, b)
}
func (m *VariMarginLimitTimeLineNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VariMarginLimitTimeLineNode.Marshal(b, m, deterministic)
}
func (dst *VariMarginLimitTimeLineNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariMarginLimitTimeLineNode.Merge(dst, src)
}
func (m *VariMarginLimitTimeLineNode) XXX_Size() int {
	return xxx_messageInfo_VariMarginLimitTimeLineNode.Size(m)
}
func (m *VariMarginLimitTimeLineNode) XXX_DiscardUnknown() {
	xxx_messageInfo_VariMarginLimitTimeLineNode.DiscardUnknown(m)
}

var xxx_messageInfo_VariMarginLimitTimeLineNode proto.InternalMessageInfo

func (m *VariMarginLimitTimeLineNode) GetTiemLineNodeType() VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum {
	if m != nil {
		return m.TiemLineNodeType
	}
	return VariMarginLimitTimeLineNode_Delivery_Month
}

func (m *VariMarginLimitTimeLineNode) GetDay() uint32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *VariMarginLimitTimeLineNode) GetMinMargin() float64 {
	if m != nil {
		return m.MinMargin
	}
	return 0
}

type VariMarginLimitSetting struct {
	PackFlag                    uint32                                                 `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag                  uint32                                                 `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	ExchCode                    []byte                                                 `protobuf:"bytes,3,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode                    []byte                                                 `protobuf:"bytes,4,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	StatisticsDateType          VariMarginLimitSetting_StatisticsDateTypeEnum          `protobuf:"varint,5,opt,name=statisticsDateType,enum=riskmonitorserver.VariMarginLimitSetting_StatisticsDateTypeEnum" json:"statisticsDateType,omitempty"`
	PositionVariationMarginType VariMarginLimitSetting_PositionVariationMarginTypeEnum `protobuf:"varint,6,opt,name=positionVariationMarginType,enum=riskmonitorserver.VariMarginLimitSetting_PositionVariationMarginTypeEnum" json:"positionVariationMarginType,omitempty"`
	VariationObjects            []*VariationObject                                     `protobuf:"bytes,7,rep,name=VariationObjects" json:"VariationObjects,omitempty"`
	MarginLimitTimeLineNodes    []*VariMarginLimitTimeLineNode                         `protobuf:"bytes,8,rep,name=MarginLimitTimeLineNodes" json:"MarginLimitTimeLineNodes,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}                                               `json:"-"`
	XXX_unrecognized            []byte                                                 `json:"-"`
	XXX_sizecache               int32                                                  `json:"-"`
}

func (m *VariMarginLimitSetting) Reset()         { *m = VariMarginLimitSetting{} }
func (m *VariMarginLimitSetting) String() string { return proto.CompactTextString(m) }
func (*VariMarginLimitSetting) ProtoMessage()    {}
func (*VariMarginLimitSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{58}
}
func (m *VariMarginLimitSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VariMarginLimitSetting.Unmarshal(m, b)
}
func (m *VariMarginLimitSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VariMarginLimitSetting.Marshal(b, m, deterministic)
}
func (dst *VariMarginLimitSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariMarginLimitSetting.Merge(dst, src)
}
func (m *VariMarginLimitSetting) XXX_Size() int {
	return xxx_messageInfo_VariMarginLimitSetting.Size(m)
}
func (m *VariMarginLimitSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_VariMarginLimitSetting.DiscardUnknown(m)
}

var xxx_messageInfo_VariMarginLimitSetting proto.InternalMessageInfo

func (m *VariMarginLimitSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *VariMarginLimitSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *VariMarginLimitSetting) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *VariMarginLimitSetting) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *VariMarginLimitSetting) GetStatisticsDateType() VariMarginLimitSetting_StatisticsDateTypeEnum {
	if m != nil {
		return m.StatisticsDateType
	}
	return VariMarginLimitSetting_Trade
}

func (m *VariMarginLimitSetting) GetPositionVariationMarginType() VariMarginLimitSetting_PositionVariationMarginTypeEnum {
	if m != nil {
		return m.PositionVariationMarginType
	}
	return VariMarginLimitSetting_Fixed
}

func (m *VariMarginLimitSetting) GetVariationObjects() []*VariationObject {
	if m != nil {
		return m.VariationObjects
	}
	return nil
}

func (m *VariMarginLimitSetting) GetMarginLimitTimeLineNodes() []*VariMarginLimitTimeLineNode {
	if m != nil {
		return m.MarginLimitTimeLineNodes
	}
	return nil
}

type ConditionHoldLimitObject struct {
	CompareFlag          ConditionHoldLimitObject_CompareFlagEnum  `protobuf:"varint,1,opt,name=compare_flag,json=compareFlag,enum=riskmonitorserver.ConditionHoldLimitObject_CompareFlagEnum" json:"compare_flag,omitempty"`
	Hands                uint32                                    `protobuf:"varint,2,opt,name=hands" json:"hands,omitempty"`
	LimitType            ConditionHoldLimitObject_QtyLimitTypeEnum `protobuf:"varint,3,opt,name=limit_type,json=limitType,enum=riskmonitorserver.ConditionHoldLimitObject_QtyLimitTypeEnum" json:"limit_type,omitempty"`
	HoldValue            float64                                   `protobuf:"fixed64,4,opt,name=hold_value,json=holdValue" json:"hold_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *ConditionHoldLimitObject) Reset()         { *m = ConditionHoldLimitObject{} }
func (m *ConditionHoldLimitObject) String() string { return proto.CompactTextString(m) }
func (*ConditionHoldLimitObject) ProtoMessage()    {}
func (*ConditionHoldLimitObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{59}
}
func (m *ConditionHoldLimitObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConditionHoldLimitObject.Unmarshal(m, b)
}
func (m *ConditionHoldLimitObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConditionHoldLimitObject.Marshal(b, m, deterministic)
}
func (dst *ConditionHoldLimitObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConditionHoldLimitObject.Merge(dst, src)
}
func (m *ConditionHoldLimitObject) XXX_Size() int {
	return xxx_messageInfo_ConditionHoldLimitObject.Size(m)
}
func (m *ConditionHoldLimitObject) XXX_DiscardUnknown() {
	xxx_messageInfo_ConditionHoldLimitObject.DiscardUnknown(m)
}

var xxx_messageInfo_ConditionHoldLimitObject proto.InternalMessageInfo

func (m *ConditionHoldLimitObject) GetCompareFlag() ConditionHoldLimitObject_CompareFlagEnum {
	if m != nil {
		return m.CompareFlag
	}
	return ConditionHoldLimitObject_Greater
}

func (m *ConditionHoldLimitObject) GetHands() uint32 {
	if m != nil {
		return m.Hands
	}
	return 0
}

func (m *ConditionHoldLimitObject) GetLimitType() ConditionHoldLimitObject_QtyLimitTypeEnum {
	if m != nil {
		return m.LimitType
	}
	return ConditionHoldLimitObject_RATIO_LIMIT
}

func (m *ConditionHoldLimitObject) GetHoldValue() float64 {
	if m != nil {
		return m.HoldValue
	}
	return 0
}

type VariHoldLimitTimeLineNode struct {
	TiemLineNodeType          VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum       `protobuf:"varint,1,opt,name=TiemLineNodeType,enum=riskmonitorserver.VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum" json:"TiemLineNodeType,omitempty"`
	Day                       uint32                                               `protobuf:"varint,2,opt,name=Day" json:"Day,omitempty"`
	ConditionType             VariHoldLimitTimeLineNode_HoldLimitConditionTypeEnum `protobuf:"varint,3,opt,name=conditionType,enum=riskmonitorserver.VariHoldLimitTimeLineNode_HoldLimitConditionTypeEnum" json:"conditionType,omitempty"`
	ConditionHoldLimitObjects []*ConditionHoldLimitObject                          `protobuf:"bytes,4,rep,name=ConditionHoldLimitObjects" json:"ConditionHoldLimitObjects,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                                             `json:"-"`
	XXX_unrecognized          []byte                                               `json:"-"`
	XXX_sizecache             int32                                                `json:"-"`
}

func (m *VariHoldLimitTimeLineNode) Reset()         { *m = VariHoldLimitTimeLineNode{} }
func (m *VariHoldLimitTimeLineNode) String() string { return proto.CompactTextString(m) }
func (*VariHoldLimitTimeLineNode) ProtoMessage()    {}
func (*VariHoldLimitTimeLineNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{60}
}
func (m *VariHoldLimitTimeLineNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VariHoldLimitTimeLineNode.Unmarshal(m, b)
}
func (m *VariHoldLimitTimeLineNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VariHoldLimitTimeLineNode.Marshal(b, m, deterministic)
}
func (dst *VariHoldLimitTimeLineNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariHoldLimitTimeLineNode.Merge(dst, src)
}
func (m *VariHoldLimitTimeLineNode) XXX_Size() int {
	return xxx_messageInfo_VariHoldLimitTimeLineNode.Size(m)
}
func (m *VariHoldLimitTimeLineNode) XXX_DiscardUnknown() {
	xxx_messageInfo_VariHoldLimitTimeLineNode.DiscardUnknown(m)
}

var xxx_messageInfo_VariHoldLimitTimeLineNode proto.InternalMessageInfo

func (m *VariHoldLimitTimeLineNode) GetTiemLineNodeType() VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum {
	if m != nil {
		return m.TiemLineNodeType
	}
	return VariHoldLimitTimeLineNode_Delivery_Month
}

func (m *VariHoldLimitTimeLineNode) GetDay() uint32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *VariHoldLimitTimeLineNode) GetConditionType() VariHoldLimitTimeLineNode_HoldLimitConditionTypeEnum {
	if m != nil {
		return m.ConditionType
	}
	return VariHoldLimitTimeLineNode_SINGLE_SIDE_HOLD_LIMIT
}

func (m *VariHoldLimitTimeLineNode) GetConditionHoldLimitObjects() []*ConditionHoldLimitObject {
	if m != nil {
		return m.ConditionHoldLimitObjects
	}
	return nil
}

type VariHoldLimitSetting struct {
	PackFlag                   uint32                                      `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag                 uint32                                      `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	ExchCode                   []byte                                      `protobuf:"bytes,3,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode                   []byte                                      `protobuf:"bytes,4,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	StatisticsDateType         VariHoldLimitSetting_StatisticsDateTypeEnum `protobuf:"varint,5,opt,name=statisticsDateType,enum=riskmonitorserver.VariHoldLimitSetting_StatisticsDateTypeEnum" json:"statisticsDateType,omitempty"`
	VariHoldLimitTimeLineNodes []*VariHoldLimitTimeLineNode                `protobuf:"bytes,6,rep,name=VariHoldLimitTimeLineNodes" json:"VariHoldLimitTimeLineNodes,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                                    `json:"-"`
	XXX_unrecognized           []byte                                      `json:"-"`
	XXX_sizecache              int32                                       `json:"-"`
}

func (m *VariHoldLimitSetting) Reset()         { *m = VariHoldLimitSetting{} }
func (m *VariHoldLimitSetting) String() string { return proto.CompactTextString(m) }
func (*VariHoldLimitSetting) ProtoMessage()    {}
func (*VariHoldLimitSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{61}
}
func (m *VariHoldLimitSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VariHoldLimitSetting.Unmarshal(m, b)
}
func (m *VariHoldLimitSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VariHoldLimitSetting.Marshal(b, m, deterministic)
}
func (dst *VariHoldLimitSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariHoldLimitSetting.Merge(dst, src)
}
func (m *VariHoldLimitSetting) XXX_Size() int {
	return xxx_messageInfo_VariHoldLimitSetting.Size(m)
}
func (m *VariHoldLimitSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_VariHoldLimitSetting.DiscardUnknown(m)
}

var xxx_messageInfo_VariHoldLimitSetting proto.InternalMessageInfo

func (m *VariHoldLimitSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *VariHoldLimitSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *VariHoldLimitSetting) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *VariHoldLimitSetting) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *VariHoldLimitSetting) GetStatisticsDateType() VariHoldLimitSetting_StatisticsDateTypeEnum {
	if m != nil {
		return m.StatisticsDateType
	}
	return VariHoldLimitSetting_Trade
}

func (m *VariHoldLimitSetting) GetVariHoldLimitTimeLineNodes() []*VariHoldLimitTimeLineNode {
	if m != nil {
		return m.VariHoldLimitTimeLineNodes
	}
	return nil
}

type VariArbitrageLimitTimeLineNode struct {
	TiemLineNodeType     VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum `protobuf:"varint,1,opt,name=TiemLineNodeType,enum=riskmonitorserver.VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum" json:"TiemLineNodeType,omitempty"`
	Day                  uint32                                              `protobuf:"varint,2,opt,name=Day" json:"Day,omitempty"`
	Type                 VariArbitrageLimitTimeLineNode_LimitTypeEnum        `protobuf:"varint,3,opt,name=type,enum=riskmonitorserver.VariArbitrageLimitTimeLineNode_LimitTypeEnum" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_unrecognized     []byte                                              `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *VariArbitrageLimitTimeLineNode) Reset()         { *m = VariArbitrageLimitTimeLineNode{} }
func (m *VariArbitrageLimitTimeLineNode) String() string { return proto.CompactTextString(m) }
func (*VariArbitrageLimitTimeLineNode) ProtoMessage()    {}
func (*VariArbitrageLimitTimeLineNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{62}
}
func (m *VariArbitrageLimitTimeLineNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VariArbitrageLimitTimeLineNode.Unmarshal(m, b)
}
func (m *VariArbitrageLimitTimeLineNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VariArbitrageLimitTimeLineNode.Marshal(b, m, deterministic)
}
func (dst *VariArbitrageLimitTimeLineNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariArbitrageLimitTimeLineNode.Merge(dst, src)
}
func (m *VariArbitrageLimitTimeLineNode) XXX_Size() int {
	return xxx_messageInfo_VariArbitrageLimitTimeLineNode.Size(m)
}
func (m *VariArbitrageLimitTimeLineNode) XXX_DiscardUnknown() {
	xxx_messageInfo_VariArbitrageLimitTimeLineNode.DiscardUnknown(m)
}

var xxx_messageInfo_VariArbitrageLimitTimeLineNode proto.InternalMessageInfo

func (m *VariArbitrageLimitTimeLineNode) GetTiemLineNodeType() VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum {
	if m != nil {
		return m.TiemLineNodeType
	}
	return VariArbitrageLimitTimeLineNode_Delivery_Month
}

func (m *VariArbitrageLimitTimeLineNode) GetDay() uint32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *VariArbitrageLimitTimeLineNode) GetType() VariArbitrageLimitTimeLineNode_LimitTypeEnum {
	if m != nil {
		return m.Type
	}
	return VariArbitrageLimitTimeLineNode_CzceDelive
}

type VariArbitrageLimitSetting struct {
	PackFlag                        uint32                                           `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag                      uint32                                           `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	ExchCode                        []byte                                           `protobuf:"bytes,3,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode                        []byte                                           `protobuf:"bytes,4,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	StatisticsDateType              VariArbitrageLimitSetting_StatisticsDateTypeEnum `protobuf:"varint,5,opt,name=statisticsDateType,enum=riskmonitorserver.VariArbitrageLimitSetting_StatisticsDateTypeEnum" json:"statisticsDateType,omitempty"`
	VariArbitrageLimitTimeLineNodes []*VariArbitrageLimitTimeLineNode                `protobuf:"bytes,6,rep,name=VariArbitrageLimitTimeLineNodes" json:"VariArbitrageLimitTimeLineNodes,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}                                         `json:"-"`
	XXX_unrecognized                []byte                                           `json:"-"`
	XXX_sizecache                   int32                                            `json:"-"`
}

func (m *VariArbitrageLimitSetting) Reset()         { *m = VariArbitrageLimitSetting{} }
func (m *VariArbitrageLimitSetting) String() string { return proto.CompactTextString(m) }
func (*VariArbitrageLimitSetting) ProtoMessage()    {}
func (*VariArbitrageLimitSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_5c5ac32ac9cad650, []int{63}
}
func (m *VariArbitrageLimitSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VariArbitrageLimitSetting.Unmarshal(m, b)
}
func (m *VariArbitrageLimitSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VariArbitrageLimitSetting.Marshal(b, m, deterministic)
}
func (dst *VariArbitrageLimitSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariArbitrageLimitSetting.Merge(dst, src)
}
func (m *VariArbitrageLimitSetting) XXX_Size() int {
	return xxx_messageInfo_VariArbitrageLimitSetting.Size(m)
}
func (m *VariArbitrageLimitSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_VariArbitrageLimitSetting.DiscardUnknown(m)
}

var xxx_messageInfo_VariArbitrageLimitSetting proto.InternalMessageInfo

func (m *VariArbitrageLimitSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *VariArbitrageLimitSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *VariArbitrageLimitSetting) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *VariArbitrageLimitSetting) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *VariArbitrageLimitSetting) GetStatisticsDateType() VariArbitrageLimitSetting_StatisticsDateTypeEnum {
	if m != nil {
		return m.StatisticsDateType
	}
	return VariArbitrageLimitSetting_Trade
}

func (m *VariArbitrageLimitSetting) GetVariArbitrageLimitTimeLineNodes() []*VariArbitrageLimitTimeLineNode {
	if m != nil {
		return m.VariArbitrageLimitTimeLineNodes
	}
	return nil
}

func init() {
	proto.RegisterType((*HeartBeat)(nil), "riskmonitorserver.HeartBeat")
	proto.RegisterType((*SubscribeReq)(nil), "riskmonitorserver.SubscribeReq")
	proto.RegisterType((*QryReq)(nil), "riskmonitorserver.QryReq")
	proto.RegisterType((*RspInfo)(nil), "riskmonitorserver.RspInfo")
	proto.RegisterType((*SettingValueField)(nil), "riskmonitorserver.SettingValueField")
	proto.RegisterType((*QryHoldCustsByContractReq)(nil), "riskmonitorserver.QryHoldCustsByContractReq")
	proto.RegisterType((*QryHoldCustsByContractRsp)(nil), "riskmonitorserver.QryHoldCustsByContractRsp")
	proto.RegisterType((*QryTradeCalendarReq)(nil), "riskmonitorserver.QryTradeCalendarReq")
	proto.RegisterType((*QryTradeCalendarRsp)(nil), "riskmonitorserver.QryTradeCalendarRsp")
	proto.RegisterType((*QuoteMonRtn)(nil), "riskmonitorserver.QuoteMonRtn")
	proto.RegisterType((*CustRiskRtn)(nil), "riskmonitorserver.CustRiskRtn")
	proto.RegisterType((*CustHoldRtn)(nil), "riskmonitorserver.CustHoldRtn")
	proto.RegisterType((*CustGroupHoldRtn)(nil), "riskmonitorserver.CustGroupHoldRtn")
	proto.RegisterType((*NearDediveHoldRtn)(nil), "riskmonitorserver.NearDediveHoldRtn")
	proto.RegisterType((*ProuctGroupRiskRtn)(nil), "riskmonitorserver.ProuctGroupRiskRtn")
	proto.RegisterType((*QryCustSimpleInfoReq)(nil), "riskmonitorserver.QryCustSimpleInfoReq")
	proto.RegisterType((*QryCustSimpleInfoRsp)(nil), "riskmonitorserver.QryCustSimpleInfoRsp")
	proto.RegisterType((*QryRealFundReq)(nil), "riskmonitorserver.QryRealFundReq")
	proto.RegisterType((*QryRealFundRsp)(nil), "riskmonitorserver.QryRealFundRsp")
	proto.RegisterType((*TunnelRealFundRtn)(nil), "riskmonitorserver.TunnelRealFundRtn")
	proto.RegisterType((*CorpHoldMonRtn)(nil), "riskmonitorserver.CorpHoldMonRtn")
	proto.RegisterType((*QryCustHoldReq)(nil), "riskmonitorserver.QryCustHoldReq")
	proto.RegisterType((*QryCustHoldRsp)(nil), "riskmonitorserver.QryCustHoldRsp")
	proto.RegisterType((*QrySingleCustEntrustReq)(nil), "riskmonitorserver.QrySingleCustEntrustReq")
	proto.RegisterType((*QrySingleCustEntrustRsp)(nil), "riskmonitorserver.QrySingleCustEntrustRsp")
	proto.RegisterType((*QryExchVariReq)(nil), "riskmonitorserver.QryExchVariReq")
	proto.RegisterType((*QryExchVariRsp)(nil), "riskmonitorserver.QryExchVariRsp")
	proto.RegisterType((*QryContractReq)(nil), "riskmonitorserver.QryContractReq")
	proto.RegisterType((*QryContractRsp)(nil), "riskmonitorserver.QryContractRsp")
	proto.RegisterType((*ContrRangeField)(nil), "riskmonitorserver.ContrRangeField")
	proto.RegisterType((*QuoteMonitorSetting)(nil), "riskmonitorserver.QuoteMonitorSetting")
	proto.RegisterType((*RiskContrLevelSetting)(nil), "riskmonitorserver.RiskContrLevelSetting")
	proto.RegisterType((*ContrGroupSetting)(nil), "riskmonitorserver.ContrGroupSetting")
	proto.RegisterType((*ProductGroupMonitorSetting)(nil), "riskmonitorserver.ProductGroupMonitorSetting")
	proto.RegisterType((*CustRiskMonitorSetting)(nil), "riskmonitorserver.CustRiskMonitorSetting")
	proto.RegisterType((*CustGroupSetting)(nil), "riskmonitorserver.CustGroupSetting")
	proto.RegisterType((*CorpHoldMonitorSetting)(nil), "riskmonitorserver.CorpHoldMonitorSetting")
	proto.RegisterType((*QryForceCustInfoReq)(nil), "riskmonitorserver.QryForceCustInfoReq")
	proto.RegisterType((*ForceCustInfoRsp)(nil), "riskmonitorserver.ForceCustInfoRsp")
	proto.RegisterType((*CustHoldMonitorSetting)(nil), "riskmonitorserver.CustHoldMonitorSetting")
	proto.RegisterType((*CustGroupHoldMonitorSetting)(nil), "riskmonitorserver.CustGroupHoldMonitorSetting")
	proto.RegisterType((*NearDediveHoldMonitorSetting)(nil), "riskmonitorserver.NearDediveHoldMonitorSetting")
	proto.RegisterType((*HoldMaxLimit)(nil), "riskmonitorserver.HoldMaxLimit")
	proto.RegisterType((*HoldLimitDateNode)(nil), "riskmonitorserver.HoldLimitDateNode")
	proto.RegisterType((*HoldLimitTimeLine)(nil), "riskmonitorserver.HoldLimitTimeLine")
	proto.RegisterType((*MarginLimitDateNode)(nil), "riskmonitorserver.MarginLimitDateNode")
	proto.RegisterType((*MarginLimitHoldNode)(nil), "riskmonitorserver.MarginLimitHoldNode")
	proto.RegisterType((*MarginLimitTimeLine)(nil), "riskmonitorserver.MarginLimitTimeLine")
	proto.RegisterType((*HoldLimitSetting)(nil), "riskmonitorserver.HoldLimitSetting")
	proto.RegisterType((*MarginLimitSetting)(nil), "riskmonitorserver.MarginLimitSetting")
	proto.RegisterType((*ArbitrageLimitDateNode)(nil), "riskmonitorserver.ArbitrageLimitDateNode")
	proto.RegisterType((*ArbitrageLimitTimeLine)(nil), "riskmonitorserver.ArbitrageLimitTimeLine")
	proto.RegisterType((*ArbitrageLimitSetting)(nil), "riskmonitorserver.ArbitrageLimitSetting")
	proto.RegisterType((*EarlyWrningTimeSetting)(nil), "riskmonitorserver.EarlyWrningTimeSetting")
	proto.RegisterType((*EarlyWrningValueSetting)(nil), "riskmonitorserver.EarlyWrningValueSetting")
	proto.RegisterType((*NearDediveSetting)(nil), "riskmonitorserver.NearDediveSetting")
	proto.RegisterType((*VariationObject)(nil), "riskmonitorserver.VariationObject")
	proto.RegisterType((*VariMarginLimitTimeLineNode)(nil), "riskmonitorserver.VariMarginLimitTimeLineNode")
	proto.RegisterType((*VariMarginLimitSetting)(nil), "riskmonitorserver.VariMarginLimitSetting")
	proto.RegisterType((*ConditionHoldLimitObject)(nil), "riskmonitorserver.ConditionHoldLimitObject")
	proto.RegisterType((*VariHoldLimitTimeLineNode)(nil), "riskmonitorserver.VariHoldLimitTimeLineNode")
	proto.RegisterType((*VariHoldLimitSetting)(nil), "riskmonitorserver.VariHoldLimitSetting")
	proto.RegisterType((*VariArbitrageLimitTimeLineNode)(nil), "riskmonitorserver.VariArbitrageLimitTimeLineNode")
	proto.RegisterType((*VariArbitrageLimitSetting)(nil), "riskmonitorserver.VariArbitrageLimitSetting")
	proto.RegisterEnum("riskmonitorserver.CustHoldRtn_HoldType", CustHoldRtn_HoldType_name, CustHoldRtn_HoldType_value)
	proto.RegisterEnum("riskmonitorserver.CustGroupHoldRtn_HoldType", CustGroupHoldRtn_HoldType_name, CustGroupHoldRtn_HoldType_value)
	proto.RegisterEnum("riskmonitorserver.QryCustSimpleInfoRsp_ClientType", QryCustSimpleInfoRsp_ClientType_name, QryCustSimpleInfoRsp_ClientType_value)
	proto.RegisterEnum("riskmonitorserver.QuoteMonitorSetting_QuoteType", QuoteMonitorSetting_QuoteType_name, QuoteMonitorSetting_QuoteType_value)
	proto.RegisterEnum("riskmonitorserver.HoldMaxLimit_HoldLimitConditionType", HoldMaxLimit_HoldLimitConditionType_name, HoldMaxLimit_HoldLimitConditionType_value)
	proto.RegisterEnum("riskmonitorserver.HoldMaxLimit_QtyLimitType", HoldMaxLimit_QtyLimitType_name, HoldMaxLimit_QtyLimitType_value)
	proto.RegisterEnum("riskmonitorserver.HoldMaxLimit_CompareFlag", HoldMaxLimit_CompareFlag_name, HoldMaxLimit_CompareFlag_value)
	proto.RegisterEnum("riskmonitorserver.ArbitrageLimitDateNode_LimitType", ArbitrageLimitDateNode_LimitType_name, ArbitrageLimitDateNode_LimitType_value)
	proto.RegisterEnum("riskmonitorserver.NearDediveSetting_CloseDateType", NearDediveSetting_CloseDateType_name, NearDediveSetting_CloseDateType_value)
	proto.RegisterEnum("riskmonitorserver.NearDediveSetting_ClientType", NearDediveSetting_ClientType_name, NearDediveSetting_ClientType_value)
	proto.RegisterEnum("riskmonitorserver.VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum", VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum_name, VariMarginLimitTimeLineNode_TimeLineNodeTypeEnum_value)
	proto.RegisterEnum("riskmonitorserver.VariMarginLimitSetting_StatisticsDateTypeEnum", VariMarginLimitSetting_StatisticsDateTypeEnum_name, VariMarginLimitSetting_StatisticsDateTypeEnum_value)
	proto.RegisterEnum("riskmonitorserver.VariMarginLimitSetting_PositionVariationMarginTypeEnum", VariMarginLimitSetting_PositionVariationMarginTypeEnum_name, VariMarginLimitSetting_PositionVariationMarginTypeEnum_value)
	proto.RegisterEnum("riskmonitorserver.ConditionHoldLimitObject_CompareFlagEnum", ConditionHoldLimitObject_CompareFlagEnum_name, ConditionHoldLimitObject_CompareFlagEnum_value)
	proto.RegisterEnum("riskmonitorserver.ConditionHoldLimitObject_QtyLimitTypeEnum", ConditionHoldLimitObject_QtyLimitTypeEnum_name, ConditionHoldLimitObject_QtyLimitTypeEnum_value)
	proto.RegisterEnum("riskmonitorserver.VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum", VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum_name, VariHoldLimitTimeLineNode_TimeLineNodeTypeEnum_value)
	proto.RegisterEnum("riskmonitorserver.VariHoldLimitTimeLineNode_HoldLimitConditionTypeEnum", VariHoldLimitTimeLineNode_HoldLimitConditionTypeEnum_name, VariHoldLimitTimeLineNode_HoldLimitConditionTypeEnum_value)
	proto.RegisterEnum("riskmonitorserver.VariHoldLimitSetting_StatisticsDateTypeEnum", VariHoldLimitSetting_StatisticsDateTypeEnum_name, VariHoldLimitSetting_StatisticsDateTypeEnum_value)
	proto.RegisterEnum("riskmonitorserver.VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum", VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum_name, VariArbitrageLimitTimeLineNode_TimeLineNodeTypeEnum_value)
	proto.RegisterEnum("riskmonitorserver.VariArbitrageLimitTimeLineNode_LimitTypeEnum", VariArbitrageLimitTimeLineNode_LimitTypeEnum_name, VariArbitrageLimitTimeLineNode_LimitTypeEnum_value)
	proto.RegisterEnum("riskmonitorserver.VariArbitrageLimitSetting_StatisticsDateTypeEnum", VariArbitrageLimitSetting_StatisticsDateTypeEnum_name, VariArbitrageLimitSetting_StatisticsDateTypeEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RiskMonitorServer service

type RiskMonitorServerClient interface {
	// 订阅监控类请求
	// 订阅通道资金
	SubscribeTunnelRealFund(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeTunnelRealFundClient, error)
	// 订阅公司持仓监控
	SubscribeCorpHoldMon(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeCorpHoldMonClient, error)
	// 订阅行情监控
	SubscribeQuoteMon(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeQuoteMonClient, error)
	// 订阅风险客户推送
	SubscribeCustRisk(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeCustRiskClient, error)
	// 订阅客户持仓推送
	SubscribeCustHold(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeCustHoldClient, error)
	// 订阅客户组持仓推送
	SubscribeCustGroupHold(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeCustGroupHoldClient, error)
	// 订阅临近交易日持仓推送
	SubscribeNearDediveHold(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeNearDediveHoldClient, error)
	// 订阅商品组风险推送
	SubscribeProuctGroupRisk(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeProuctGroupRiskClient, error)
}

type riskMonitorServerClient struct {
	cc *grpc.ClientConn
}

func NewRiskMonitorServerClient(cc *grpc.ClientConn) RiskMonitorServerClient {
	return &riskMonitorServerClient{cc}
}

func (c *riskMonitorServerClient) SubscribeTunnelRealFund(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeTunnelRealFundClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RiskMonitorServer_serviceDesc.Streams[0], c.cc, "/riskmonitorserver.RiskMonitorServer/SubscribeTunnelRealFund", opts...)
	if err != nil {
		return nil, err
	}
	x := &riskMonitorServerSubscribeTunnelRealFundClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RiskMonitorServer_SubscribeTunnelRealFundClient interface {
	Recv() (*TunnelRealFundRtn, error)
	grpc.ClientStream
}

type riskMonitorServerSubscribeTunnelRealFundClient struct {
	grpc.ClientStream
}

func (x *riskMonitorServerSubscribeTunnelRealFundClient) Recv() (*TunnelRealFundRtn, error) {
	m := new(TunnelRealFundRtn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *riskMonitorServerClient) SubscribeCorpHoldMon(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeCorpHoldMonClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RiskMonitorServer_serviceDesc.Streams[1], c.cc, "/riskmonitorserver.RiskMonitorServer/SubscribeCorpHoldMon", opts...)
	if err != nil {
		return nil, err
	}
	x := &riskMonitorServerSubscribeCorpHoldMonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RiskMonitorServer_SubscribeCorpHoldMonClient interface {
	Recv() (*CorpHoldMonRtn, error)
	grpc.ClientStream
}

type riskMonitorServerSubscribeCorpHoldMonClient struct {
	grpc.ClientStream
}

func (x *riskMonitorServerSubscribeCorpHoldMonClient) Recv() (*CorpHoldMonRtn, error) {
	m := new(CorpHoldMonRtn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *riskMonitorServerClient) SubscribeQuoteMon(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeQuoteMonClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RiskMonitorServer_serviceDesc.Streams[2], c.cc, "/riskmonitorserver.RiskMonitorServer/SubscribeQuoteMon", opts...)
	if err != nil {
		return nil, err
	}
	x := &riskMonitorServerSubscribeQuoteMonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RiskMonitorServer_SubscribeQuoteMonClient interface {
	Recv() (*QuoteMonRtn, error)
	grpc.ClientStream
}

type riskMonitorServerSubscribeQuoteMonClient struct {
	grpc.ClientStream
}

func (x *riskMonitorServerSubscribeQuoteMonClient) Recv() (*QuoteMonRtn, error) {
	m := new(QuoteMonRtn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *riskMonitorServerClient) SubscribeCustRisk(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeCustRiskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RiskMonitorServer_serviceDesc.Streams[3], c.cc, "/riskmonitorserver.RiskMonitorServer/SubscribeCustRisk", opts...)
	if err != nil {
		return nil, err
	}
	x := &riskMonitorServerSubscribeCustRiskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RiskMonitorServer_SubscribeCustRiskClient interface {
	Recv() (*CustRiskRtn, error)
	grpc.ClientStream
}

type riskMonitorServerSubscribeCustRiskClient struct {
	grpc.ClientStream
}

func (x *riskMonitorServerSubscribeCustRiskClient) Recv() (*CustRiskRtn, error) {
	m := new(CustRiskRtn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *riskMonitorServerClient) SubscribeCustHold(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeCustHoldClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RiskMonitorServer_serviceDesc.Streams[4], c.cc, "/riskmonitorserver.RiskMonitorServer/SubscribeCustHold", opts...)
	if err != nil {
		return nil, err
	}
	x := &riskMonitorServerSubscribeCustHoldClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RiskMonitorServer_SubscribeCustHoldClient interface {
	Recv() (*CustHoldRtn, error)
	grpc.ClientStream
}

type riskMonitorServerSubscribeCustHoldClient struct {
	grpc.ClientStream
}

func (x *riskMonitorServerSubscribeCustHoldClient) Recv() (*CustHoldRtn, error) {
	m := new(CustHoldRtn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *riskMonitorServerClient) SubscribeCustGroupHold(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeCustGroupHoldClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RiskMonitorServer_serviceDesc.Streams[5], c.cc, "/riskmonitorserver.RiskMonitorServer/SubscribeCustGroupHold", opts...)
	if err != nil {
		return nil, err
	}
	x := &riskMonitorServerSubscribeCustGroupHoldClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RiskMonitorServer_SubscribeCustGroupHoldClient interface {
	Recv() (*CustGroupHoldRtn, error)
	grpc.ClientStream
}

type riskMonitorServerSubscribeCustGroupHoldClient struct {
	grpc.ClientStream
}

func (x *riskMonitorServerSubscribeCustGroupHoldClient) Recv() (*CustGroupHoldRtn, error) {
	m := new(CustGroupHoldRtn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *riskMonitorServerClient) SubscribeNearDediveHold(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeNearDediveHoldClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RiskMonitorServer_serviceDesc.Streams[6], c.cc, "/riskmonitorserver.RiskMonitorServer/SubscribeNearDediveHold", opts...)
	if err != nil {
		return nil, err
	}
	x := &riskMonitorServerSubscribeNearDediveHoldClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RiskMonitorServer_SubscribeNearDediveHoldClient interface {
	Recv() (*NearDediveHoldRtn, error)
	grpc.ClientStream
}

type riskMonitorServerSubscribeNearDediveHoldClient struct {
	grpc.ClientStream
}

func (x *riskMonitorServerSubscribeNearDediveHoldClient) Recv() (*NearDediveHoldRtn, error) {
	m := new(NearDediveHoldRtn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *riskMonitorServerClient) SubscribeProuctGroupRisk(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeProuctGroupRiskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RiskMonitorServer_serviceDesc.Streams[7], c.cc, "/riskmonitorserver.RiskMonitorServer/SubscribeProuctGroupRisk", opts...)
	if err != nil {
		return nil, err
	}
	x := &riskMonitorServerSubscribeProuctGroupRiskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RiskMonitorServer_SubscribeProuctGroupRiskClient interface {
	Recv() (*ProuctGroupRiskRtn, error)
	grpc.ClientStream
}

type riskMonitorServerSubscribeProuctGroupRiskClient struct {
	grpc.ClientStream
}

func (x *riskMonitorServerSubscribeProuctGroupRiskClient) Recv() (*ProuctGroupRiskRtn, error) {
	m := new(ProuctGroupRiskRtn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RiskMonitorServer service

type RiskMonitorServerServer interface {
	// 订阅监控类请求
	// 订阅通道资金
	SubscribeTunnelRealFund(*SubscribeReq, RiskMonitorServer_SubscribeTunnelRealFundServer) error
	// 订阅公司持仓监控
	SubscribeCorpHoldMon(*SubscribeReq, RiskMonitorServer_SubscribeCorpHoldMonServer) error
	// 订阅行情监控
	SubscribeQuoteMon(*SubscribeReq, RiskMonitorServer_SubscribeQuoteMonServer) error
	// 订阅风险客户推送
	SubscribeCustRisk(*SubscribeReq, RiskMonitorServer_SubscribeCustRiskServer) error
	// 订阅客户持仓推送
	SubscribeCustHold(*SubscribeReq, RiskMonitorServer_SubscribeCustHoldServer) error
	// 订阅客户组持仓推送
	SubscribeCustGroupHold(*SubscribeReq, RiskMonitorServer_SubscribeCustGroupHoldServer) error
	// 订阅临近交易日持仓推送
	SubscribeNearDediveHold(*SubscribeReq, RiskMonitorServer_SubscribeNearDediveHoldServer) error
	// 订阅商品组风险推送
	SubscribeProuctGroupRisk(*SubscribeReq, RiskMonitorServer_SubscribeProuctGroupRiskServer) error
}

func RegisterRiskMonitorServerServer(s *grpc.Server, srv RiskMonitorServerServer) {
	s.RegisterService(&_RiskMonitorServer_serviceDesc, srv)
}

func _RiskMonitorServer_SubscribeTunnelRealFund_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RiskMonitorServerServer).SubscribeTunnelRealFund(m, &riskMonitorServerSubscribeTunnelRealFundServer{stream})
}

type RiskMonitorServer_SubscribeTunnelRealFundServer interface {
	Send(*TunnelRealFundRtn) error
	grpc.ServerStream
}

type riskMonitorServerSubscribeTunnelRealFundServer struct {
	grpc.ServerStream
}

func (x *riskMonitorServerSubscribeTunnelRealFundServer) Send(m *TunnelRealFundRtn) error {
	return x.ServerStream.SendMsg(m)
}

func _RiskMonitorServer_SubscribeCorpHoldMon_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RiskMonitorServerServer).SubscribeCorpHoldMon(m, &riskMonitorServerSubscribeCorpHoldMonServer{stream})
}

type RiskMonitorServer_SubscribeCorpHoldMonServer interface {
	Send(*CorpHoldMonRtn) error
	grpc.ServerStream
}

type riskMonitorServerSubscribeCorpHoldMonServer struct {
	grpc.ServerStream
}

func (x *riskMonitorServerSubscribeCorpHoldMonServer) Send(m *CorpHoldMonRtn) error {
	return x.ServerStream.SendMsg(m)
}

func _RiskMonitorServer_SubscribeQuoteMon_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RiskMonitorServerServer).SubscribeQuoteMon(m, &riskMonitorServerSubscribeQuoteMonServer{stream})
}

type RiskMonitorServer_SubscribeQuoteMonServer interface {
	Send(*QuoteMonRtn) error
	grpc.ServerStream
}

type riskMonitorServerSubscribeQuoteMonServer struct {
	grpc.ServerStream
}

func (x *riskMonitorServerSubscribeQuoteMonServer) Send(m *QuoteMonRtn) error {
	return x.ServerStream.SendMsg(m)
}

func _RiskMonitorServer_SubscribeCustRisk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RiskMonitorServerServer).SubscribeCustRisk(m, &riskMonitorServerSubscribeCustRiskServer{stream})
}

type RiskMonitorServer_SubscribeCustRiskServer interface {
	Send(*CustRiskRtn) error
	grpc.ServerStream
}

type riskMonitorServerSubscribeCustRiskServer struct {
	grpc.ServerStream
}

func (x *riskMonitorServerSubscribeCustRiskServer) Send(m *CustRiskRtn) error {
	return x.ServerStream.SendMsg(m)
}

func _RiskMonitorServer_SubscribeCustHold_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RiskMonitorServerServer).SubscribeCustHold(m, &riskMonitorServerSubscribeCustHoldServer{stream})
}

type RiskMonitorServer_SubscribeCustHoldServer interface {
	Send(*CustHoldRtn) error
	grpc.ServerStream
}

type riskMonitorServerSubscribeCustHoldServer struct {
	grpc.ServerStream
}

func (x *riskMonitorServerSubscribeCustHoldServer) Send(m *CustHoldRtn) error {
	return x.ServerStream.SendMsg(m)
}

func _RiskMonitorServer_SubscribeCustGroupHold_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RiskMonitorServerServer).SubscribeCustGroupHold(m, &riskMonitorServerSubscribeCustGroupHoldServer{stream})
}

type RiskMonitorServer_SubscribeCustGroupHoldServer interface {
	Send(*CustGroupHoldRtn) error
	grpc.ServerStream
}

type riskMonitorServerSubscribeCustGroupHoldServer struct {
	grpc.ServerStream
}

func (x *riskMonitorServerSubscribeCustGroupHoldServer) Send(m *CustGroupHoldRtn) error {
	return x.ServerStream.SendMsg(m)
}

func _RiskMonitorServer_SubscribeNearDediveHold_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RiskMonitorServerServer).SubscribeNearDediveHold(m, &riskMonitorServerSubscribeNearDediveHoldServer{stream})
}

type RiskMonitorServer_SubscribeNearDediveHoldServer interface {
	Send(*NearDediveHoldRtn) error
	grpc.ServerStream
}

type riskMonitorServerSubscribeNearDediveHoldServer struct {
	grpc.ServerStream
}

func (x *riskMonitorServerSubscribeNearDediveHoldServer) Send(m *NearDediveHoldRtn) error {
	return x.ServerStream.SendMsg(m)
}

func _RiskMonitorServer_SubscribeProuctGroupRisk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RiskMonitorServerServer).SubscribeProuctGroupRisk(m, &riskMonitorServerSubscribeProuctGroupRiskServer{stream})
}

type RiskMonitorServer_SubscribeProuctGroupRiskServer interface {
	Send(*ProuctGroupRiskRtn) error
	grpc.ServerStream
}

type riskMonitorServerSubscribeProuctGroupRiskServer struct {
	grpc.ServerStream
}

func (x *riskMonitorServerSubscribeProuctGroupRiskServer) Send(m *ProuctGroupRiskRtn) error {
	return x.ServerStream.SendMsg(m)
}

var _RiskMonitorServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "riskmonitorserver.RiskMonitorServer",
	HandlerType: (*RiskMonitorServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTunnelRealFund",
			Handler:       _RiskMonitorServer_SubscribeTunnelRealFund_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCorpHoldMon",
			Handler:       _RiskMonitorServer_SubscribeCorpHoldMon_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeQuoteMon",
			Handler:       _RiskMonitorServer_SubscribeQuoteMon_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCustRisk",
			Handler:       _RiskMonitorServer_SubscribeCustRisk_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCustHold",
			Handler:       _RiskMonitorServer_SubscribeCustHold_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCustGroupHold",
			Handler:       _RiskMonitorServer_SubscribeCustGroupHold_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeNearDediveHold",
			Handler:       _RiskMonitorServer_SubscribeNearDediveHold_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeProuctGroupRisk",
			Handler:       _RiskMonitorServer_SubscribeProuctGroupRisk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "risk_monitor_server.proto",
}

func init() {
	proto.RegisterFile("risk_monitor_server.proto", fileDescriptor_risk_monitor_server_5c5ac32ac9cad650)
}

var fileDescriptor_risk_monitor_server_5c5ac32ac9cad650 = []byte{
	// 6857 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x4b, 0x6f, 0x1c, 0x49,
	0x72, 0xb0, 0x9a, 0xef, 0x8e, 0x7e, 0xb2, 0x44, 0x51, 0x2d, 0x69, 0x34, 0x92, 0x5a, 0x2f, 0xce,
	0x48, 0xab, 0x11, 0xa9, 0xd9, 0xc7, 0xf7, 0xed, 0x7e, 0xbb, 0x43, 0x91, 0xd2, 0x48, 0xdf, 0x47,
	0x91, 0x52, 0x35, 0x77, 0xf6, 0x33, 0x0c, 0x6f, 0xa1, 0xd8, 0x9d, 0x24, 0x6b, 0x55, 0x5d, 0xd5,
	0xaa, 0xaa, 0xa6, 0xd4, 0x63, 0x18, 0x3e, 0xfa, 0x60, 0xc3, 0x3e, 0xfb, 0x62, 0x63, 0x77, 0x01,
	0xfb, 0xee, 0x93, 0x0d, 0xf8, 0x07, 0x18, 0x86, 0x0d, 0x18, 0x5e, 0x63, 0xb1, 0x36, 0x0c, 0xf8,
	0x6c, 0x78, 0x7d, 0xb3, 0x7d, 0x34, 0x8c, 0x88, 0xc8, 0xac, 0xca, 0x7a, 0x90, 0x4d, 0x71, 0x35,
	0xd2, 0xd8, 0xd8, 0x93, 0x58, 0x91, 0x51, 0x91, 0x99, 0xf1, 0xca, 0x88, 0xc8, 0xa8, 0x16, 0x9c,
	0x0b, 0x9c, 0xf0, 0xb9, 0xd5, 0xf7, 0x3d, 0x27, 0xf2, 0x03, 0x2b, 0x14, 0xc1, 0x81, 0x08, 0xee,
	0x0c, 0x02, 0x3f, 0xf2, 0x8d, 0x79, 0x1c, 0x92, 0x23, 0x3c, 0xd0, 0xae, 0x40, 0xf9, 0x91, 0xb0,
	0x83, 0xe8, 0xbe, 0xb0, 0xa3, 0x76, 0x1d, 0xaa, 0x9d, 0xe1, 0x4e, 0xd8, 0x0d, 0x9c, 0x1d, 0x61,
	0x8a, 0x17, 0xed, 0x39, 0x98, 0x79, 0x16, 0x8c, 0xf0, 0xaf, 0xaf, 0xc3, 0xac, 0x19, 0x0e, 0x1e,
	0x7b, 0xbb, 0xbe, 0xb1, 0x00, 0xd3, 0x22, 0x08, 0x9c, 0x5e, 0xab, 0x74, 0xb9, 0xb4, 0x54, 0x33,
	0xf9, 0xc1, 0x58, 0x84, 0x19, 0x11, 0x04, 0xfd, 0x70, 0xaf, 0x35, 0x71, 0xb9, 0xb4, 0x54, 0x35,
	0xe5, 0x53, 0xfb, 0x57, 0x60, 0xbe, 0x23, 0xa2, 0xc8, 0xf1, 0xf6, 0x3e, 0xb3, 0xdd, 0xa1, 0x78,
	0xe8, 0x08, 0xb7, 0x67, 0x18, 0x30, 0xe5, 0xd9, 0x7d, 0x41, 0x14, 0xaa, 0x26, 0xfd, 0x6d, 0x9c,
	0x87, 0x39, 0x7f, 0x20, 0x02, 0x3b, 0xf2, 0x03, 0x22, 0x51, 0x33, 0xe3, 0x67, 0x9c, 0xf2, 0x00,
	0xdf, 0x6e, 0x4d, 0xd2, 0x0b, 0xfc, 0xd0, 0xfe, 0x04, 0xce, 0x3d, 0x0b, 0x46, 0x8f, 0x7c, 0xb7,
	0xb7, 0x36, 0x0c, 0xa3, 0xf0, 0xfe, 0x68, 0xcd, 0xf7, 0xa2, 0xc0, 0xee, 0x46, 0xa6, 0x78, 0x61,
	0x5c, 0x85, 0x5a, 0x57, 0x3e, 0x5a, 0x5d, 0xbf, 0xa7, 0xe6, 0xaa, 0x2a, 0xe0, 0x9a, 0xdf, 0x13,
	0x6d, 0xf7, 0x50, 0x0a, 0xe1, 0xc0, 0x38, 0x07, 0x73, 0xdd, 0x61, 0x18, 0x59, 0x9e, 0x1f, 0xb6,
	0x4a, 0x97, 0x27, 0x97, 0xaa, 0xe6, 0x2c, 0x3e, 0x6f, 0xfa, 0xa1, 0xf1, 0x31, 0xcc, 0x06, 0xcc,
	0x0d, 0x5a, 0x6a, 0x65, 0xe5, 0xfc, 0x9d, 0x1c, 0x67, 0xef, 0x48, 0x7e, 0x99, 0x0a, 0xb5, 0xfd,
	0x01, 0x9c, 0x7e, 0x16, 0x8c, 0xb6, 0x03, 0xbb, 0x27, 0xd6, 0x6c, 0x57, 0x78, 0x3d, 0x3b, 0xc0,
	0x95, 0x1a, 0x30, 0x35, 0x12, 0x76, 0xa0, 0x98, 0x81, 0x7f, 0xb7, 0xf7, 0x0a, 0x50, 0xc3, 0x01,
	0xf2, 0xa8, 0x2b, 0x1f, 0x25, 0x7a, 0xfc, 0x7c, 0xc2, 0x35, 0xfd, 0xeb, 0x14, 0x54, 0x9e, 0x0d,
	0xfd, 0x48, 0x3c, 0xf1, 0x3d, 0x33, 0xf2, 0x8c, 0x0b, 0x50, 0x1e, 0xd8, 0xdd, 0xe7, 0xd6, 0xae,
	0x6b, 0xef, 0x49, 0x01, 0xcf, 0x21, 0xe0, 0xa1, 0x6b, 0xef, 0x19, 0x97, 0xa0, 0x62, 0x77, 0x23,
	0xc7, 0xf7, 0x78, 0x98, 0xa5, 0x04, 0x0c, 0x22, 0x84, 0x8b, 0x00, 0x4a, 0xef, 0x3c, 0x5f, 0x0a,
	0xab, 0x2c, 0x21, 0x9b, 0xbe, 0x71, 0x05, 0xaa, 0x61, 0xdf, 0x0e, 0x9e, 0x0b, 0x29, 0x92, 0x29,
	0x42, 0xa8, 0x48, 0x18, 0x4a, 0x04, 0x99, 0x1e, 0x8a, 0x2e, 0x0f, 0x4f, 0xd3, 0xf0, 0x6c, 0x28,
	0xba, 0x34, 0x94, 0x93, 0xe8, 0x4c, 0x5e, 0xa2, 0xb8, 0x82, 0x08, 0xb9, 0x66, 0x45, 0xa3, 0x81,
	0x68, 0xcd, 0xf2, 0x0a, 0x08, 0xb2, 0x3d, 0x1a, 0xd0, 0xb0, 0x6b, 0x87, 0x91, 0x35, 0x08, 0x9c,
	0xae, 0x68, 0xcd, 0x5d, 0x2e, 0x2d, 0x95, 0xcc, 0x32, 0x42, 0x9e, 0x22, 0xc0, 0xb8, 0x0b, 0x0b,
	0x83, 0x40, 0x58, 0xa1, 0x88, 0x22, 0x57, 0xf4, 0x85, 0xa7, 0x10, 0xcb, 0x84, 0x68, 0x0c, 0x02,
	0xd1, 0x89, 0x87, 0xf8, 0x8d, 0x0f, 0xa0, 0x99, 0xc3, 0x06, 0xc2, 0x6e, 0x84, 0x19, 0xd4, 0x6b,
	0x50, 0x0f, 0x76, 0x2d, 0xd7, 0xe9, 0x3b, 0x0a, 0xb1, 0x42, 0x88, 0xd5, 0x60, 0x77, 0x03, 0x81,
	0x8c, 0xd5, 0x84, 0xc9, 0xee, 0xfe, 0x5e, 0xab, 0x4a, 0x43, 0xf8, 0x27, 0xae, 0x99, 0x2c, 0xda,
	0x15, 0x07, 0xc2, 0x6d, 0xd5, 0x2e, 0x97, 0x96, 0xa6, 0xcd, 0x32, 0x42, 0x36, 0x10, 0x80, 0x6c,
	0xf1, 0x07, 0xc2, 0xb3, 0x1c, 0x2f, 0x12, 0x81, 0x08, 0xa3, 0x56, 0x9d, 0xc4, 0x52, 0x45, 0xe0,
	0x63, 0x09, 0x23, 0xc1, 0x38, 0x9e, 0xd5, 0xb7, 0x83, 0x3d, 0xc7, 0x6b, 0x35, 0x78, 0xdf, 0x7d,
	0xc7, 0x7b, 0x42, 0x00, 0x14, 0x0c, 0x0f, 0x59, 0x81, 0x1d, 0x39, 0x7e, 0xab, 0x49, 0x08, 0x15,
	0x86, 0x99, 0x08, 0x42, 0xd9, 0x4b, 0x94, 0x9e, 0xb3, 0xbb, 0xdb, 0x9a, 0x27, 0x0c, 0x60, 0xd0,
	0xba, 0xb3, 0xbb, 0x8b, 0xdb, 0x8b, 0x9c, 0xee, 0x73, 0xde, 0x9a, 0xe5, 0x0d, 0xfb, 0x2d, 0x83,
	0x17, 0x82, 0x50, 0xda, 0xdb, 0xe6, 0xb0, 0xdf, 0xfe, 0x31, 0x40, 0x05, 0x6d, 0xcd, 0x74, 0xc2,
	0xe7, 0x5f, 0xb8, 0xbe, 0x9d, 0x85, 0x59, 0x69, 0xc1, 0x52, 0xd5, 0x66, 0xd8, 0x80, 0xf1, 0x3d,
	0x1a, 0xe8, 0xba, 0x76, 0x18, 0x4a, 0x3d, 0x2b, 0x23, 0x64, 0x0d, 0x01, 0xb8, 0x28, 0x7e, 0x0f,
	0x7d, 0xd4, 0x8c, 0xb4, 0x33, 0x7c, 0x13, 0xfd, 0x14, 0xf2, 0xca, 0xdf, 0x71, 0x5c, 0x61, 0x0d,
	0xf6, 0x7d, 0x4f, 0xe9, 0x58, 0x85, 0x61, 0x4f, 0x11, 0x64, 0xbc, 0x0f, 0xd0, 0x75, 0x1d, 0xe1,
	0x45, 0x7d, 0x54, 0xd3, 0x39, 0x42, 0xd0, 0x20, 0x19, 0x89, 0x96, 0x79, 0xfa, 0x44, 0xa2, 0x57,
	0xa0, 0x4a, 0xc3, 0x3d, 0xb1, 0x17, 0x08, 0x71, 0x57, 0xea, 0x53, 0x05, 0x61, 0xeb, 0x0c, 0xca,
	0xa0, 0x2c, 0x4b, 0x4d, 0xd2, 0x50, 0x96, 0x33, 0x28, 0x2b, 0x52, 0xa3, 0x34, 0x94, 0x95, 0x0c,
	0xca, 0x3d, 0xd2, 0xad, 0x14, 0xca, 0x3d, 0xe3, 0x06, 0x34, 0xc8, 0x60, 0xb4, 0xf5, 0xd6, 0x69,
	0xbd, 0x35, 0x04, 0x9b, 0xf1, 0x9a, 0x2f, 0x41, 0x85, 0xf1, 0x44, 0xdf, 0x8e, 0x35, 0x8c, 0x6c,
	0xcd, 0x24, 0x08, 0x9e, 0x0f, 0x52, 0xfb, 0x58, 0xb9, 0xe4, 0x13, 0xbe, 0xd8, 0x0b, 0xfc, 0x81,
	0x35, 0x08, 0xfc, 0x5d, 0x27, 0x52, 0x7a, 0x85, 0xa0, 0xa7, 0x04, 0x41, 0x84, 0x7d, 0xdf, 0xed,
	0x29, 0x04, 0x83, 0x11, 0x10, 0x94, 0x20, 0x44, 0x7e, 0xcf, 0x1e, 0x59, 0x8e, 0xe7, 0x0f, 0xa3,
	0xd6, 0x69, 0x46, 0x20, 0xd0, 0x63, 0x84, 0xa0, 0x85, 0x04, 0xfe, 0xc8, 0x76, 0x23, 0x85, 0xb2,
	0x20, 0xed, 0x8e, 0x81, 0x8c, 0xd4, 0x86, 0x5a, 0x6f, 0xe4, 0x59, 0x5d, 0x7b, 0x60, 0x05, 0xce,
	0xde, 0x7e, 0xd4, 0x3a, 0xc3, 0xcc, 0xe8, 0x8d, 0xbc, 0x35, 0x7b, 0x60, 0x22, 0x08, 0x67, 0x12,
	0xaf, 0xba, 0xfb, 0xca, 0x8c, 0x16, 0x79, 0x26, 0x04, 0x49, 0x3b, 0xba, 0x08, 0x60, 0x1f, 0xd8,
	0x8e, 0x6b, 0xed, 0x0e, 0xbd, 0x5e, 0xeb, 0x2c, 0x9b, 0x19, 0x41, 0x1e, 0x0e, 0xbd, 0x1e, 0x0e,
	0xfb, 0x03, 0xd2, 0xe7, 0xae, 0x3d, 0x68, 0xb5, 0x78, 0x98, 0x21, 0x6b, 0xf6, 0x00, 0x87, 0x71,
	0x09, 0x34, 0x7d, 0xd8, 0x3a, 0xc7, 0xc3, 0xbd, 0x91, 0x47, 0x93, 0x87, 0xc6, 0x87, 0x30, 0x2f,
	0xdf, 0x46, 0x2c, 0xb9, 0x86, 0xf3, 0xec, 0x6b, 0x78, 0x60, 0x7d, 0xa4, 0x0c, 0xfa, 0x12, 0x54,
	0x76, 0x83, 0xcf, 0x63, 0xac, 0x0b, 0xbc, 0x52, 0x04, 0x25, 0x16, 0x4f, 0x08, 0x92, 0x07, 0xad,
	0xf7, 0x78, 0xb7, 0x08, 0x33, 0x19, 0x64, 0x2c, 0x41, 0x93, 0x76, 0xab, 0x13, 0xba, 0x48, 0x68,
	0x75, 0x84, 0x3f, 0x4c, 0x88, 0xdd, 0x06, 0x83, 0x90, 0xc2, 0x28, 0x70, 0x9e, 0x0b, 0x85, 0xfb,
	0x3e, 0xe1, 0x36, 0x71, 0xa4, 0x43, 0x03, 0x12, 0x3b, 0xd9, 0x87, 0xe7, 0xbf, 0x54, 0xc8, 0x97,
	0xf4, 0x7d, 0x6c, 0xfa, 0x2f, 0x25, 0xee, 0x3d, 0x58, 0xa4, 0x35, 0xe4, 0x5f, 0xb8, 0x4c, 0x2f,
	0x9c, 0xc6, 0xd1, 0xad, 0xa3, 0x5f, 0xd2, 0xb8, 0x75, 0x25, 0xfb, 0x52, 0xc2, 0xb1, 0x0f, 0x81,
	0x82, 0x23, 0x2b, 0x3e, 0x62, 0x5e, 0x44, 0xa3, 0x56, 0x9b, 0x3c, 0x4e, 0x03, 0x07, 0x54, 0x64,
	0xf0, 0x2c, 0x1a, 0xd1, 0x49, 0x34, 0x0c, 0x02, 0xe1, 0x75, 0x47, 0x7c, 0x12, 0x5d, 0x95, 0x27,
	0x91, 0x04, 0xea, 0x27, 0x91, 0xe3, 0xed, 0xa1, 0xff, 0xb9, 0x96, 0x9c, 0x44, 0x8e, 0xb7, 0xb7,
	0xe9, 0xa3, 0x8f, 0x21, 0x61, 0x93, 0xbf, 0xbd, 0x4e, 0xeb, 0x9a, 0x43, 0x59, 0xe3, 0x73, 0xfb,
	0x8f, 0xa7, 0xd9, 0x4b, 0x62, 0x64, 0xf2, 0x65, 0xf6, 0x92, 0xc4, 0x66, 0xed, 0x2c, 0x9e, 0x43,
	0x00, 0xed, 0xfe, 0x02, 0x94, 0x0f, 0xec, 0xc0, 0xe1, 0x41, 0x76, 0x91, 0x73, 0x08, 0x28, 0x3e,
	0xc9, 0xe7, 0x8a, 0x4f, 0xf2, 0x9e, 0x70, 0x9d, 0x03, 0xab, 0x67, 0x47, 0x42, 0x39, 0x49, 0x82,
	0xac, 0xdb, 0x11, 0x05, 0x0a, 0xe4, 0x16, 0xc2, 0x61, 0x9f, 0x1c, 0x64, 0xcd, 0x9c, 0xc5, 0xe7,
	0xce, 0xb0, 0x9f, 0x89, 0x01, 0x2a, 0xd9, 0x18, 0x00, 0xf7, 0x3b, 0x60, 0x5e, 0x55, 0xe5, 0x7e,
	0x07, 0x1a, 0x9f, 0xa2, 0x7d, 0x1e, 0xab, 0xc5, 0x7c, 0x8a, 0xf6, 0x15, 0x9f, 0xf9, 0xf0, 0x66,
	0x99, 0xd5, 0xa5, 0x8b, 0x43, 0x10, 0x1f, 0x91, 0x57, 0xa0, 0xca, 0x08, 0x07, 0xbe, 0xdb, 0x1f,
	0x0a, 0x72, 0x82, 0x35, 0x93, 0x5f, 0xfa, 0x8c, 0x40, 0x48, 0xc3, 0x3f, 0x10, 0x01, 0x62, 0x0c,
	0xfb, 0x82, 0x5c, 0x61, 0xcd, 0x04, 0x04, 0x7d, 0x46, 0x90, 0x84, 0xc6, 0xcb, 0xc0, 0x73, 0xbc,
	0x3d, 0xf2, 0x87, 0x8a, 0xc6, 0xf7, 0x08, 0x14, 0xd3, 0x90, 0x18, 0x46, 0x42, 0x43, 0x22, 0xac,
	0x43, 0x99, 0x58, 0x43, 0xdb, 0x47, 0x77, 0x58, 0x5f, 0xb9, 0x59, 0x10, 0x0b, 0x6a, 0x0a, 0x76,
	0x07, 0xff, 0x45, 0xe6, 0x98, 0xc4, 0x54, 0xfc, 0xab, 0x7d, 0x0d, 0xe6, 0x14, 0xd4, 0x28, 0xc3,
	0xf4, 0xb6, 0x1f, 0xd9, 0x6e, 0xf3, 0x94, 0x51, 0x83, 0x72, 0x67, 0x20, 0xba, 0x43, 0xd7, 0x8e,
	0x44, 0xb3, 0xd4, 0xfe, 0xe1, 0x0c, 0x34, 0x91, 0xd0, 0xa7, 0x81, 0x3f, 0x1c, 0xbc, 0x15, 0x75,
	0x6d, 0xa3, 0xf1, 0x85, 0x91, 0xb5, 0x87, 0x33, 0x26, 0x4a, 0x5b, 0xe9, 0xaa, 0x55, 0x6c, 0xfa,
	0x78, 0x6a, 0xe9, 0x38, 0x78, 0x8c, 0xb3, 0xfa, 0xd6, 0x12, 0x2c, 0x3c, 0xcb, 0x7f, 0xa9, 0xc2,
	0x5f, 0x52, 0x15, 0x7e, 0x9c, 0x57, 0xe1, 0xdb, 0x87, 0xa8, 0xb0, 0xae, 0x79, 0x05, 0x7a, 0xac,
	0xbb, 0xb7, 0x85, 0x23, 0xdc, 0xdb, 0x99, 0xac, 0x7b, 0x53, 0x7a, 0x16, 0x8b, 0x68, 0x91, 0xf7,
	0xd1, 0x95, 0x66, 0xd3, 0x19, 0xf6, 0x8f, 0x69, 0x23, 0x3f, 0x9b, 0x84, 0xf9, 0x4d, 0x61, 0x07,
	0xeb, 0xa2, 0xe7, 0x1c, 0x88, 0x5f, 0xfa, 0xf4, 0xb7, 0x69, 0x10, 0x14, 0xb2, 0x0d, 0x9c, 0x40,
	0x58, 0x3d, 0x7b, 0x14, 0x92, 0x45, 0xd4, 0x30, 0x64, 0x43, 0xd0, 0xba, 0x3d, 0x0a, 0x29, 0x23,
	0x24, 0x6d, 0xdd, 0xb1, 0x43, 0x21, 0x73, 0xa7, 0x32, 0x41, 0xee, 0xdb, 0x21, 0xad, 0xb8, 0xeb,
	0xfa, 0xa1, 0x7c, 0x9d, 0xcd, 0xa1, 0x4c, 0x10, 0x7c, 0xbb, 0xfd, 0xa3, 0x19, 0x30, 0x9e, 0x06,
	0xfe, 0xb0, 0xcb, 0x6a, 0xf8, 0x56, 0xb2, 0x9a, 0x25, 0x68, 0x0e, 0x02, 0xbf, 0x37, 0xec, 0xe6,
	0x7c, 0x60, 0x5d, 0xc2, 0x95, 0x1b, 0xbc, 0x0d, 0x46, 0x06, 0x33, 0xf1, 0x84, 0xcd, 0x14, 0x2e,
	0x3a, 0xc3, 0x05, 0x98, 0xee, 0xfa, 0x43, 0x2f, 0x22, 0xb9, 0xd7, 0x4c, 0x7e, 0x88, 0x73, 0x15,
	0x1e, 0x9a, 0x65, 0x06, 0x70, 0x40, 0x84, 0xc3, 0x97, 0xa0, 0xa2, 0xa5, 0x10, 0x32, 0xa3, 0x86,
	0x24, 0x83, 0xc8, 0xe5, 0xfc, 0xe5, 0xa3, 0x73, 0x7e, 0x18, 0x93, 0xf3, 0x57, 0xc6, 0xe6, 0xfc,
	0xd5, 0xa3, 0x73, 0xfe, 0xda, 0x71, 0x73, 0xfe, 0xfa, 0x6b, 0xe5, 0xfc, 0x8d, 0xe3, 0xe6, 0xfc,
	0xcd, 0xc3, 0x73, 0xfe, 0xf9, 0xc3, 0x72, 0x7e, 0x63, 0x6c, 0xce, 0x7f, 0x7a, 0x6c, 0xce, 0xbf,
	0x30, 0x2e, 0xe7, 0x3f, 0x33, 0x36, 0xe7, 0x5f, 0x3c, 0x46, 0xce, 0x7f, 0xb6, 0x20, 0xe7, 0xff,
	0x9d, 0x12, 0x2c, 0x3c, 0x0b, 0x46, 0xe8, 0xac, 0x3b, 0x4e, 0x7f, 0xe0, 0x0a, 0x2a, 0x41, 0x89,
	0x17, 0xba, 0x97, 0x2a, 0x1d, 0xe1, 0xa5, 0x26, 0xb2, 0x5e, 0xea, 0x12, 0x90, 0x17, 0xb6, 0xc2,
	0xc8, 0x8e, 0x86, 0xa1, 0xb4, 0x10, 0x7a, 0xa3, 0x43, 0x90, 0x74, 0x02, 0x3f, 0x95, 0x4e, 0xe0,
	0xdb, 0x7f, 0x3b, 0x55, 0xb4, 0x9c, 0x70, 0xa0, 0x57, 0xd0, 0x4a, 0xc7, 0xae, 0xa0, 0xa5, 0x6d,
	0x7d, 0x22, 0x63, 0xeb, 0xda, 0x0e, 0x27, 0x8f, 0xd8, 0xe1, 0xd4, 0x98, 0x1d, 0x4e, 0x1f, 0xbd,
	0xc3, 0x6c, 0x89, 0x62, 0x01, 0xa6, 0xf5, 0xda, 0x04, 0x3f, 0xa0, 0x96, 0xed, 0xda, 0xaf, 0xa4,
	0x5f, 0xc6, 0x3f, 0x0d, 0x03, 0xa6, 0xec, 0x5e, 0x2f, 0x90, 0x36, 0x49, 0x7f, 0xd3, 0xcc, 0xfd,
	0x9e, 0x65, 0x87, 0xa1, 0xb3, 0xe7, 0x2d, 0x4b, 0x7b, 0x84, 0x6e, 0xbf, 0xb7, 0xca, 0x10, 0x4a,
	0x2d, 0x87, 0x5e, 0xcf, 0xb2, 0x5d, 0xd7, 0x8f, 0x96, 0xa5, 0x41, 0x02, 0x82, 0x56, 0x09, 0x42,
	0xf5, 0xe1, 0xbe, 0xed, 0xb8, 0xd2, 0x12, 0xf9, 0x21, 0x4d, 0x77, 0x45, 0x86, 0x26, 0x09, 0xdd,
	0x95, 0x5c, 0x5d, 0xa5, 0x3e, 0xae, 0xae, 0xd2, 0xc8, 0xd5, 0x55, 0x3a, 0x50, 0xe1, 0x27, 0xf6,
	0x04, 0x4d, 0x8a, 0x1b, 0x56, 0x0a, 0x84, 0x58, 0x24, 0xfe, 0x3b, 0x6b, 0xf4, 0x2a, 0x45, 0x0f,
	0x92, 0xa8, 0x8c, 0x83, 0x21, 0x19, 0x31, 0x2a, 0x30, 0xbb, 0xb9, 0xba, 0xfd, 0x5d, 0x73, 0x75,
	0xa3, 0x79, 0x0a, 0x8f, 0xfc, 0x8d, 0x07, 0x9f, 0xae, 0x6e, 0x34, 0x4b, 0xed, 0x4d, 0xa8, 0x53,
	0xa5, 0xdc, 0xa6, 0x4c, 0xff, 0x48, 0xe5, 0xce, 0x65, 0x8f, 0x13, 0xf9, 0xec, 0xb1, 0xfd, 0xcf,
	0x67, 0xd2, 0x04, 0xc3, 0xc1, 0xd1, 0x87, 0x8a, 0x36, 0xdb, 0x44, 0x6a, 0xb6, 0x94, 0xa2, 0x4c,
	0x66, 0x14, 0x25, 0xb7, 0x94, 0xa9, 0x82, 0x44, 0xf6, 0x06, 0x34, 0x58, 0xe0, 0x5d, 0x3a, 0x03,
	0x70, 0x0a, 0x19, 0x4c, 0x93, 0xd0, 0x19, 0xba, 0xe9, 0x67, 0x4b, 0x40, 0x33, 0xb9, 0x12, 0x50,
	0xba, 0x3a, 0x32, 0x9b, 0xad, 0x8e, 0x5c, 0x83, 0xfa, 0x8e, 0x25, 0xbc, 0x28, 0xc0, 0xe5, 0xee,
	0x06, 0x9f, 0x7b, 0xf2, 0x34, 0xa9, 0xee, 0x3c, 0x60, 0xe0, 0xc3, 0xe0, 0x73, 0x0f, 0xb1, 0xc2,
	0x34, 0x16, 0x17, 0x67, 0xab, 0xa1, 0x8e, 0x45, 0x67, 0x59, 0xbf, 0xef, 0xc8, 0xda, 0x19, 0x3f,
	0xe0, 0x41, 0xb3, 0xa3, 0xfc, 0x21, 0x57, 0xcc, 0x66, 0x77, 0xa4, 0x37, 0xc4, 0x33, 0x48, 0x0d,
	0x71, 0xa5, 0x6c, 0x36, 0x7c, 0x52, 0x58, 0xa1, 0xaa, 0x8d, 0xab, 0x50, 0xd5, 0x73, 0x15, 0xaa,
	0x0b, 0x50, 0x7e, 0x69, 0x8f, 0xac, 0xbe, 0xef, 0x89, 0x91, 0x3c, 0x29, 0xe6, 0x5e, 0xda, 0xa3,
	0x27, 0xf8, 0x6c, 0x5c, 0x87, 0xfa, 0xd0, 0xe3, 0xa8, 0x48, 0x12, 0xe0, 0x23, 0xa2, 0x26, 0xa1,
	0x92, 0x46, 0xba, 0x38, 0x34, 0x9f, 0x2d, 0x0e, 0x65, 0x8a, 0x60, 0x46, 0xae, 0x08, 0x86, 0x87,
	0x24, 0x86, 0xa7, 0xcc, 0x33, 0x2e, 0x92, 0x95, 0x09, 0x42, 0x0c, 0x4b, 0xca, 0x73, 0x0b, 0xd9,
	0xf2, 0x9c, 0x5e, 0xf2, 0x3a, 0x53, 0x54, 0xf2, 0x1a, 0xb8, 0xa2, 0xb7, 0x27, 0x2c, 0xbb, 0x1f,
	0xc9, 0x23, 0xa2, 0xcc, 0x90, 0xd5, 0x3e, 0x4d, 0xdb, 0x0d, 0x44, 0xcf, 0x89, 0x68, 0x58, 0x56,
	0xc4, 0x18, 0x82, 0xc3, 0xd9, 0x52, 0x67, 0x6b, 0x7c, 0xa9, 0xf3, 0xdc, 0xf8, 0x52, 0xe7, 0xf9,
	0xf1, 0xa5, 0xce, 0x0b, 0xf9, 0x52, 0x67, 0x1a, 0xe5, 0x63, 0x55, 0x12, 0x4b, 0x50, 0x3e, 0xce,
	0x1c, 0xcb, 0x17, 0xb3, 0x85, 0xdb, 0x8b, 0x40, 0x25, 0x36, 0x8b, 0x55, 0x8f, 0xeb, 0x5f, 0x65,
	0x84, 0xac, 0x91, 0xfa, 0x91, 0x53, 0x97, 0xd6, 0x16, 0x97, 0xbc, 0x40, 0x81, 0x1e, 0xd3, 0x91,
	0x1c, 0x23, 0xa0, 0x14, 0xb9, 0xc6, 0x15, 0xbf, 0xb4, 0x35, 0x24, 0x86, 0x39, 0x9e, 0x13, 0x39,
	0xb6, 0xb4, 0x22, 0xae, 0x68, 0x55, 0x24, 0x8c, 0xec, 0xe8, 0x3a, 0xd4, 0xa5, 0x44, 0x76, 0x6c,
	0xd7, 0xf6, 0xba, 0x82, 0xca, 0x58, 0x25, 0xb3, 0xc6, 0xd0, 0xfb, 0x0c, 0xc4, 0xc5, 0xee, 0xf8,
	0x41, 0xe0, 0xbf, 0x24, 0xc9, 0x5c, 0xe5, 0xc5, 0x32, 0x04, 0x25, 0x73, 0x0e, 0xe6, 0x5c, 0x81,
	0x56, 0xdf, 0x8f, 0xa8, 0x78, 0x55, 0x32, 0x67, 0xf1, 0x19, 0x87, 0x6e, 0x40, 0x23, 0x1c, 0x88,
	0xae, 0xa5, 0xe9, 0x13, 0x17, 0xb0, 0x6a, 0x08, 0xde, 0x8e, 0x75, 0xea, 0x2b, 0x70, 0x9a, 0xf0,
	0x32, 0x56, 0x7d, 0x83, 0xeb, 0x82, 0x38, 0x74, 0x5f, 0xb7, 0x59, 0x85, 0x9e, 0x31, 0xef, 0x9b,
	0x09, 0x7a, 0x47, 0x47, 0x6f, 0x43, 0x4d, 0x52, 0x97, 0xba, 0xb9, 0xc4, 0xac, 0x20, 0xba, 0x52,
	0x39, 0x15, 0x4e, 0x6c, 0xda, 0x1f, 0x24, 0x38, 0x9d, 0xc4, 0xbc, 0x09, 0x47, 0x62, 0x7c, 0xc8,
	0x52, 0x41, 0x90, 0x44, 0x58, 0x02, 0x9a, 0xdc, 0xd2, 0xed, 0xe0, 0x16, 0xd7, 0x41, 0x11, 0xfe,
	0x20, 0xb1, 0x05, 0xc5, 0x18, 0x4d, 0x09, 0x6e, 0x27, 0x8c, 0x79, 0x18, 0x2b, 0xc2, 0x45, 0x20,
	0xfa, 0x12, 0xe5, 0x2b, 0xcc, 0x7a, 0x84, 0xf0, 0xb0, 0x9a, 0x50, 0xf7, 0x3a, 0x77, 0x92, 0x09,
	0xd7, 0x13, 0xcf, 0xa3, 0x30, 0x75, 0xf7, 0xf3, 0x51, 0x82, 0xf9, 0x28, 0x71, 0x41, 0x98, 0x0a,
	0xb0, 0x52, 0xe8, 0x2a, 0x78, 0x97, 0x79, 0xcb, 0x23, 0x6b, 0x89, 0x22, 0xde, 0x81, 0xd3, 0x59,
	0x6c, 0xd4, 0xc7, 0x65, 0x42, 0x9f, 0x4f, 0xa3, 0xa3, 0x56, 0xde, 0x84, 0x46, 0x1c, 0x28, 0x86,
	0x9c, 0x29, 0xac, 0xf0, 0x32, 0x54, 0xb0, 0x18, 0x26, 0xd9, 0x44, 0x5c, 0x8a, 0x6f, 0xdd, 0xe3,
	0x9d, 0xc7, 0x75, 0x78, 0xca, 0x26, 0xe4, 0x30, 0xce, 0xf7, 0xb1, 0xcc, 0x26, 0x18, 0x24, 0xd5,
	0x3f, 0x55, 0xb6, 0xfe, 0x6a, 0xbe, 0x6c, 0x7d, 0x1b, 0x0c, 0x59, 0x87, 0xd6, 0x0b, 0xd7, 0x5f,
	0x93, 0x5a, 0x44, 0x23, 0x5a, 0xe9, 0x3a, 0x5d, 0x92, 0xff, 0x7a, 0xb6, 0x24, 0x9f, 0xbb, 0x15,
	0xf8, 0x46, 0xfe, 0x56, 0x20, 0x77, 0xbd, 0xf0, 0xbf, 0x0a, 0xae, 0x17, 0x0a, 0x8b, 0xf7, 0xff,
	0xbb, 0xb8, 0x78, 0x7f, 0x03, 0x1a, 0xa4, 0x6b, 0x1a, 0xe6, 0x37, 0x59, 0x8d, 0x10, 0x9c, 0xe0,
	0xdd, 0x02, 0x63, 0x87, 0x37, 0xa9, 0xab, 0xe6, 0xb7, 0x98, 0xe8, 0x0e, 0x6e, 0x52, 0xd3, 0xcd,
	0x5b, 0x60, 0x84, 0x79, 0xe4, 0xff, 0x23, 0xd3, 0x96, 0x0c, 0xf2, 0x45, 0x00, 0xad, 0xd4, 0xfe,
	0x6d, 0xe6, 0x8a, 0x17, 0x17, 0xd8, 0xd5, 0x02, 0x35, 0x9c, 0xef, 0x24, 0x0b, 0x4c, 0x0a, 0xf1,
	0xa8, 0x9e, 0x9a, 0x28, 0xc8, 0x61, 0x7d, 0x22, 0xd5, 0x33, 0x16, 0x04, 0xf9, 0xac, 0xaf, 0xc2,
	0x59, 0x1d, 0xd3, 0x8f, 0xf6, 0x45, 0x20, 0xcd, 0x63, 0x95, 0x5e, 0x58, 0x48, 0x5e, 0xd8, 0xc2,
	0x41, 0xb6, 0x94, 0x6b, 0x50, 0x77, 0x3c, 0x47, 0x77, 0x44, 0xf7, 0x99, 0xf7, 0x8e, 0xe7, 0x24,
	0x7e, 0xe8, 0x3a, 0xd4, 0x55, 0xec, 0x22, 0xe3, 0xe9, 0x35, 0x8e, 0x5f, 0x24, 0x54, 0x86, 0xd4,
	0x2a, 0xb0, 0x95, 0x38, 0xeb, 0x49, 0x60, 0x2b, 0x11, 0xae, 0x40, 0x95, 0xf3, 0x4c, 0x89, 0xf1,
	0x80, 0x23, 0x54, 0x82, 0x49, 0x94, 0x6b, 0x50, 0xd7, 0x6c, 0xd1, 0xf2, 0x07, 0xad, 0x87, 0xbc,
	0xa0, 0x24, 0x1a, 0xd8, 0x1a, 0x20, 0x96, 0x3f, 0x48, 0x99, 0xf7, 0xa7, 0x8c, 0xe5, 0x0f, 0x34,
	0xe3, 0xfe, 0x08, 0x16, 0x46, 0x02, 0xf3, 0x56, 0xb6, 0x44, 0x62, 0x0c, 0x7a, 0xe3, 0x47, 0x6c,
	0x85, 0x38, 0xf6, 0x94, 0x86, 0x70, 0x93, 0xe8, 0x97, 0xbf, 0x02, 0xa7, 0x55, 0xf4, 0x65, 0x85,
	0x2f, 0xed, 0x01, 0xe7, 0x9d, 0xad, 0xc7, 0xac, 0xfa, 0x32, 0x0a, 0xeb, 0xbc, 0xb4, 0x07, 0x94,
	0x7a, 0x1a, 0x1f, 0xc0, 0x7c, 0xb4, 0xcc, 0x17, 0x7b, 0xb4, 0x6f, 0xe2, 0xdf, 0xff, 0x65, 0xf1,
	0x44, 0xcb, 0xa6, 0x13, 0x3e, 0x47, 0xd1, 0x10, 0x07, 0x6f, 0x40, 0x83, 0x82, 0x17, 0x5c, 0x8b,
	0x3c, 0xe9, 0xff, 0x1f, 0x0b, 0x9c, 0xc0, 0x4f, 0x11, 0x8a, 0x2b, 0xd0, 0x32, 0xa8, 0x8d, 0xe3,
	0xf7, 0x20, 0xfc, 0xfb, 0x04, 0xcc, 0x6f, 0x0f, 0x3d, 0x4f, 0xb8, 0x71, 0xb8, 0xfb, 0x45, 0xd7,
	0x50, 0x30, 0x5c, 0xa2, 0x19, 0xf5, 0xb0, 0x17, 0x18, 0x14, 0x17, 0x1e, 0x52, 0x91, 0xf1, 0x74,
	0x41, 0x64, 0x7c, 0x17, 0x16, 0x38, 0xa0, 0x95, 0xce, 0x4f, 0x9d, 0xb7, 0x1c, 0xfa, 0x1a, 0x34,
	0xc6, 0xa6, 0xa0, 0x0e, 0xdd, 0xbb, 0xb0, 0xc0, 0x61, 0x5a, 0xe6, 0x0d, 0x0e, 0x86, 0x0d, 0x1a,
	0x4b, 0xbf, 0x71, 0x13, 0x1a, 0x7e, 0xb7, 0x3b, 0x1c, 0x38, 0xa2, 0xa7, 0x6c, 0x8d, 0xc3, 0xe2,
	0xba, 0x02, 0x4b, 0x63, 0xbb, 0x0b, 0x0b, 0x92, 0x68, 0x8c, 0x1f, 0xa8, 0x2a, 0x5b, 0xc9, 0x34,
	0x78, 0x6c, 0x4b, 0x0e, 0x99, 0x76, 0x24, 0xda, 0x7f, 0x39, 0x01, 0xf5, 0x35, 0x3f, 0xa0, 0xe2,
	0xe9, 0x97, 0xbf, 0xfd, 0x43, 0x0e, 0x69, 0x09, 0x2f, 0x0e, 0xc5, 0x69, 0x4c, 0xaa, 0x4a, 0x34,
	0x5b, 0x50, 0x25, 0xba, 0x0e, 0xf5, 0x9e, 0x13, 0x08, 0xde, 0x00, 0xe5, 0x87, 0x9c, 0x09, 0xd7,
	0x62, 0x28, 0x25, 0x78, 0xaa, 0x06, 0xf9, 0x22, 0x1a, 0x11, 0xeb, 0x64, 0x0d, 0xf2, 0x59, 0x34,
	0x42, 0xe6, 0xd0, 0x10, 0xb1, 0x95, 0x13, 0x0b, 0xc2, 0x25, 0x66, 0x1e, 0x50, 0xbe, 0x16, 0xdf,
	0xa9, 0x8c, 0x4b, 0x00, 0x53, 0xcb, 0x9d, 0x28, 0x58, 0xee, 0x0d, 0x68, 0xbc, 0x18, 0x8a, 0x60,
	0xc4, 0x67, 0x3b, 0x31, 0x9c, 0x19, 0x5a, 0x23, 0x30, 0x4e, 0x82, 0x3c, 0x6f, 0xff, 0x04, 0xd2,
	0x13, 0x9f, 0x38, 0x51, 0x4c, 0x57, 0x24, 0x26, 0x8f, 0xec, 0x89, 0xc8, 0x94, 0x54, 0x90, 0x68,
	0xf4, 0x8a, 0x8b, 0xba, 0x2c, 0xb5, 0x99, 0xe8, 0x15, 0x55, 0x74, 0xdf, 0x6d, 0x3d, 0xf9, 0x2c,
	0xcc, 0x86, 0xf2, 0x2a, 0x84, 0xeb, 0x18, 0x33, 0xe1, 0xbe, 0x62, 0xc2, 0x4e, 0xc8, 0x03, 0x5c,
	0xbf, 0x98, 0xd9, 0x09, 0x69, 0xe0, 0x3d, 0xa0, 0xbc, 0xcd, 0xda, 0xa1, 0x1a, 0x74, 0x95, 0x79,
	0x87, 0x90, 0xfb, 0x9d, 0x61, 0xdf, 0xb8, 0x09, 0x4d, 0x39, 0xca, 0x46, 0x8c, 0x38, 0x5c, 0x51,
	0xae, 0x11, 0xce, 0x36, 0x42, 0xd3, 0x88, 0xf6, 0xc1, 0x5e, 0xaa, 0x9e, 0xc8, 0x88, 0xab, 0x07,
	0x7b, 0x5c, 0xf9, 0xcb, 0xa4, 0x8e, 0x8d, 0x5c, 0xea, 0xa8, 0x28, 0x85, 0x1a, 0xa5, 0x66, 0x42,
	0xa9, 0x13, 0x53, 0x5a, 0x80, 0xe9, 0x7d, 0xdb, 0xeb, 0x85, 0xf2, 0xba, 0x85, 0x1f, 0x90, 0xc5,
	0x9e, 0x78, 0x29, 0xdf, 0xe3, 0xa4, 0x70, 0xce, 0x13, 0x2f, 0xf9, 0x15, 0xb5, 0xd9, 0x90, 0x36,
	0x72, 0x3a, 0xd9, 0x6c, 0x47, 0xdf, 0x43, 0xa8, 0x6d, 0x76, 0x21, 0xd9, 0x6c, 0x27, 0xde, 0xac,
	0x9e, 0x55, 0x9f, 0x39, 0x3c, 0xab, 0x5e, 0x4c, 0x67, 0xd5, 0x57, 0xa1, 0x16, 0x46, 0x68, 0x49,
	0x7b, 0xd2, 0xc1, 0x9e, 0x65, 0xf9, 0x2a, 0xa0, 0x52, 0x82, 0x18, 0x89, 0x14, 0xaf, 0x95, 0x46,
	0x22, 0xe5, 0xc3, 0xb4, 0xca, 0x8e, 0xef, 0xed, 0x29, 0x3f, 0xac, 0x9a, 0xd0, 0xb5, 0xd5, 0x8d,
	0x7d, 0xde, 0x97, 0x9f, 0x2f, 0xf0, 0xe5, 0x77, 0xe0, 0x74, 0xac, 0x6f, 0xe1, 0xbe, 0x1f, 0x48,
	0x4d, 0xbf, 0x40, 0xa8, 0xf3, 0x6a, 0xa8, 0x83, 0x23, 0x34, 0x6b, 0xba, 0xe8, 0xfc, 0x5e, 0xb6,
	0xe8, 0xdc, 0x82, 0x59, 0x15, 0xa3, 0x72, 0xcf, 0x84, 0x7a, 0xcc, 0x66, 0xd4, 0xef, 0xe7, 0x32,
	0xea, 0xcc, 0x95, 0xc5, 0xa5, 0xdc, 0x95, 0x05, 0xc6, 0x21, 0x24, 0x12, 0x59, 0x74, 0x97, 0x69,
	0x22, 0xc1, 0x64, 0xd5, 0xfd, 0x06, 0x60, 0x54, 0x99, 0xca, 0x0b, 0x38, 0x53, 0xac, 0xf9, 0x83,
	0x48, 0x4b, 0x0b, 0xce, 0xc1, 0x1c, 0xc5, 0x15, 0x49, 0xb3, 0xc3, 0x2c, 0x3e, 0xa3, 0xb7, 0x6b,
	0x43, 0x4d, 0xbc, 0x12, 0x81, 0x15, 0x8f, 0x5f, 0xe5, 0xfb, 0x2f, 0x04, 0x3e, 0x94, 0x38, 0x64,
	0xde, 0x98, 0xa9, 0xa0, 0xf9, 0x5d, 0x53, 0xe6, 0x2d, 0xba, 0xca, 0xfa, 0xd4, 0x9d, 0xcc, 0xf5,
	0xd4, 0x9d, 0xcc, 0x65, 0xa0, 0x70, 0xc8, 0xc2, 0x15, 0x62, 0xd4, 0x7d, 0x23, 0xd1, 0xfa, 0xad,
	0x41, 0x84, 0x61, 0xf7, 0x6d, 0x30, 0xf8, 0xd6, 0xc5, 0x76, 0x5d, 0x6b, 0xe0, 0x87, 0x0e, 0xba,
	0x67, 0x95, 0x09, 0xd2, 0xc8, 0xaa, 0xeb, 0x3e, 0x95, 0xf0, 0xd8, 0x8f, 0x90, 0xc0, 0x96, 0x12,
	0x3f, 0x42, 0x72, 0xd2, 0x42, 0x92, 0x0f, 0x8e, 0x1f, 0x92, 0xac, 0xc0, 0xd9, 0x67, 0xc1, 0xa8,
	0xe3, 0x78, 0x7b, 0xae, 0x40, 0xd7, 0x2a, 0x13, 0xcf, 0xa3, 0xdc, 0x7a, 0xfb, 0x3f, 0x6a, 0x87,
	0xbc, 0xf4, 0xc5, 0xd4, 0xee, 0x2e, 0x02, 0xa8, 0x3c, 0x39, 0xbe, 0x00, 0x2a, 0x4b, 0x08, 0x1f,
	0xb6, 0x6a, 0xd8, 0x1f, 0x88, 0x40, 0xfa, 0xe5, 0x8a, 0x84, 0x6d, 0x0d, 0x44, 0xf0, 0xdf, 0xce,
	0x39, 0x9f, 0x85, 0x59, 0xe1, 0xa7, 0x2e, 0xf9, 0x84, 0x4f, 0x03, 0xd7, 0xa1, 0xae, 0xf6, 0x2a,
	0x43, 0x73, 0x2e, 0x2f, 0xd7, 0x24, 0x34, 0x09, 0xf0, 0x15, 0x1a, 0xea, 0x73, 0x5d, 0x1a, 0x16,
	0x83, 0x64, 0x5f, 0x8f, 0x42, 0xd0, 0x6f, 0x75, 0x14, 0x23, 0xd9, 0x6b, 0x62, 0x0a, 0xcb, 0x31,
	0x36, 0x12, 0x69, 0xca, 0x0b, 0x31, 0x82, 0x20, 0x0d, 0xdc, 0xb5, 0xef, 0x09, 0x49, 0x40, 0xd5,
	0xe9, 0x7c, 0x4f, 0xf0, 0xdb, 0xe7, 0x60, 0x8e, 0x86, 0xf1, 0x5d, 0xbe, 0xf6, 0x9e, 0xc5, 0x67,
	0x7c, 0xf3, 0x0c, 0xcc, 0x84, 0xa3, 0x10, 0x85, 0x79, 0x9a, 0x0b, 0xe7, 0xe1, 0x28, 0x4c, 0x0b,
	0x32, 0x72, 0xfa, 0x42, 0x5e, 0x62, 0xab, 0x9d, 0x6c, 0x3b, 0xac, 0x0a, 0x7e, 0xd0, 0x13, 0x01,
	0x23, 0xc8, 0x9b, 0x6c, 0x82, 0xd0, 0xf0, 0x69, 0x98, 0x8e, 0x5e, 0x21, 0xdd, 0x45, 0xae, 0xf3,
	0x47, 0xaf, 0x38, 0x02, 0x56, 0x64, 0x5f, 0xda, 0x23, 0xe9, 0x7d, 0x15, 0x33, 0xbe, 0x67, 0x8f,
	0xd8, 0xad, 0x7a, 0x5d, 0xe1, 0xb2, 0xfe, 0xb4, 0x94, 0x5b, 0x45, 0x10, 0xa9, 0x4f, 0x82, 0x40,
	0xd3, 0x9e, 0xd3, 0x11, 0x68, 0x5e, 0x7d, 0xe5, 0xe8, 0x24, 0xcf, 0xa7, 0x57, 0x8e, 0x6e, 0x32,
	0x13, 0x87, 0x5f, 0xc8, 0xc5, 0xe1, 0x8b, 0x30, 0x83, 0xbc, 0x0d, 0x9e, 0x4b, 0x17, 0x2b, 0x9f,
	0x90, 0xf6, 0x70, 0x80, 0x8a, 0x65, 0xed, 0xd8, 0x51, 0x77, 0x9f, 0x9c, 0x6c, 0xcd, 0xac, 0x30,
	0xec, 0x3e, 0x82, 0xf2, 0x6e, 0xff, 0xfd, 0x02, 0xb7, 0x7f, 0x05, 0xaa, 0xbb, 0x7e, 0xd0, 0x15,
	0x96, 0xbf, 0xbb, 0x1b, 0x8a, 0x88, 0xbc, 0x6d, 0xd5, 0xac, 0x10, 0x6c, 0x8b, 0x40, 0x28, 0x97,
	0x6e, 0xbf, 0x87, 0xfc, 0xbb, 0x2c, 0x2f, 0x46, 0xfb, 0x3d, 0xee, 0x31, 0x89, 0x95, 0x4e, 0xd8,
	0x64, 0x84, 0x57, 0xd2, 0x5a, 0x27, 0x6c, 0x69, 0x88, 0x9c, 0xce, 0x86, 0xa3, 0x30, 0x12, 0x7d,
	0x72, 0xb3, 0x55, 0xb3, 0x42, 0xb0, 0x0e, 0x81, 0xf2, 0x67, 0xe1, 0xd5, 0x82, 0xb3, 0x30, 0x11,
	0x32, 0xf2, 0xf2, 0x9a, 0x2e, 0x64, 0xe4, 0x24, 0x86, 0xb7, 0xa8, 0x58, 0x76, 0x14, 0x05, 0xce,
	0xce, 0x30, 0x12, 0xd2, 0xe9, 0xd6, 0x10, 0xba, 0xaa, 0x80, 0x68, 0xd6, 0xa1, 0x3b, 0x90, 0xda,
	0xc9, 0x8e, 0x77, 0x2e, 0x74, 0x07, 0xf1, 0xc5, 0x66, 0xd7, 0xef, 0xef, 0x38, 0x9e, 0x9d, 0x04,
	0xc9, 0x37, 0x89, 0x4a, 0x43, 0x83, 0xd3, 0x74, 0x94, 0x0b, 0x3b, 0x7b, 0x7b, 0x4a, 0xe9, 0x96,
	0x54, 0x2e, 0x4c, 0x30, 0x12, 0xff, 0x65, 0x14, 0x3f, 0x29, 0x0f, 0x53, 0xfa, 0x40, 0xa9, 0x18,
	0x6a, 0x8f, 0x22, 0x32, 0x08, 0x9c, 0x03, 0x94, 0xa2, 0x83, 0x0e, 0xfa, 0x43, 0x26, 0x22, 0x61,
	0x74, 0xbb, 0xa6, 0xa1, 0x90, 0xe1, 0xdf, 0x4a, 0xa1, 0x90, 0xf5, 0x7f, 0x08, 0xf3, 0x0a, 0x25,
	0x14, 0x81, 0x63, 0xbb, 0x28, 0x8a, 0xdb, 0xbc, 0x6c, 0x39, 0xd0, 0x21, 0x38, 0x07, 0xb9, 0xa1,
	0x08, 0x43, 0xdc, 0x9d, 0xd3, 0xa3, 0xca, 0x5b, 0xcd, 0x2c, 0x4b, 0xc8, 0xe3, 0x1e, 0x92, 0x92,
	0x2a, 0xad, 0x61, 0xdd, 0xe1, 0x26, 0x40, 0x1e, 0xe8, 0xc4, 0xb8, 0x99, 0x16, 0xcb, 0x8f, 0x72,
	0x2d, 0x96, 0xe9, 0x6a, 0xf0, 0xdd, 0x6c, 0x35, 0xf8, 0x32, 0x54, 0xfb, 0x8e, 0x67, 0xc5, 0xde,
	0x60, 0x99, 0xdd, 0x51, 0xdf, 0xf1, 0xd6, 0xa5, 0x43, 0x48, 0x87, 0x18, 0x2b, 0xd9, 0x10, 0xe3,
	0x90, 0x88, 0xe5, 0xde, 0x61, 0x11, 0x4b, 0xb6, 0x76, 0xf6, 0x71, 0xbe, 0x76, 0xa6, 0x1d, 0x96,
	0x5f, 0x3d, 0xfe, 0x61, 0xb9, 0x41, 0x19, 0xc8, 0x83, 0x57, 0xdd, 0xfd, 0xcf, 0xec, 0xc0, 0xc1,
	0x33, 0x32, 0x75, 0xb2, 0x94, 0x32, 0x27, 0x4b, 0x7a, 0x5b, 0x13, 0x99, 0x6d, 0xb5, 0xff, 0xbe,
	0x94, 0x26, 0x37, 0xee, 0xf4, 0x4c, 0xcd, 0x35, 0x71, 0xd4, 0x29, 0x36, 0x99, 0x39, 0xc5, 0x52,
	0x71, 0xc3, 0x54, 0x26, 0x6e, 0x48, 0xaf, 0x72, 0x3a, 0xcb, 0x7c, 0x8d, 0x53, 0x33, 0xc7, 0xe7,
	0xd4, 0xef, 0xf2, 0xde, 0xf4, 0xef, 0x54, 0x7e, 0x01, 0x56, 0xe5, 0x8f, 0xe1, 0xc9, 0x82, 0x63,
	0x38, 0xc5, 0x82, 0xa9, 0x34, 0x0b, 0xda, 0x7f, 0x57, 0x4d, 0x2f, 0xe8, 0x17, 0x65, 0x36, 0x97,
	0x05, 0xb5, 0x70, 0x85, 0x0a, 0x82, 0xb2, 0xd5, 0xee, 0xd0, 0x65, 0xa4, 0x25, 0x31, 0x9d, 0x97,
	0x84, 0x16, 0x47, 0xcc, 0x64, 0xe3, 0x88, 0x63, 0x25, 0xff, 0x69, 0x46, 0xce, 0x65, 0x19, 0x19,
	0x27, 0x4f, 0x65, 0x3d, 0x79, 0x8a, 0x5f, 0x0a, 0x86, 0xae, 0xea, 0x4c, 0xe1, 0x97, 0xcc, 0xa1,
	0x4b, 0x47, 0x39, 0x1a, 0x30, 0xe2, 0x52, 0xa0, 0x52, 0x33, 0x67, 0xfb, 0x8e, 0xf7, 0xc8, 0xf6,
	0x7a, 0x34, 0x64, 0xbf, 0xe2, 0xa1, 0xaa, 0x1c, 0xb2, 0x5f, 0xd1, 0xd0, 0x0d, 0x2a, 0x95, 0x3f,
	0x17, 0x91, 0x15, 0x63, 0xc8, 0x14, 0x92, 0xc1, 0x4f, 0x24, 0x9e, 0x22, 0xe1, 0xbb, 0x3d, 0x19,
	0xa9, 0x10, 0x09, 0xdf, 0xed, 0xe5, 0x0f, 0xb6, 0x46, 0x71, 0xfb, 0x31, 0x77, 0x65, 0x0c, 0xbd,
	0xf8, 0x4a, 0xb1, 0x4c, 0x90, 0xef, 0x7a, 0x94, 0x57, 0x36, 0x12, 0xe7, 0xc1, 0x31, 0xd3, 0x3c,
	0xf7, 0x10, 0xc5, 0x8e, 0x83, 0x83, 0xa6, 0x43, 0xbc, 0x8c, 0x71, 0x98, 0x97, 0xb9, 0x0e, 0x75,
	0xd9, 0x1e, 0xb0, 0xe7, 0x07, 0x4e, 0xb4, 0xdf, 0x97, 0xd1, 0x0c, 0x5f, 0x16, 0x2b, 0x20, 0x66,
	0x17, 0xce, 0xae, 0x95, 0x5c, 0x1a, 0xa8, 0xb0, 0xc6, 0xd9, 0x7d, 0xa2, 0x6e, 0x0c, 0x70, 0x9f,
	0xae, 0x13, 0x46, 0x8e, 0xa7, 0x12, 0x5f, 0xce, 0x2e, 0xab, 0x12, 0xc8, 0x67, 0xd6, 0x15, 0xa8,
	0xca, 0xca, 0x31, 0xe3, 0x2c, 0xca, 0x1b, 0x1e, 0x82, 0xc5, 0x49, 0xb6, 0xac, 0xbd, 0x93, 0xf4,
	0x65, 0xa8, 0xc3, 0xa0, 0x6c, 0xf7, 0x58, 0x2b, 0x95, 0xa9, 0xa8, 0xaf, 0x1f, 0x58, 0x0d, 0x48,
	0xff, 0xce, 0x25, 0x5f, 0x3f, 0xd0, 0xe7, 0x59, 0xa4, 0x83, 0xb1, 0xa6, 0x68, 0xe9, 0x25, 0x6b,
	0x4a, 0x2e, 0x5c, 0xa6, 0x25, 0x5c, 0x48, 0xab, 0x28, 0x2d, 0xe2, 0x06, 0x34, 0x46, 0x22, 0xb4,
	0x38, 0xef, 0xe1, 0xbd, 0xf0, 0x0d, 0x64, 0x6d, 0x24, 0xc2, 0x35, 0x84, 0xf2, 0x6e, 0x96, 0xa0,
	0x89, 0x78, 0xdc, 0x69, 0x24, 0x11, 0x65, 0x5b, 0xfe, 0x48, 0x84, 0xdc, 0xab, 0xc4, 0x98, 0xfa,
	0xb4, 0xa4, 0x05, 0xef, 0x73, 0x73, 0x8e, 0x02, 0x92, 0x22, 0x28, 0xd3, 0xa3, 0x75, 0x5d, 0x4a,
	0x4c, 0x8f, 0xd6, 0x94, 0xca, 0xef, 0x2e, 0x67, 0xf2, 0x3b, 0x3d, 0x4f, 0x8d, 0x84, 0x0c, 0x7e,
	0xe2, 0x3c, 0x35, 0xa2, 0x03, 0x6a, 0xe8, 0x51, 0x9f, 0xe7, 0xc0, 0xe1, 0x54, 0x8d, 0x5a, 0x84,
	0x38, 0xcf, 0x9c, 0xe7, 0xa1, 0xa7, 0x72, 0x64, 0x73, 0xd8, 0x8f, 0xb9, 0x4d, 0xeb, 0xe1, 0x8d,
	0xf1, 0xb5, 0x24, 0x71, 0x1b, 0x0f, 0x83, 0x58, 0x9e, 0x52, 0x71, 0x68, 0x57, 0xd7, 0xf4, 0xb6,
	0x24, 0xda, 0xd3, 0x55, 0xa8, 0xe9, 0xad, 0x4d, 0xcb, 0x14, 0x0d, 0xd4, 0xcc, 0xaa, 0xd6, 0xdb,
	0xb4, 0x9c, 0x45, 0x5a, 0x91, 0xd1, 0x80, 0x8e, 0xb4, 0x82, 0xcc, 0x56, 0xd6, 0x2a, 0x4d, 0x3d,
	0x94, 0xf1, 0x40, 0x5d, 0x9a, 0x2b, 0x5b, 0x7c, 0xc8, 0x5d, 0xaf, 0xac, 0xac, 0xc4, 0x8e, 0x8f,
	0x58, 0x9f, 0x25, 0x2c, 0xc7, 0xb0, 0x51, 0x48, 0x11, 0x41, 0x3a, 0xb1, 0x4f, 0x55, 0x6b, 0x96,
	0x33, 0xd5, 0x9a, 0xdb, 0x60, 0xc8, 0x42, 0x8c, 0x2e, 0xf9, 0x15, 0x59, 0xdc, 0xa7, 0x62, 0x8c,
	0x26, 0xfb, 0x74, 0xd3, 0xdb, 0xbd, 0x6c, 0xd3, 0xdb, 0x4d, 0x68, 0x1c, 0xf8, 0xae, 0x1d, 0x39,
	0xae, 0x13, 0x8d, 0xb8, 0xa0, 0xc9, 0xe1, 0x40, 0x3d, 0x01, 0x9b, 0xb8, 0xe6, 0x93, 0x45, 0x04,
	0x5b, 0xd0, 0xa0, 0x23, 0xc5, 0xb4, 0xbd, 0xbd, 0x23, 0x3e, 0xf9, 0x34, 0x60, 0x4a, 0x3b, 0xd8,
	0xe8, 0xef, 0x43, 0x3e, 0xf5, 0xfc, 0xe1, 0x24, 0x9c, 0x56, 0x9f, 0x29, 0xe2, 0xc4, 0xf2, 0x93,
	0xd2, 0x2f, 0xb6, 0x5e, 0x9d, 0x3e, 0x34, 0xa6, 0xb2, 0x87, 0xc6, 0x63, 0xa8, 0xed, 0x3a, 0x6e,
	0x24, 0x02, 0x6b, 0x17, 0x77, 0x18, 0xb6, 0xa6, 0x2f, 0x4f, 0x2e, 0x55, 0x56, 0xae, 0x15, 0x30,
	0x28, 0xf7, 0x05, 0xac, 0x59, 0xe5, 0x57, 0xe9, 0x21, 0x34, 0x1e, 0x40, 0x35, 0x40, 0x56, 0x29,
	0x4a, 0x33, 0x44, 0xa9, 0x5d, 0xd4, 0xf1, 0x9c, 0x66, 0xab, 0x59, 0x09, 0xe2, 0xbf, 0x43, 0x63,
	0x0b, 0xe0, 0x05, 0x32, 0x29, 0xf9, 0xf8, 0xb1, 0xbe, 0x72, 0xb7, 0xa8, 0xfd, 0x29, 0xcf, 0x49,
	0x86, 0x51, 0xf3, 0x53, 0xf9, 0x85, 0xfa, 0xb3, 0x7d, 0x0b, 0xca, 0x31, 0xdc, 0xa8, 0x41, 0xd9,
	0x74, 0xc2, 0xe7, 0x04, 0x68, 0x9e, 0x32, 0x1a, 0x50, 0x61, 0x57, 0xcd, 0x80, 0x52, 0xfb, 0xdf,
	0x4a, 0x70, 0xc6, 0x54, 0x5f, 0xca, 0x50, 0x43, 0xc4, 0x1b, 0x93, 0x52, 0xc8, 0x84, 0x34, 0x29,
	0x49, 0xc8, 0x2f, 0x7c, 0xab, 0x90, 0x96, 0xf1, 0x4c, 0x56, 0xc6, 0x68, 0xd5, 0xb8, 0x13, 0x8b,
	0xd4, 0x30, 0x6c, 0xcd, 0x5e, 0x9e, 0xc4, 0xd3, 0x85, 0x60, 0x24, 0xcd, 0xb0, 0xfd, 0x67, 0x25,
	0x98, 0xa7, 0x2d, 0x53, 0x27, 0xed, 0x9b, 0xd9, 0xf2, 0x35, 0xe0, 0x63, 0x38, 0x69, 0xf0, 0xd5,
	0x23, 0x3b, 0xd5, 0xde, 0xbb, 0x84, 0xe9, 0x9a, 0x86, 0x95, 0x84, 0xb1, 0x75, 0x0d, 0x0f, 0x0d,
	0x6d, 0x11, 0x66, 0x08, 0xc2, 0x3a, 0x8a, 0xe7, 0x1b, 0x3d, 0xb5, 0x7f, 0x5e, 0x82, 0xf3, 0x4f,
	0xb5, 0x3e, 0xe0, 0xb7, 0x69, 0x5d, 0x37, 0x64, 0x04, 0x12, 0xef, 0x31, 0x6c, 0x4d, 0xd1, 0xe2,
	0x6a, 0xfa, 0x26, 0xc3, 0x37, 0x68, 0x66, 0xed, 0x9f, 0x96, 0x60, 0x51, 0x7d, 0x7c, 0xfa, 0x36,
	0xb7, 0xba, 0x00, 0xd3, 0xdd, 0x61, 0x18, 0x29, 0xee, 0xf3, 0x43, 0x7e, 0x63, 0x53, 0x27, 0xde,
	0xd8, 0x9f, 0x94, 0xb4, 0xaf, 0x70, 0xde, 0xcc, 0x96, 0x72, 0x9f, 0xd9, 0x4c, 0x1e, 0xeb, 0x33,
	0x9b, 0xa9, 0xa2, 0xcf, 0x6c, 0x0a, 0xf7, 0xdf, 0xfe, 0x19, 0x4a, 0x23, 0xb9, 0x7e, 0x7c, 0x6b,
	0xd2, 0x48, 0x8c, 0x61, 0x4a, 0x37, 0x86, 0x37, 0xa9, 0x68, 0x1d, 0xfa, 0x7c, 0xff, 0xa1, 0x1f,
	0x74, 0xa9, 0x10, 0x3c, 0xb6, 0xdf, 0xf9, 0x58, 0x2d, 0xa1, 0x3f, 0xae, 0x42, 0x33, 0x4d, 0xf2,
	0x0b, 0x2b, 0x2c, 0x1f, 0xd5, 0x9a, 0x1c, 0x37, 0x17, 0x4f, 0xeb, 0xcd, 0xc5, 0x8b, 0x30, 0xc3,
	0x9d, 0xba, 0xd2, 0x87, 0xca, 0x27, 0x14, 0xd6, 0x4e, 0xe0, 0x3f, 0x17, 0x81, 0x85, 0x91, 0x90,
	0xcc, 0xcd, 0x80, 0x41, 0x1b, 0x4e, 0x18, 0xc5, 0xdf, 0x41, 0x52, 0x77, 0xcd, 0x5c, 0xf2, 0x1d,
	0x24, 0xb5, 0xd6, 0x24, 0x5d, 0x89, 0xe5, 0x54, 0x57, 0xe2, 0x45, 0x00, 0xbb, 0x17, 0xdf, 0x87,
	0x83, 0xec, 0x24, 0xed, 0xf5, 0x92, 0xfe, 0x14, 0x0a, 0x7e, 0x34, 0x9c, 0x4a, 0x12, 0x48, 0xae,
	0xc6, 0x78, 0x99, 0xa6, 0xc9, 0x6a, 0x51, 0xd3, 0x64, 0xd2, 0xb4, 0xac, 0x3e, 0xa7, 0x8a, 0x7b,
	0x96, 0xb3, 0x57, 0x39, 0xf5, 0xdc, 0x55, 0x8e, 0x6a, 0x94, 0xd1, 0x16, 0xd2, 0x48, 0x1a, 0x65,
	0x92, 0x85, 0x5c, 0x81, 0xaa, 0xec, 0x92, 0xe4, 0xce, 0xc2, 0xa6, 0xb4, 0x35, 0x82, 0xc5, 0xbd,
	0x85, 0x5a, 0xeb, 0xe1, 0x7c, 0xb6, 0xf5, 0xf0, 0x02, 0xd0, 0x03, 0x1f, 0x63, 0x9c, 0x9c, 0xcd,
	0x21, 0x80, 0x4e, 0xb1, 0xdb, 0x60, 0x50, 0x95, 0xd4, 0x4a, 0x95, 0x3a, 0x39, 0x2f, 0x6b, 0xd2,
	0xc8, 0x43, 0xad, 0xde, 0x99, 0x69, 0xf0, 0x5e, 0xc8, 0x35, 0x78, 0xc7, 0x0d, 0xc1, 0xf8, 0x68,
	0x45, 0xc2, 0x5d, 0x96, 0x35, 0xe7, 0x5a, 0x8c, 0xb4, 0x2d, 0xdc, 0x65, 0x3a, 0x9f, 0x92, 0x56,
	0x72, 0x44, 0x74, 0x65, 0x09, 0xba, 0x9e, 0xf4, 0x93, 0x6f, 0x0b, 0xd7, 0x4d, 0x04, 0x96, 0xfd,
	0x78, 0x9a, 0x05, 0x16, 0xb7, 0x08, 0xc7, 0x2d, 0xc6, 0xdc, 0x05, 0xdb, 0xd2, 0x5a, 0x8c, 0xb9,
	0x0d, 0xf6, 0x18, 0xcd, 0xa2, 0x57, 0xa1, 0xe6, 0xf9, 0x91, 0xb3, 0x3b, 0x52, 0x79, 0xaf, 0xbc,
	0x0d, 0x64, 0xa0, 0xcc, 0x7a, 0x97, 0xa0, 0x19, 0xf9, 0xe8, 0xf6, 0x08, 0x91, 0x79, 0xce, 0x49,
	0x5b, 0x3d, 0xf2, 0x07, 0x9b, 0x04, 0x2e, 0xfa, 0x58, 0x7f, 0x25, 0xdf, 0x35, 0xba, 0x82, 0xab,
	0x96, 0x84, 0xa8, 0xca, 0xc9, 0x6d, 0xa3, 0xc0, 0x20, 0x2a, 0x72, 0x1e, 0xab, 0x52, 0x9d, 0x6b,
	0x33, 0xbb, 0x54, 0xd0, 0x66, 0x96, 0x6e, 0x67, 0xbb, 0x9c, 0x6d, 0x67, 0xbb, 0x06, 0xf5, 0xde,
	0xc8, 0xeb, 0x6a, 0xfd, 0x6c, 0x7c, 0x2b, 0x58, 0x45, 0x68, 0xdc, 0xd0, 0x56, 0xd8, 0xab, 0xd6,
	0x2e, 0xee, 0x55, 0x3b, 0xfc, 0x5b, 0xeb, 0xab, 0x87, 0x7f, 0x6b, 0x9d, 0x29, 0x9d, 0x5e, 0xcb,
	0x95, 0x4e, 0x8b, 0x3e, 0x3d, 0xbf, 0xfe, 0x1a, 0x9f, 0x9e, 0xdf, 0x38, 0xe4, 0xd3, 0xf3, 0x6c,
	0x09, 0xf4, 0x66, 0xbe, 0x04, 0x8a, 0x3e, 0x81, 0x02, 0x42, 0x16, 0xfa, 0x12, 0x9f, 0x2e, 0x04,
	0x62, 0x81, 0xa3, 0x6a, 0x24, 0x08, 0x56, 0xf8, 0x79, 0xc8, 0xa5, 0xed, 0x9a, 0x59, 0x4f, 0xb0,
	0x3a, 0x9f, 0x87, 0xd9, 0xcf, 0x15, 0x3e, 0x2c, 0xfa, 0x19, 0x08, 0x4d, 0xe1, 0x6f, 0x65, 0xfb,
	0xe1, 0xb5, 0xd4, 0xeb, 0xf6, 0xf1, 0x53, 0x2f, 0x15, 0xe3, 0xbc, 0xed, 0x53, 0x35, 0x3e, 0xe3,
	0xa7, 0x8e, 0x8c, 0x71, 0x4e, 0x7e, 0xa6, 0xfe, 0x4b, 0x09, 0x2e, 0xa4, 0xbe, 0xf7, 0x7c, 0x9b,
	0xbb, 0xc3, 0x80, 0x5c, 0x8f, 0x86, 0xd4, 0x36, 0xab, 0x5a, 0x38, 0xf4, 0x46, 0x77, 0xfb, 0x8f,
	0x25, 0x78, 0x2f, 0xfd, 0xcd, 0xe8, 0xff, 0x28, 0x61, 0xfe, 0x7c, 0x0a, 0xaa, 0xb4, 0x29, 0xfb,
	0x15, 0x37, 0x23, 0xfe, 0x1a, 0x65, 0x3c, 0x3d, 0x27, 0x29, 0xd3, 0x95, 0x28, 0x7d, 0xfd, 0x5a,
	0x01, 0x71, 0xfd, 0x45, 0x7a, 0xa0, 0xbf, 0xd6, 0xd4, 0xeb, 0x94, 0xc4, 0xd6, 0xba, 0xfa, 0xa3,
	0x2c, 0x77, 0x4a, 0xf2, 0x5c, 0x5f, 0x98, 0x60, 0x7f, 0x12, 0x83, 0x69, 0xad, 0x86, 0x05, 0x0b,
	0x31, 0xa4, 0xeb, 0xf7, 0x07, 0x76, 0x20, 0xe2, 0xde, 0xab, 0xfa, 0xca, 0xad, 0x71, 0xab, 0x59,
	0xe3, 0x57, 0x90, 0xc7, 0x66, 0x21, 0x21, 0xc3, 0x82, 0x33, 0xd4, 0xfc, 0x40, 0x8b, 0x90, 0x5f,
	0x06, 0xc6, 0xf5, 0x85, 0xe2, 0xaf, 0x9c, 0x53, 0x33, 0x3c, 0x8b, 0x46, 0xf4, 0x07, 0xed, 0xd2,
	0x40, 0x52, 0xb4, 0xf0, 0x18, 0x86, 0xa2, 0x4d, 0x26, 0xa0, 0x20, 0xad, 0x64, 0x96, 0x63, 0xbc,
	0xb6, 0x0d, 0x8b, 0xc5, 0x2c, 0x33, 0xce, 0xc3, 0x62, 0xe7, 0xf1, 0xe6, 0xa7, 0x1b, 0x0f, 0xac,
	0xce, 0xe3, 0xf5, 0x07, 0xd6, 0xa3, 0xad, 0x8d, 0x75, 0x6b, 0xe3, 0xf1, 0x93, 0xc7, 0xdb, 0xcd,
	0x53, 0x46, 0x0b, 0x16, 0xee, 0x6f, 0x6d, 0x3f, 0xca, 0x8d, 0x94, 0x8c, 0x79, 0xa8, 0x6d, 0x6e,
	0xe9, 0xa0, 0x89, 0xf6, 0x77, 0xa0, 0xaa, 0xaf, 0xd2, 0x68, 0x40, 0xc5, 0x5c, 0xdd, 0x7e, 0xbc,
	0x15, 0x53, 0x6b, 0x42, 0x75, 0xf5, 0xc9, 0xd6, 0x77, 0x37, 0xb7, 0x63, 0x2a, 0x55, 0x98, 0xdb,
	0xdc, 0x8a, 0x09, 0x6c, 0x41, 0x45, 0x63, 0xa4, 0x51, 0x81, 0xd9, 0x4f, 0x03, 0x61, 0x47, 0x22,
	0x68, 0x9e, 0x32, 0x4e, 0x43, 0x43, 0x3e, 0xac, 0x7a, 0xbd, 0x07, 0x2f, 0x86, 0xb6, 0xdb, 0x2c,
	0x19, 0x00, 0x33, 0x1b, 0x22, 0x0c, 0x45, 0xd0, 0x9c, 0x30, 0x0c, 0xa8, 0xf3, 0xdf, 0xf1, 0xf8,
	0x64, 0x7b, 0x00, 0xf3, 0xf1, 0xa6, 0xd7, 0xed, 0x48, 0x6c, 0xa2, 0xfb, 0x35, 0x60, 0x8a, 0x2a,
	0x75, 0xb2, 0x22, 0x85, 0x7f, 0x1b, 0x9f, 0x42, 0x83, 0x98, 0xd7, 0xb7, 0x5f, 0xb1, 0x6c, 0xc2,
	0xd6, 0x04, 0x29, 0xf9, 0xa5, 0x31, 0x72, 0xe1, 0xa6, 0x28, 0xf5, 0x14, 0xb6, 0x7f, 0x43, 0x9b,
	0x71, 0xdb, 0xe9, 0x8b, 0x0d, 0xc7, 0x13, 0xc7, 0xfa, 0x4d, 0x32, 0x63, 0x0d, 0x80, 0xee, 0xb5,
	0x3d, 0xbf, 0x27, 0xd4, 0xec, 0xd7, 0x0e, 0x99, 0x3d, 0xb5, 0x21, 0xb3, 0xdc, 0x93, 0x7f, 0x51,
	0x02, 0xc2, 0x47, 0xde, 0xf8, 0x2d, 0x2f, 0x41, 0x33, 0xf9, 0x4c, 0x54, 0x7e, 0x0b, 0x2a, 0x6d,
	0x23, 0xfe, 0x58, 0x94, 0x7f, 0x95, 0xe4, 0xf7, 0x4a, 0x29, 0xaa, 0xb8, 0x80, 0x4d, 0xd9, 0xaa,
	0xe8, 0xfa, 0x2f, 0x29, 0xc4, 0x47, 0x6d, 0x7e, 0x11, 0x8d, 0xa4, 0x43, 0xaa, 0x11, 0x98, 0x90,
	0x9f, 0x45, 0x23, 0xc4, 0x1b, 0x0e, 0x06, 0x29, 0x3c, 0xf6, 0x4c, 0x35, 0x02, 0xc7, 0x78, 0x45,
	0x2b, 0x9a, 0x2c, 0x5c, 0xd1, 0x5f, 0xa4, 0x57, 0xf4, 0x7a, 0x8c, 0x7e, 0x50, 0xc0, 0xe8, 0x1b,
	0x05, 0x8c, 0x2e, 0x60, 0xa4, 0xc6, 0x6a, 0x24, 0x43, 0x2a, 0xc3, 0x64, 0x26, 0x8f, 0x43, 0x46,
	0x71, 0x8e, 0xed, 0x92, 0x25, 0xf6, 0x57, 0x25, 0x68, 0xc6, 0x22, 0x7d, 0x33, 0x4e, 0x3e, 0x75,
	0x59, 0x37, 0x79, 0xd4, 0xcd, 0x68, 0xf6, 0x3e, 0xee, 0x13, 0x98, 0x93, 0x05, 0xb6, 0xa3, 0x9c,
	0x7c, 0x4e, 0xc1, 0xcd, 0xf8, 0xad, 0xf6, 0xdf, 0x94, 0xc0, 0xd0, 0x76, 0xfc, 0xae, 0x37, 0x74,
	0x3f, 0xb7, 0xa1, 0x31, 0x22, 0x2a, 0xd8, 0xd2, 0x8f, 0x4a, 0xb0, 0xb8, 0x1a, 0xec, 0x38, 0x51,
	0x60, 0xef, 0x89, 0xe3, 0xb8, 0x92, 0xa4, 0xb8, 0x5d, 0x5f, 0xb9, 0x57, 0x30, 0x5d, 0x31, 0xb1,
	0x3b, 0x89, 0x7b, 0x27, 0x02, 0xed, 0x5b, 0x50, 0x4e, 0x7c, 0x69, 0x1d, 0x60, 0xed, 0xf3, 0xae,
	0x58, 0x17, 0xae, 0x73, 0x20, 0x9a, 0xa7, 0xd4, 0xf3, 0xa6, 0x1f, 0xf4, 0xd1, 0x13, 0xb6, 0x7f,
	0x2b, 0xb7, 0xc8, 0xd7, 0x33, 0x8a, 0x47, 0x05, 0x46, 0xf1, 0xc1, 0xb1, 0xd7, 0xae, 0xbb, 0xa0,
	0x9f, 0x96, 0xe0, 0x4c, 0x1a, 0xeb, 0x5d, 0x2b, 0xc1, 0x83, 0x9c, 0x12, 0x8c, 0xdf, 0x59, 0x81,
	0x1e, 0xfc, 0x26, 0x2c, 0x3e, 0xb0, 0x03, 0x77, 0xc4, 0x3f, 0x55, 0x82, 0x08, 0x6f, 0x66, 0x63,
	0x37, 0xa1, 0x21, 0x90, 0x2e, 0xdf, 0x36, 0xd2, 0x15, 0xd1, 0x24, 0x7d, 0xf8, 0x5f, 0x27, 0xf0,
	0xb6, 0x82, 0xb6, 0x7f, 0x52, 0x82, 0xb3, 0xda, 0x0a, 0xe8, 0x5c, 0x7f, 0xd7, 0xbc, 0xbd, 0x04,
	0x15, 0x5e, 0x7c, 0x12, 0x76, 0x4c, 0x9b, 0x40, 0x20, 0x0e, 0xac, 0x62, 0x84, 0xc0, 0xee, 0x39,
	0xdc, 0x34, 0xa1, 0x10, 0x4c, 0x84, 0xb4, 0xff, 0x21, 0xf5, 0x2b, 0x29, 0xef, 0x7a, 0x3f, 0xcf,
	0x92, 0xdf, 0xfd, 0x90, 0x4d, 0xed, 0xc5, 0x5f, 0x92, 0xe7, 0x56, 0x7c, 0x67, 0x8d, 0x7f, 0x1c,
	0x44, 0x5d, 0xa6, 0x74, 0xd5, 0xa3, 0xf1, 0x34, 0xfd, 0x75, 0xfa, 0x0c, 0xd1, 0xfc, 0xe8, 0x98,
	0x34, 0x8b, 0x3e, 0x4d, 0xc7, 0x1d, 0xec, 0xd8, 0xa1, 0xe0, 0x26, 0x81, 0x59, 0xe2, 0xe8, 0x1c,
	0x02, 0xd0, 0x31, 0xb7, 0x9f, 0x41, 0x2d, 0xb5, 0x14, 0x8c, 0xe1, 0x36, 0xf4, 0x5b, 0x6b, 0xf6,
	0x21, 0xcb, 0xcd, 0x53, 0x14, 0x32, 0xe9, 0x23, 0xf7, 0x9a, 0xa5, 0x1c, 0xec, 0x1b, 0xcd, 0x89,
	0xf6, 0x37, 0x52, 0x9f, 0xc2, 0x37, 0xa0, 0xb2, 0x61, 0xef, 0x09, 0xf7, 0xa9, 0x08, 0x42, 0xdf,
	0x6b, 0x9e, 0x32, 0xce, 0xc1, 0x99, 0x4d, 0x3b, 0x1a, 0x06, 0xb6, 0xbb, 0xea, 0xf5, 0xf4, 0xa1,
	0x52, 0xfb, 0x19, 0x34, 0x3e, 0xb3, 0x03, 0x87, 0xfa, 0xc7, 0xb6, 0x76, 0x7e, 0x20, 0xba, 0x11,
	0xe6, 0x18, 0x9d, 0xc8, 0x0e, 0x22, 0xf5, 0x33, 0xb2, 0xf4, 0x60, 0x34, 0x61, 0xf2, 0x81, 0xd7,
	0x93, 0xa2, 0xc4, 0x3f, 0x8d, 0x45, 0x98, 0x61, 0xbf, 0x2c, 0x63, 0x00, 0xf9, 0xd4, 0xfe, 0xa7,
	0x09, 0xb8, 0x80, 0x34, 0x0b, 0x9c, 0x36, 0xf9, 0x64, 0x1f, 0x9a, 0xdb, 0x8e, 0xe8, 0xab, 0xe7,
	0xed, 0x24, 0xa7, 0x58, 0x2b, 0xe0, 0xf9, 0x11, 0x94, 0xee, 0xe8, 0x0f, 0x48, 0xe6, 0x81, 0x37,
	0xec, 0x9b, 0x39, 0xe2, 0xb8, 0xf4, 0x75, 0x5b, 0x85, 0x34, 0xf8, 0xa7, 0xf1, 0x1e, 0x94, 0x9f,
	0xa8, 0x80, 0x45, 0xae, 0x3e, 0x01, 0xb4, 0xff, 0xa0, 0x04, 0x0b, 0x45, 0xa4, 0x91, 0xf5, 0x2c,
	0x9b, 0x60, 0x64, 0x3d, 0xf1, 0xbd, 0x68, 0xbf, 0x79, 0xca, 0x58, 0x04, 0x23, 0x0d, 0xb3, 0xb6,
	0x3c, 0xd1, 0x2c, 0x21, 0xcf, 0x33, 0xf0, 0x8e, 0xc0, 0xbc, 0xa3, 0x39, 0x81, 0xf2, 0xce, 0x0c,
	0x6d, 0xef, 0x3b, 0x41, 0xaf, 0x39, 0x89, 0xf1, 0xf7, 0x86, 0xbc, 0xab, 0x46, 0xd1, 0x36, 0xa7,
	0x30, 0xaa, 0x46, 0x69, 0x5b, 0x24, 0x6e, 0x06, 0x4e, 0xb7, 0xff, 0x7c, 0x1a, 0x16, 0x33, 0x7c,
	0x79, 0xd7, 0x66, 0x39, 0x00, 0x23, 0x8c, 0xec, 0x08, 0x17, 0xdf, 0x0d, 0x95, 0x66, 0x4b, 0xf3,
	0xfc, 0x64, 0xbc, 0x58, 0x95, 0x3d, 0x75, 0x72, 0x34, 0x48, 0xa6, 0x05, 0xb4, 0x8d, 0xdf, 0x2e,
	0xc1, 0x05, 0xd5, 0x81, 0x1e, 0xab, 0x30, 0x93, 0xdc, 0x4e, 0xcc, 0xf8, 0xf1, 0xf1, 0xe7, 0x7e,
	0x7a, 0x38, 0x31, 0x5a, 0xc4, 0x51, 0xb3, 0x19, 0x9b, 0xd0, 0xcc, 0xd8, 0x11, 0xdf, 0x49, 0x16,
	0x5f, 0x16, 0x67, 0x50, 0xcd, 0xdc, 0xbb, 0xc6, 0x0f, 0xa0, 0x75, 0x88, 0xd6, 0x87, 0xad, 0x39,
	0xa2, 0x7b, 0xe7, 0xf5, 0x8c, 0xc5, 0x3c, 0x94, 0x5e, 0x7b, 0x19, 0x16, 0x8b, 0xf9, 0x4e, 0x3f,
	0x9d, 0x85, 0x8a, 0xd7, 0x3c, 0x85, 0x89, 0xa0, 0xfa, 0xc1, 0xe3, 0x66, 0xa9, 0xfd, 0x4d, 0xb8,
	0x34, 0x86, 0x5d, 0xf8, 0xee, 0x43, 0xe7, 0x95, 0xe8, 0xf1, 0xcf, 0x6e, 0xc5, 0x58, 0xcd, 0x52,
	0xfb, 0x8f, 0x26, 0xa1, 0x15, 0x67, 0xb8, 0x71, 0xac, 0x2a, 0xbd, 0xcf, 0xf7, 0xa1, 0x2a, 0xb3,
	0xf2, 0x44, 0x87, 0xeb, 0x2b, 0xdf, 0x2c, 0xbe, 0x71, 0x2f, 0x24, 0xa1, 0xe7, 0xfa, 0x24, 0xb8,
	0x4a, 0x57, 0xcb, 0x59, 0xe3, 0x8e, 0xb2, 0x09, 0xbd, 0xa3, 0xec, 0x57, 0xd5, 0x8f, 0x4d, 0xd1,
	0x09, 0xc0, 0x35, 0x85, 0x6f, 0xbd, 0xce, 0x9c, 0x7a, 0x5e, 0x4d, 0x93, 0xf2, 0x4f, 0x55, 0x15,
	0x24, 0xfe, 0x53, 0xd9, 0xc4, 0xbf, 0x03, 0x8d, 0xcc, 0x8a, 0xdf, 0x40, 0x62, 0xbd, 0x06, 0xcd,
	0xec, 0x92, 0x5e, 0x3f, 0xdd, 0xff, 0xcf, 0x29, 0x38, 0x87, 0x82, 0xcb, 0xe5, 0x13, 0xe4, 0xc7,
	0xfb, 0x87, 0xfa, 0xf1, 0xd5, 0x43, 0x54, 0xb3, 0x90, 0xce, 0xc9, 0xbd, 0x78, 0x1f, 0xd2, 0xc5,
	0x24, 0x29, 0xb7, 0x4f, 0x5f, 0x6b, 0xf6, 0xe2, 0x9a, 0x0b, 0xad, 0x21, 0x53, 0xaa, 0x72, 0xe0,
	0xdc, 0x61, 0xe2, 0x57, 0x57, 0xc4, 0xb7, 0x5e, 0x43, 0x65, 0xcc, 0xc3, 0xa9, 0x7d, 0xf9, 0x4f,
	0x20, 0x01, 0xe7, 0x0f, 0x67, 0xdc, 0x9b, 0x2b, 0x58, 0xfd, 0xe1, 0x24, 0x2c, 0xa4, 0x44, 0xf7,
	0xae, 0x8f, 0x39, 0xef, 0x88, 0x63, 0xee, 0xdb, 0xe3, 0xf4, 0xee, 0x04, 0x87, 0x9c, 0x0b, 0xe7,
	0x0f, 0x55, 0x5d, 0xd5, 0x8d, 0x74, 0xfb, 0x75, 0xf4, 0xdd, 0x3c, 0x82, 0xde, 0x49, 0x0e, 0x82,
	0xbf, 0x9e, 0x84, 0xf7, 0x91, 0x62, 0x71, 0x72, 0x46, 0x7e, 0x22, 0x38, 0xd4, 0x4f, 0x3c, 0x3c,
	0x64, 0xe5, 0x87, 0x13, 0x3b, 0xb9, 0xb3, 0xe8, 0xc8, 0xac, 0x9f, 0x7d, 0xc4, 0x77, 0x5e, 0x7f,
	0xe6, 0xb4, 0x7b, 0xe7, 0x0a, 0xc0, 0x97, 0xde, 0x4e, 0x3f, 0x82, 0x5a, 0xfa, 0x0c, 0x18, 0x57,
	0xa6, 0xf8, 0xd3, 0x49, 0x76, 0xf9, 0x5f, 0xae, 0x02, 0x41, 0x78, 0x84, 0xd9, 0xad, 0x1d, 0x4b,
	0x94, 0x27, 0xb0, 0xbd, 0x5f, 0x87, 0x4b, 0x47, 0xab, 0x84, 0x32, 0xc0, 0xe5, 0xd7, 0x56, 0x26,
	0x73, 0x1c, 0xe5, 0x13, 0x98, 0xe2, 0xca, 0xef, 0xcf, 0xc0, 0x7c, 0xaa, 0x81, 0x0a, 0x17, 0x62,
	0xf4, 0xe0, 0x6c, 0xfc, 0x3f, 0x87, 0xa4, 0x7f, 0xcb, 0xc1, 0x28, 0x2a, 0x9d, 0xeb, 0xff, 0xcb,
	0xc8, 0xf9, 0xa2, 0xda, 0x62, 0xee, 0xf7, 0x20, 0xda, 0xa7, 0xee, 0x96, 0x8c, 0xef, 0xc3, 0x42,
	0xfc, 0xa6, 0xd6, 0x3a, 0x34, 0x7e, 0x8a, 0x2b, 0x85, 0x27, 0xa6, 0xfe, 0xd3, 0x07, 0x44, 0xff,
	0xff, 0xc3, 0x7c, 0xfc, 0x9a, 0x6a, 0x92, 0x1c, 0x4f, 0xfc, 0xfd, 0x23, 0x5a, 0x2c, 0x8b, 0x28,
	0xab, 0x16, 0xb4, 0x93, 0x51, 0xd6, 0xfe, 0xf7, 0x84, 0x42, 0xca, 0xf4, 0x89, 0xc0, 0x89, 0x29,
	0xcb, 0x5f, 0xa7, 0x25, 0xca, 0x3b, 0xb0, 0x98, 0xa2, 0x1c, 0xdf, 0xbc, 0x8e, 0x27, 0x7f, 0xf5,
	0x18, 0x3f, 0xd6, 0x4b, 0x73, 0xe8, 0x7a, 0x93, 0xbe, 0xef, 0x3c, 0x99, 0xde, 0xe4, 0x7e, 0x67,
	0x97, 0x66, 0xd9, 0x85, 0x56, 0xfc, 0x66, 0xe6, 0xe7, 0x5a, 0xc7, 0x4f, 0x73, 0xbd, 0x00, 0x21,
	0xff, 0x9b, 0xaf, 0x38, 0xcf, 0xce, 0x0c, 0xfd, 0x37, 0x3b, 0xf7, 0xfe, 0x2b, 0x00, 0x00, 0xff,
	0xff, 0x1d, 0xbe, 0xbd, 0xad, 0x83, 0x67, 0x00, 0x00,
}
