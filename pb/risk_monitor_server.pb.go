// Code generated by protoc-gen-go. DO NOT EDIT.
// source: risk_monitor_server.proto

package riskmonitorserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 订阅请求
type SubscribeReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeReq) Reset()         { *m = SubscribeReq{} }
func (m *SubscribeReq) String() string { return proto.CompactTextString(m) }
func (*SubscribeReq) ProtoMessage()    {}
func (*SubscribeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{0}
}
func (m *SubscribeReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeReq.Unmarshal(m, b)
}
func (m *SubscribeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeReq.Marshal(b, m, deterministic)
}
func (dst *SubscribeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeReq.Merge(dst, src)
}
func (m *SubscribeReq) XXX_Size() int {
	return xxx_messageInfo_SubscribeReq.Size(m)
}
func (m *SubscribeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeReq proto.InternalMessageInfo

// 订阅请求
type QryReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryReq) Reset()         { *m = QryReq{} }
func (m *QryReq) String() string { return proto.CompactTextString(m) }
func (*QryReq) ProtoMessage()    {}
func (*QryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{1}
}
func (m *QryReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryReq.Unmarshal(m, b)
}
func (m *QryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryReq.Marshal(b, m, deterministic)
}
func (dst *QryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryReq.Merge(dst, src)
}
func (m *QryReq) XXX_Size() int {
	return xxx_messageInfo_QryReq.Size(m)
}
func (m *QryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryReq proto.InternalMessageInfo

// 返回信息
type RspInfo struct {
	Errid                uint32   `protobuf:"varint,1,opt,name=errid" json:"errid,omitempty"`
	Errmsg               []byte   `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RspInfo) Reset()         { *m = RspInfo{} }
func (m *RspInfo) String() string { return proto.CompactTextString(m) }
func (*RspInfo) ProtoMessage()    {}
func (*RspInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{2}
}
func (m *RspInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspInfo.Unmarshal(m, b)
}
func (m *RspInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspInfo.Marshal(b, m, deterministic)
}
func (dst *RspInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspInfo.Merge(dst, src)
}
func (m *RspInfo) XXX_Size() int {
	return xxx_messageInfo_RspInfo.Size(m)
}
func (m *RspInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RspInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RspInfo proto.InternalMessageInfo

func (m *RspInfo) GetErrid() uint32 {
	if m != nil {
		return m.Errid
	}
	return 0
}

func (m *RspInfo) GetErrmsg() []byte {
	if m != nil {
		return m.Errmsg
	}
	return nil
}

// 值比较配置项
type SettingValueField struct {
	Name                 []byte   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Operator             uint32   `protobuf:"varint,2,opt,name=operator" json:"operator,omitempty"`
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettingValueField) Reset()         { *m = SettingValueField{} }
func (m *SettingValueField) String() string { return proto.CompactTextString(m) }
func (*SettingValueField) ProtoMessage()    {}
func (*SettingValueField) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{3}
}
func (m *SettingValueField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingValueField.Unmarshal(m, b)
}
func (m *SettingValueField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingValueField.Marshal(b, m, deterministic)
}
func (dst *SettingValueField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingValueField.Merge(dst, src)
}
func (m *SettingValueField) XXX_Size() int {
	return xxx_messageInfo_SettingValueField.Size(m)
}
func (m *SettingValueField) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingValueField.DiscardUnknown(m)
}

var xxx_messageInfo_SettingValueField proto.InternalMessageInfo

func (m *SettingValueField) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *SettingValueField) GetOperator() uint32 {
	if m != nil {
		return m.Operator
	}
	return 0
}

func (m *SettingValueField) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type QryHoldCustsByContractReq struct {
	ContractCode         []byte   `protobuf:"bytes,1,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryHoldCustsByContractReq) Reset()         { *m = QryHoldCustsByContractReq{} }
func (m *QryHoldCustsByContractReq) String() string { return proto.CompactTextString(m) }
func (*QryHoldCustsByContractReq) ProtoMessage()    {}
func (*QryHoldCustsByContractReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{4}
}
func (m *QryHoldCustsByContractReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryHoldCustsByContractReq.Unmarshal(m, b)
}
func (m *QryHoldCustsByContractReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryHoldCustsByContractReq.Marshal(b, m, deterministic)
}
func (dst *QryHoldCustsByContractReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryHoldCustsByContractReq.Merge(dst, src)
}
func (m *QryHoldCustsByContractReq) XXX_Size() int {
	return xxx_messageInfo_QryHoldCustsByContractReq.Size(m)
}
func (m *QryHoldCustsByContractReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryHoldCustsByContractReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryHoldCustsByContractReq proto.InternalMessageInfo

func (m *QryHoldCustsByContractReq) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

type QryHoldCustsByContractRsp struct {
	CustNos              [][]byte `protobuf:"bytes,1,rep,name=cust_nos,json=custNos,proto3" json:"cust_nos,omitempty"`
	RspInfo              *RspInfo `protobuf:"bytes,2,opt,name=rspInfo" json:"rspInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryHoldCustsByContractRsp) Reset()         { *m = QryHoldCustsByContractRsp{} }
func (m *QryHoldCustsByContractRsp) String() string { return proto.CompactTextString(m) }
func (*QryHoldCustsByContractRsp) ProtoMessage()    {}
func (*QryHoldCustsByContractRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{5}
}
func (m *QryHoldCustsByContractRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryHoldCustsByContractRsp.Unmarshal(m, b)
}
func (m *QryHoldCustsByContractRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryHoldCustsByContractRsp.Marshal(b, m, deterministic)
}
func (dst *QryHoldCustsByContractRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryHoldCustsByContractRsp.Merge(dst, src)
}
func (m *QryHoldCustsByContractRsp) XXX_Size() int {
	return xxx_messageInfo_QryHoldCustsByContractRsp.Size(m)
}
func (m *QryHoldCustsByContractRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QryHoldCustsByContractRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QryHoldCustsByContractRsp proto.InternalMessageInfo

func (m *QryHoldCustsByContractRsp) GetCustNos() [][]byte {
	if m != nil {
		return m.CustNos
	}
	return nil
}

func (m *QryHoldCustsByContractRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

// 行情监控推送
type QuoteMonRtn struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte   `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	SmarketCode          []byte   `protobuf:"bytes,4,opt,name=smarket_code,json=smarketCode,proto3" json:"smarket_code,omitempty"`
	SecCode              []byte   `protobuf:"bytes,5,opt,name=sec_code,json=secCode,proto3" json:"sec_code,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,6,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	TradeType            []byte   `protobuf:"bytes,7,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	LastPrice            float64  `protobuf:"fixed64,8,opt,name=last_price,json=lastPrice" json:"last_price,omitempty"`
	PreSettlementPrice   float64  `protobuf:"fixed64,9,opt,name=pre_settlement_price,json=preSettlementPrice" json:"pre_settlement_price,omitempty"`
	SettlementPrice      float64  `protobuf:"fixed64,10,opt,name=settlement_price,json=settlementPrice" json:"settlement_price,omitempty"`
	RfLimitPrice         float64  `protobuf:"fixed64,11,opt,name=rf_limit_price,json=rfLimitPrice" json:"rf_limit_price,omitempty"`
	Chg                  float64  `protobuf:"fixed64,12,opt,name=chg" json:"chg,omitempty"`
	RiskLevel            []byte   `protobuf:"bytes,13,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`
	OpenInterest         uint32   `protobuf:"varint,14,opt,name=open_interest,json=openInterest" json:"open_interest,omitempty"`
	MinMargin            float64  `protobuf:"fixed64,15,opt,name=min_margin,json=minMargin" json:"min_margin,omitempty"`
	MarginRatio          float64  `protobuf:"fixed64,16,opt,name=margin_ratio,json=marginRatio" json:"margin_ratio,omitempty"`
	MarginDiff           float64  `protobuf:"fixed64,17,opt,name=margin_diff,json=marginDiff" json:"margin_diff,omitempty"`
	TickPriceNum         uint32   `protobuf:"varint,18,opt,name=tick_price_num,json=tickPriceNum" json:"tick_price_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuoteMonRtn) Reset()         { *m = QuoteMonRtn{} }
func (m *QuoteMonRtn) String() string { return proto.CompactTextString(m) }
func (*QuoteMonRtn) ProtoMessage()    {}
func (*QuoteMonRtn) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{6}
}
func (m *QuoteMonRtn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuoteMonRtn.Unmarshal(m, b)
}
func (m *QuoteMonRtn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuoteMonRtn.Marshal(b, m, deterministic)
}
func (dst *QuoteMonRtn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteMonRtn.Merge(dst, src)
}
func (m *QuoteMonRtn) XXX_Size() int {
	return xxx_messageInfo_QuoteMonRtn.Size(m)
}
func (m *QuoteMonRtn) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteMonRtn.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteMonRtn proto.InternalMessageInfo

func (m *QuoteMonRtn) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *QuoteMonRtn) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *QuoteMonRtn) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *QuoteMonRtn) GetSmarketCode() []byte {
	if m != nil {
		return m.SmarketCode
	}
	return nil
}

func (m *QuoteMonRtn) GetSecCode() []byte {
	if m != nil {
		return m.SecCode
	}
	return nil
}

func (m *QuoteMonRtn) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *QuoteMonRtn) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *QuoteMonRtn) GetLastPrice() float64 {
	if m != nil {
		return m.LastPrice
	}
	return 0
}

func (m *QuoteMonRtn) GetPreSettlementPrice() float64 {
	if m != nil {
		return m.PreSettlementPrice
	}
	return 0
}

func (m *QuoteMonRtn) GetSettlementPrice() float64 {
	if m != nil {
		return m.SettlementPrice
	}
	return 0
}

func (m *QuoteMonRtn) GetRfLimitPrice() float64 {
	if m != nil {
		return m.RfLimitPrice
	}
	return 0
}

func (m *QuoteMonRtn) GetChg() float64 {
	if m != nil {
		return m.Chg
	}
	return 0
}

func (m *QuoteMonRtn) GetRiskLevel() []byte {
	if m != nil {
		return m.RiskLevel
	}
	return nil
}

func (m *QuoteMonRtn) GetOpenInterest() uint32 {
	if m != nil {
		return m.OpenInterest
	}
	return 0
}

func (m *QuoteMonRtn) GetMinMargin() float64 {
	if m != nil {
		return m.MinMargin
	}
	return 0
}

func (m *QuoteMonRtn) GetMarginRatio() float64 {
	if m != nil {
		return m.MarginRatio
	}
	return 0
}

func (m *QuoteMonRtn) GetMarginDiff() float64 {
	if m != nil {
		return m.MarginDiff
	}
	return 0
}

func (m *QuoteMonRtn) GetTickPriceNum() uint32 {
	if m != nil {
		return m.TickPriceNum
	}
	return 0
}

// 风险客户推送
type CustRiskRtn struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte   `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	CustNo               []byte   `protobuf:"bytes,4,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustClass            []byte   `protobuf:"bytes,5,opt,name=cust_class,json=custClass,proto3" json:"cust_class,omitempty"`
	CustName             []byte   `protobuf:"bytes,6,opt,name=cust_name,json=custName,proto3" json:"cust_name,omitempty"`
	MobilePhone          []byte   `protobuf:"bytes,7,opt,name=mobile_phone,json=mobilePhone,proto3" json:"mobile_phone,omitempty"`
	Clientmode           []byte   `protobuf:"bytes,8,opt,name=clientmode,proto3" json:"clientmode,omitempty"`
	RiskLevel            []byte   `protobuf:"bytes,9,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`
	RiskDegree0          float64  `protobuf:"fixed64,10,opt,name=risk_degree0,json=riskDegree0" json:"risk_degree0,omitempty"`
	RiskDegree1          float64  `protobuf:"fixed64,11,opt,name=risk_degree1,json=riskDegree1" json:"risk_degree1,omitempty"`
	RiskDegree2          float64  `protobuf:"fixed64,12,opt,name=risk_degree2,json=riskDegree2" json:"risk_degree2,omitempty"`
	RiskDegree3          float64  `protobuf:"fixed64,13,opt,name=risk_degree3,json=riskDegree3" json:"risk_degree3,omitempty"`
	LastRiskLevel        []byte   `protobuf:"bytes,14,opt,name=last_risk_level,json=lastRiskLevel,proto3" json:"last_risk_level,omitempty"`
	LastRemain           float64  `protobuf:"fixed64,15,opt,name=last_remain,json=lastRemain" json:"last_remain,omitempty"`
	Margin               float64  `protobuf:"fixed64,16,opt,name=margin" json:"margin,omitempty"`
	DropProfit           float64  `protobuf:"fixed64,17,opt,name=drop_profit,json=dropProfit" json:"drop_profit,omitempty"`
	HoldProfit           float64  `protobuf:"fixed64,18,opt,name=hold_profit,json=holdProfit" json:"hold_profit,omitempty"`
	TodayInout           float64  `protobuf:"fixed64,19,opt,name=today_inout,json=todayInout" json:"today_inout,omitempty"`
	RoyaltyInout         float64  `protobuf:"fixed64,20,opt,name=royalty_inout,json=royaltyInout" json:"royalty_inout,omitempty"`
	DynCapRight          float64  `protobuf:"fixed64,21,opt,name=dyn_cap_right,json=dynCapRight" json:"dyn_cap_right,omitempty"`
	ExchMargin           float64  `protobuf:"fixed64,22,opt,name=exch_margin,json=exchMargin" json:"exch_margin,omitempty"`
	AvailFund            float64  `protobuf:"fixed64,23,opt,name=avail_fund,json=availFund" json:"avail_fund,omitempty"`
	OptionCap            float64  `protobuf:"fixed64,24,opt,name=option_cap,json=optionCap" json:"option_cap,omitempty"`
	DynRights            float64  `protobuf:"fixed64,25,opt,name=dyn_rights,json=dynRights" json:"dyn_rights,omitempty"`
	OptionDynMargin      float64  `protobuf:"fixed64,26,opt,name=option_dyn_margin,json=optionDynMargin" json:"option_dyn_margin,omitempty"`
	FrznMargin           float64  `protobuf:"fixed64,27,opt,name=frzn_margin,json=frznMargin" json:"frzn_margin,omitempty"`
	FrznRoyalty          float64  `protobuf:"fixed64,28,opt,name=frzn_royalty,json=frznRoyalty" json:"frzn_royalty,omitempty"`
	ExchFrznMargin       float64  `protobuf:"fixed64,29,opt,name=exch_frzn_margin,json=exchFrznMargin" json:"exch_frzn_margin,omitempty"`
	FrznStrikeMargin     float64  `protobuf:"fixed64,30,opt,name=frzn_strike_margin,json=frznStrikeMargin" json:"frzn_strike_margin,omitempty"`
	OptionNowMargin      float64  `protobuf:"fixed64,31,opt,name=option_now_margin,json=optionNowMargin" json:"option_now_margin,omitempty"`
	ExchOptionNowMargin  float64  `protobuf:"fixed64,32,opt,name=exch_option_now_margin,json=exchOptionNowMargin" json:"exch_option_now_margin,omitempty"`
	ExchOptionDynMargin  float64  `protobuf:"fixed64,33,opt,name=exch_option_dyn_margin,json=exchOptionDynMargin" json:"exch_option_dyn_margin,omitempty"`
	RiskContractQty      uint32   `protobuf:"varint,34,opt,name=risk_contract_qty,json=riskContractQty" json:"risk_contract_qty,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,35,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	TradingNo            []byte   `protobuf:"bytes,36,opt,name=trading_no,json=tradingNo,proto3" json:"trading_no,omitempty"`
	DynRatio             float64  `protobuf:"fixed64,37,opt,name=dyn_ratio,json=dynRatio" json:"dyn_ratio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustRiskRtn) Reset()         { *m = CustRiskRtn{} }
func (m *CustRiskRtn) String() string { return proto.CompactTextString(m) }
func (*CustRiskRtn) ProtoMessage()    {}
func (*CustRiskRtn) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{7}
}
func (m *CustRiskRtn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustRiskRtn.Unmarshal(m, b)
}
func (m *CustRiskRtn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustRiskRtn.Marshal(b, m, deterministic)
}
func (dst *CustRiskRtn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustRiskRtn.Merge(dst, src)
}
func (m *CustRiskRtn) XXX_Size() int {
	return xxx_messageInfo_CustRiskRtn.Size(m)
}
func (m *CustRiskRtn) XXX_DiscardUnknown() {
	xxx_messageInfo_CustRiskRtn.DiscardUnknown(m)
}

var xxx_messageInfo_CustRiskRtn proto.InternalMessageInfo

func (m *CustRiskRtn) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *CustRiskRtn) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *CustRiskRtn) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *CustRiskRtn) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *CustRiskRtn) GetCustClass() []byte {
	if m != nil {
		return m.CustClass
	}
	return nil
}

func (m *CustRiskRtn) GetCustName() []byte {
	if m != nil {
		return m.CustName
	}
	return nil
}

func (m *CustRiskRtn) GetMobilePhone() []byte {
	if m != nil {
		return m.MobilePhone
	}
	return nil
}

func (m *CustRiskRtn) GetClientmode() []byte {
	if m != nil {
		return m.Clientmode
	}
	return nil
}

func (m *CustRiskRtn) GetRiskLevel() []byte {
	if m != nil {
		return m.RiskLevel
	}
	return nil
}

func (m *CustRiskRtn) GetRiskDegree0() float64 {
	if m != nil {
		return m.RiskDegree0
	}
	return 0
}

func (m *CustRiskRtn) GetRiskDegree1() float64 {
	if m != nil {
		return m.RiskDegree1
	}
	return 0
}

func (m *CustRiskRtn) GetRiskDegree2() float64 {
	if m != nil {
		return m.RiskDegree2
	}
	return 0
}

func (m *CustRiskRtn) GetRiskDegree3() float64 {
	if m != nil {
		return m.RiskDegree3
	}
	return 0
}

func (m *CustRiskRtn) GetLastRiskLevel() []byte {
	if m != nil {
		return m.LastRiskLevel
	}
	return nil
}

func (m *CustRiskRtn) GetLastRemain() float64 {
	if m != nil {
		return m.LastRemain
	}
	return 0
}

func (m *CustRiskRtn) GetMargin() float64 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *CustRiskRtn) GetDropProfit() float64 {
	if m != nil {
		return m.DropProfit
	}
	return 0
}

func (m *CustRiskRtn) GetHoldProfit() float64 {
	if m != nil {
		return m.HoldProfit
	}
	return 0
}

func (m *CustRiskRtn) GetTodayInout() float64 {
	if m != nil {
		return m.TodayInout
	}
	return 0
}

func (m *CustRiskRtn) GetRoyaltyInout() float64 {
	if m != nil {
		return m.RoyaltyInout
	}
	return 0
}

func (m *CustRiskRtn) GetDynCapRight() float64 {
	if m != nil {
		return m.DynCapRight
	}
	return 0
}

func (m *CustRiskRtn) GetExchMargin() float64 {
	if m != nil {
		return m.ExchMargin
	}
	return 0
}

func (m *CustRiskRtn) GetAvailFund() float64 {
	if m != nil {
		return m.AvailFund
	}
	return 0
}

func (m *CustRiskRtn) GetOptionCap() float64 {
	if m != nil {
		return m.OptionCap
	}
	return 0
}

func (m *CustRiskRtn) GetDynRights() float64 {
	if m != nil {
		return m.DynRights
	}
	return 0
}

func (m *CustRiskRtn) GetOptionDynMargin() float64 {
	if m != nil {
		return m.OptionDynMargin
	}
	return 0
}

func (m *CustRiskRtn) GetFrznMargin() float64 {
	if m != nil {
		return m.FrznMargin
	}
	return 0
}

func (m *CustRiskRtn) GetFrznRoyalty() float64 {
	if m != nil {
		return m.FrznRoyalty
	}
	return 0
}

func (m *CustRiskRtn) GetExchFrznMargin() float64 {
	if m != nil {
		return m.ExchFrznMargin
	}
	return 0
}

func (m *CustRiskRtn) GetFrznStrikeMargin() float64 {
	if m != nil {
		return m.FrznStrikeMargin
	}
	return 0
}

func (m *CustRiskRtn) GetOptionNowMargin() float64 {
	if m != nil {
		return m.OptionNowMargin
	}
	return 0
}

func (m *CustRiskRtn) GetExchOptionNowMargin() float64 {
	if m != nil {
		return m.ExchOptionNowMargin
	}
	return 0
}

func (m *CustRiskRtn) GetExchOptionDynMargin() float64 {
	if m != nil {
		return m.ExchOptionDynMargin
	}
	return 0
}

func (m *CustRiskRtn) GetRiskContractQty() uint32 {
	if m != nil {
		return m.RiskContractQty
	}
	return 0
}

func (m *CustRiskRtn) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

func (m *CustRiskRtn) GetTradingNo() []byte {
	if m != nil {
		return m.TradingNo
	}
	return nil
}

func (m *CustRiskRtn) GetDynRatio() float64 {
	if m != nil {
		return m.DynRatio
	}
	return 0
}

// 客户持仓推送
type CustHoldRtn struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte   `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	CustNo               []byte   `protobuf:"bytes,4,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustClass            []byte   `protobuf:"bytes,5,opt,name=cust_class,json=custClass,proto3" json:"cust_class,omitempty"`
	ExchCode             []byte   `protobuf:"bytes,6,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode             []byte   `protobuf:"bytes,7,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,8,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	DelivDate            []byte   `protobuf:"bytes,9,opt,name=deliv_date,json=delivDate,proto3" json:"deliv_date,omitempty"`
	ShFlag               []byte   `protobuf:"bytes,10,opt,name=sh_flag,json=shFlag,proto3" json:"sh_flag,omitempty"`
	BsFlag               []byte   `protobuf:"bytes,11,opt,name=bs_flag,json=bsFlag,proto3" json:"bs_flag,omitempty"`
	HoldBSum             uint32   `protobuf:"varint,12,opt,name=hold_b_sum,json=holdBSum" json:"hold_b_sum,omitempty"`
	HoldSSum             uint32   `protobuf:"varint,13,opt,name=hold_s_sum,json=holdSSum" json:"hold_s_sum,omitempty"`
	HoldSum              uint32   `protobuf:"varint,14,opt,name=hold_sum,json=holdSum" json:"hold_sum,omitempty"`
	TradeType            []byte   `protobuf:"bytes,15,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	CpFlag               []byte   `protobuf:"bytes,16,opt,name=cp_flag,json=cpFlag,proto3" json:"cp_flag,omitempty"`
	MonthFlag            []byte   `protobuf:"bytes,17,opt,name=month_flag,json=monthFlag,proto3" json:"month_flag,omitempty"`
	LimitRatio           float64  `protobuf:"fixed64,18,opt,name=limit_ratio,json=limitRatio" json:"limit_ratio,omitempty"`
	LimitVolmue          uint32   `protobuf:"varint,19,opt,name=limit_volmue,json=limitVolmue" json:"limit_volmue,omitempty"`
	OverVolume           uint32   `protobuf:"varint,20,opt,name=over_volume,json=overVolume" json:"over_volume,omitempty"`
	ExpireDays           uint32   `protobuf:"varint,21,opt,name=expire_days,json=expireDays" json:"expire_days,omitempty"`
	LimitBase            uint32   `protobuf:"varint,22,opt,name=limit_base,json=limitBase" json:"limit_base,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustHoldRtn) Reset()         { *m = CustHoldRtn{} }
func (m *CustHoldRtn) String() string { return proto.CompactTextString(m) }
func (*CustHoldRtn) ProtoMessage()    {}
func (*CustHoldRtn) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{8}
}
func (m *CustHoldRtn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustHoldRtn.Unmarshal(m, b)
}
func (m *CustHoldRtn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustHoldRtn.Marshal(b, m, deterministic)
}
func (dst *CustHoldRtn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustHoldRtn.Merge(dst, src)
}
func (m *CustHoldRtn) XXX_Size() int {
	return xxx_messageInfo_CustHoldRtn.Size(m)
}
func (m *CustHoldRtn) XXX_DiscardUnknown() {
	xxx_messageInfo_CustHoldRtn.DiscardUnknown(m)
}

var xxx_messageInfo_CustHoldRtn proto.InternalMessageInfo

func (m *CustHoldRtn) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *CustHoldRtn) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *CustHoldRtn) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *CustHoldRtn) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *CustHoldRtn) GetCustClass() []byte {
	if m != nil {
		return m.CustClass
	}
	return nil
}

func (m *CustHoldRtn) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *CustHoldRtn) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *CustHoldRtn) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *CustHoldRtn) GetDelivDate() []byte {
	if m != nil {
		return m.DelivDate
	}
	return nil
}

func (m *CustHoldRtn) GetShFlag() []byte {
	if m != nil {
		return m.ShFlag
	}
	return nil
}

func (m *CustHoldRtn) GetBsFlag() []byte {
	if m != nil {
		return m.BsFlag
	}
	return nil
}

func (m *CustHoldRtn) GetHoldBSum() uint32 {
	if m != nil {
		return m.HoldBSum
	}
	return 0
}

func (m *CustHoldRtn) GetHoldSSum() uint32 {
	if m != nil {
		return m.HoldSSum
	}
	return 0
}

func (m *CustHoldRtn) GetHoldSum() uint32 {
	if m != nil {
		return m.HoldSum
	}
	return 0
}

func (m *CustHoldRtn) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *CustHoldRtn) GetCpFlag() []byte {
	if m != nil {
		return m.CpFlag
	}
	return nil
}

func (m *CustHoldRtn) GetMonthFlag() []byte {
	if m != nil {
		return m.MonthFlag
	}
	return nil
}

func (m *CustHoldRtn) GetLimitRatio() float64 {
	if m != nil {
		return m.LimitRatio
	}
	return 0
}

func (m *CustHoldRtn) GetLimitVolmue() uint32 {
	if m != nil {
		return m.LimitVolmue
	}
	return 0
}

func (m *CustHoldRtn) GetOverVolume() uint32 {
	if m != nil {
		return m.OverVolume
	}
	return 0
}

func (m *CustHoldRtn) GetExpireDays() uint32 {
	if m != nil {
		return m.ExpireDays
	}
	return 0
}

func (m *CustHoldRtn) GetLimitBase() uint32 {
	if m != nil {
		return m.LimitBase
	}
	return 0
}

// 客户组持仓推送
type CustGroupHoldRtn struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte   `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	CustGroupNo          []byte   `protobuf:"bytes,4,opt,name=cust_group_no,json=custGroupNo,proto3" json:"cust_group_no,omitempty"`
	CustGroupName        []byte   `protobuf:"bytes,5,opt,name=cust_group_name,json=custGroupName,proto3" json:"cust_group_name,omitempty"`
	ExchCode             []byte   `protobuf:"bytes,6,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode             []byte   `protobuf:"bytes,7,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,8,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	DelivDate            []byte   `protobuf:"bytes,9,opt,name=deliv_date,json=delivDate,proto3" json:"deliv_date,omitempty"`
	ShFlag               []byte   `protobuf:"bytes,10,opt,name=sh_flag,json=shFlag,proto3" json:"sh_flag,omitempty"`
	BsFlag               []byte   `protobuf:"bytes,11,opt,name=bs_flag,json=bsFlag,proto3" json:"bs_flag,omitempty"`
	HoldBSum             uint32   `protobuf:"varint,12,opt,name=hold_b_sum,json=holdBSum" json:"hold_b_sum,omitempty"`
	HoldSSum             uint32   `protobuf:"varint,13,opt,name=hold_s_sum,json=holdSSum" json:"hold_s_sum,omitempty"`
	HoldSum              uint32   `protobuf:"varint,14,opt,name=hold_sum,json=holdSum" json:"hold_sum,omitempty"`
	TradeType            []byte   `protobuf:"bytes,15,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	CpFlag               []byte   `protobuf:"bytes,16,opt,name=cp_flag,json=cpFlag,proto3" json:"cp_flag,omitempty"`
	MonthFlag            []byte   `protobuf:"bytes,17,opt,name=month_flag,json=monthFlag,proto3" json:"month_flag,omitempty"`
	LimitRatio           float64  `protobuf:"fixed64,18,opt,name=limit_ratio,json=limitRatio" json:"limit_ratio,omitempty"`
	LimitVolmue          uint32   `protobuf:"varint,19,opt,name=limit_volmue,json=limitVolmue" json:"limit_volmue,omitempty"`
	OverVolume           uint32   `protobuf:"varint,20,opt,name=over_volume,json=overVolume" json:"over_volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustGroupHoldRtn) Reset()         { *m = CustGroupHoldRtn{} }
func (m *CustGroupHoldRtn) String() string { return proto.CompactTextString(m) }
func (*CustGroupHoldRtn) ProtoMessage()    {}
func (*CustGroupHoldRtn) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{9}
}
func (m *CustGroupHoldRtn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustGroupHoldRtn.Unmarshal(m, b)
}
func (m *CustGroupHoldRtn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustGroupHoldRtn.Marshal(b, m, deterministic)
}
func (dst *CustGroupHoldRtn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustGroupHoldRtn.Merge(dst, src)
}
func (m *CustGroupHoldRtn) XXX_Size() int {
	return xxx_messageInfo_CustGroupHoldRtn.Size(m)
}
func (m *CustGroupHoldRtn) XXX_DiscardUnknown() {
	xxx_messageInfo_CustGroupHoldRtn.DiscardUnknown(m)
}

var xxx_messageInfo_CustGroupHoldRtn proto.InternalMessageInfo

func (m *CustGroupHoldRtn) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *CustGroupHoldRtn) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *CustGroupHoldRtn) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *CustGroupHoldRtn) GetCustGroupNo() []byte {
	if m != nil {
		return m.CustGroupNo
	}
	return nil
}

func (m *CustGroupHoldRtn) GetCustGroupName() []byte {
	if m != nil {
		return m.CustGroupName
	}
	return nil
}

func (m *CustGroupHoldRtn) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *CustGroupHoldRtn) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *CustGroupHoldRtn) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *CustGroupHoldRtn) GetDelivDate() []byte {
	if m != nil {
		return m.DelivDate
	}
	return nil
}

func (m *CustGroupHoldRtn) GetShFlag() []byte {
	if m != nil {
		return m.ShFlag
	}
	return nil
}

func (m *CustGroupHoldRtn) GetBsFlag() []byte {
	if m != nil {
		return m.BsFlag
	}
	return nil
}

func (m *CustGroupHoldRtn) GetHoldBSum() uint32 {
	if m != nil {
		return m.HoldBSum
	}
	return 0
}

func (m *CustGroupHoldRtn) GetHoldSSum() uint32 {
	if m != nil {
		return m.HoldSSum
	}
	return 0
}

func (m *CustGroupHoldRtn) GetHoldSum() uint32 {
	if m != nil {
		return m.HoldSum
	}
	return 0
}

func (m *CustGroupHoldRtn) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *CustGroupHoldRtn) GetCpFlag() []byte {
	if m != nil {
		return m.CpFlag
	}
	return nil
}

func (m *CustGroupHoldRtn) GetMonthFlag() []byte {
	if m != nil {
		return m.MonthFlag
	}
	return nil
}

func (m *CustGroupHoldRtn) GetLimitRatio() float64 {
	if m != nil {
		return m.LimitRatio
	}
	return 0
}

func (m *CustGroupHoldRtn) GetLimitVolmue() uint32 {
	if m != nil {
		return m.LimitVolmue
	}
	return 0
}

func (m *CustGroupHoldRtn) GetOverVolume() uint32 {
	if m != nil {
		return m.OverVolume
	}
	return 0
}

// 商品组风险推送
type ProuctGroupRiskRtn struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte   `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	ProductGroupNo       []byte   `protobuf:"bytes,4,opt,name=product_group_no,json=productGroupNo,proto3" json:"product_group_no,omitempty"`
	ProductGroupName     []byte   `protobuf:"bytes,5,opt,name=product_group_name,json=productGroupName,proto3" json:"product_group_name,omitempty"`
	Count                uint32   `protobuf:"varint,6,opt,name=count" json:"count,omitempty"`
	RiskCount            uint32   `protobuf:"varint,7,opt,name=risk_count,json=riskCount" json:"risk_count,omitempty"`
	RiskDegree           float64  `protobuf:"fixed64,8,opt,name=risk_degree,json=riskDegree" json:"risk_degree,omitempty"`
	SmarketCode          []byte   `protobuf:"bytes,9,opt,name=smarket_code,json=smarketCode,proto3" json:"smarket_code,omitempty"`
	SecCode              []byte   `protobuf:"bytes,10,opt,name=sec_code,json=secCode,proto3" json:"sec_code,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,11,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	TradeType            []byte   `protobuf:"bytes,12,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	LastPrice            float64  `protobuf:"fixed64,13,opt,name=last_price,json=lastPrice" json:"last_price,omitempty"`
	PreSettlementPrice   float64  `protobuf:"fixed64,14,opt,name=pre_settlement_price,json=preSettlementPrice" json:"pre_settlement_price,omitempty"`
	SettlementPrice      float64  `protobuf:"fixed64,15,opt,name=settlement_price,json=settlementPrice" json:"settlement_price,omitempty"`
	RfLimitPrice         float64  `protobuf:"fixed64,16,opt,name=rf_limit_price,json=rfLimitPrice" json:"rf_limit_price,omitempty"`
	Chg                  float64  `protobuf:"fixed64,17,opt,name=chg" json:"chg,omitempty"`
	RiskLevel            []byte   `protobuf:"bytes,18,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`
	OpenInterest         uint32   `protobuf:"varint,19,opt,name=open_interest,json=openInterest" json:"open_interest,omitempty"`
	MinMargin            float64  `protobuf:"fixed64,20,opt,name=min_margin,json=minMargin" json:"min_margin,omitempty"`
	MarginRatio          float64  `protobuf:"fixed64,21,opt,name=margin_ratio,json=marginRatio" json:"margin_ratio,omitempty"`
	MarginDiff           float64  `protobuf:"fixed64,22,opt,name=margin_diff,json=marginDiff" json:"margin_diff,omitempty"`
	TickPriceNum         uint32   `protobuf:"varint,23,opt,name=tick_price_num,json=tickPriceNum" json:"tick_price_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProuctGroupRiskRtn) Reset()         { *m = ProuctGroupRiskRtn{} }
func (m *ProuctGroupRiskRtn) String() string { return proto.CompactTextString(m) }
func (*ProuctGroupRiskRtn) ProtoMessage()    {}
func (*ProuctGroupRiskRtn) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{10}
}
func (m *ProuctGroupRiskRtn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProuctGroupRiskRtn.Unmarshal(m, b)
}
func (m *ProuctGroupRiskRtn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProuctGroupRiskRtn.Marshal(b, m, deterministic)
}
func (dst *ProuctGroupRiskRtn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProuctGroupRiskRtn.Merge(dst, src)
}
func (m *ProuctGroupRiskRtn) XXX_Size() int {
	return xxx_messageInfo_ProuctGroupRiskRtn.Size(m)
}
func (m *ProuctGroupRiskRtn) XXX_DiscardUnknown() {
	xxx_messageInfo_ProuctGroupRiskRtn.DiscardUnknown(m)
}

var xxx_messageInfo_ProuctGroupRiskRtn proto.InternalMessageInfo

func (m *ProuctGroupRiskRtn) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *ProuctGroupRiskRtn) GetProductGroupNo() []byte {
	if m != nil {
		return m.ProductGroupNo
	}
	return nil
}

func (m *ProuctGroupRiskRtn) GetProductGroupName() []byte {
	if m != nil {
		return m.ProductGroupName
	}
	return nil
}

func (m *ProuctGroupRiskRtn) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetRiskCount() uint32 {
	if m != nil {
		return m.RiskCount
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetRiskDegree() float64 {
	if m != nil {
		return m.RiskDegree
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetSmarketCode() []byte {
	if m != nil {
		return m.SmarketCode
	}
	return nil
}

func (m *ProuctGroupRiskRtn) GetSecCode() []byte {
	if m != nil {
		return m.SecCode
	}
	return nil
}

func (m *ProuctGroupRiskRtn) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *ProuctGroupRiskRtn) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *ProuctGroupRiskRtn) GetLastPrice() float64 {
	if m != nil {
		return m.LastPrice
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetPreSettlementPrice() float64 {
	if m != nil {
		return m.PreSettlementPrice
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetSettlementPrice() float64 {
	if m != nil {
		return m.SettlementPrice
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetRfLimitPrice() float64 {
	if m != nil {
		return m.RfLimitPrice
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetChg() float64 {
	if m != nil {
		return m.Chg
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetRiskLevel() []byte {
	if m != nil {
		return m.RiskLevel
	}
	return nil
}

func (m *ProuctGroupRiskRtn) GetOpenInterest() uint32 {
	if m != nil {
		return m.OpenInterest
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetMinMargin() float64 {
	if m != nil {
		return m.MinMargin
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetMarginRatio() float64 {
	if m != nil {
		return m.MarginRatio
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetMarginDiff() float64 {
	if m != nil {
		return m.MarginDiff
	}
	return 0
}

func (m *ProuctGroupRiskRtn) GetTickPriceNum() uint32 {
	if m != nil {
		return m.TickPriceNum
	}
	return 0
}

// 客户信息查询请求
type QryCustSimpleInfoReq struct {
	CustNo               []byte   `protobuf:"bytes,1,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustClass            []byte   `protobuf:"bytes,2,opt,name=cust_class,json=custClass,proto3" json:"cust_class,omitempty"`
	CustStatus           []byte   `protobuf:"bytes,3,opt,name=cust_status,json=custStatus,proto3" json:"cust_status,omitempty"`
	CustName             []byte   `protobuf:"bytes,4,opt,name=cust_name,json=custName,proto3" json:"cust_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryCustSimpleInfoReq) Reset()         { *m = QryCustSimpleInfoReq{} }
func (m *QryCustSimpleInfoReq) String() string { return proto.CompactTextString(m) }
func (*QryCustSimpleInfoReq) ProtoMessage()    {}
func (*QryCustSimpleInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{11}
}
func (m *QryCustSimpleInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryCustSimpleInfoReq.Unmarshal(m, b)
}
func (m *QryCustSimpleInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryCustSimpleInfoReq.Marshal(b, m, deterministic)
}
func (dst *QryCustSimpleInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryCustSimpleInfoReq.Merge(dst, src)
}
func (m *QryCustSimpleInfoReq) XXX_Size() int {
	return xxx_messageInfo_QryCustSimpleInfoReq.Size(m)
}
func (m *QryCustSimpleInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryCustSimpleInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryCustSimpleInfoReq proto.InternalMessageInfo

func (m *QryCustSimpleInfoReq) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *QryCustSimpleInfoReq) GetCustClass() []byte {
	if m != nil {
		return m.CustClass
	}
	return nil
}

func (m *QryCustSimpleInfoReq) GetCustStatus() []byte {
	if m != nil {
		return m.CustStatus
	}
	return nil
}

func (m *QryCustSimpleInfoReq) GetCustName() []byte {
	if m != nil {
		return m.CustName
	}
	return nil
}

// 客户信息查询应答
type QryCustSimpleInfoRsp struct {
	RspInfo              *RspInfo `protobuf:"bytes,1,opt,name=rspInfo" json:"rspInfo,omitempty"`
	PackFlag             uint32   `protobuf:"varint,2,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	CustNo               []byte   `protobuf:"bytes,3,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustClass            []byte   `protobuf:"bytes,4,opt,name=cust_class,json=custClass,proto3" json:"cust_class,omitempty"`
	CustStatus           []byte   `protobuf:"bytes,5,opt,name=cust_status,json=custStatus,proto3" json:"cust_status,omitempty"`
	CustName             []byte   `protobuf:"bytes,6,opt,name=cust_name,json=custName,proto3" json:"cust_name,omitempty"`
	Phone                []byte   `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
	Fax                  []byte   `protobuf:"bytes,8,opt,name=fax,proto3" json:"fax,omitempty"`
	Addr                 []byte   `protobuf:"bytes,9,opt,name=addr,proto3" json:"addr,omitempty"`
	CmdAssign1           []byte   `protobuf:"bytes,10,opt,name=cmd_assign1,json=cmdAssign1,proto3" json:"cmd_assign1,omitempty"`
	FundAllot1           []byte   `protobuf:"bytes,11,opt,name=fund_allot1,json=fundAllot1,proto3" json:"fund_allot1,omitempty"`
	Email                []byte   `protobuf:"bytes,12,opt,name=email,proto3" json:"email,omitempty"`
	CmdAssign2           []byte   `protobuf:"bytes,13,opt,name=cmd_assign2,json=cmdAssign2,proto3" json:"cmd_assign2,omitempty"`
	MobilePhone          []byte   `protobuf:"bytes,14,opt,name=mobile_phone,json=mobilePhone,proto3" json:"mobile_phone,omitempty"`
	Clientmode           []byte   `protobuf:"bytes,15,opt,name=clientmode,proto3" json:"clientmode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryCustSimpleInfoRsp) Reset()         { *m = QryCustSimpleInfoRsp{} }
func (m *QryCustSimpleInfoRsp) String() string { return proto.CompactTextString(m) }
func (*QryCustSimpleInfoRsp) ProtoMessage()    {}
func (*QryCustSimpleInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{12}
}
func (m *QryCustSimpleInfoRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryCustSimpleInfoRsp.Unmarshal(m, b)
}
func (m *QryCustSimpleInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryCustSimpleInfoRsp.Marshal(b, m, deterministic)
}
func (dst *QryCustSimpleInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryCustSimpleInfoRsp.Merge(dst, src)
}
func (m *QryCustSimpleInfoRsp) XXX_Size() int {
	return xxx_messageInfo_QryCustSimpleInfoRsp.Size(m)
}
func (m *QryCustSimpleInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QryCustSimpleInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QryCustSimpleInfoRsp proto.InternalMessageInfo

func (m *QryCustSimpleInfoRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *QryCustSimpleInfoRsp) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetCustClass() []byte {
	if m != nil {
		return m.CustClass
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetCustStatus() []byte {
	if m != nil {
		return m.CustStatus
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetCustName() []byte {
	if m != nil {
		return m.CustName
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetPhone() []byte {
	if m != nil {
		return m.Phone
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetFax() []byte {
	if m != nil {
		return m.Fax
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetCmdAssign1() []byte {
	if m != nil {
		return m.CmdAssign1
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetFundAllot1() []byte {
	if m != nil {
		return m.FundAllot1
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetEmail() []byte {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetCmdAssign2() []byte {
	if m != nil {
		return m.CmdAssign2
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetMobilePhone() []byte {
	if m != nil {
		return m.MobilePhone
	}
	return nil
}

func (m *QryCustSimpleInfoRsp) GetClientmode() []byte {
	if m != nil {
		return m.Clientmode
	}
	return nil
}

// 实时资金查询请求
type QryRealFundReq struct {
	CustNo               []byte   `protobuf:"bytes,1,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryRealFundReq) Reset()         { *m = QryRealFundReq{} }
func (m *QryRealFundReq) String() string { return proto.CompactTextString(m) }
func (*QryRealFundReq) ProtoMessage()    {}
func (*QryRealFundReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{13}
}
func (m *QryRealFundReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryRealFundReq.Unmarshal(m, b)
}
func (m *QryRealFundReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryRealFundReq.Marshal(b, m, deterministic)
}
func (dst *QryRealFundReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryRealFundReq.Merge(dst, src)
}
func (m *QryRealFundReq) XXX_Size() int {
	return xxx_messageInfo_QryRealFundReq.Size(m)
}
func (m *QryRealFundReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryRealFundReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryRealFundReq proto.InternalMessageInfo

func (m *QryRealFundReq) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *QryRealFundReq) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

// 实时资金查询应答
type QryRealFundRsp struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	CustNo               []byte   `protobuf:"bytes,2,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustName             []byte   `protobuf:"bytes,3,opt,name=cust_name,json=custName,proto3" json:"cust_name,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	FundAccountNo        []byte   `protobuf:"bytes,5,opt,name=fund_account_no,json=fundAccountNo,proto3" json:"fund_account_no,omitempty"`
	LastRemain           float64  `protobuf:"fixed64,6,opt,name=last_remain,json=lastRemain" json:"last_remain,omitempty"`
	AvailFund            float64  `protobuf:"fixed64,7,opt,name=avail_fund,json=availFund" json:"avail_fund,omitempty"`
	BEntrustFrzn         float64  `protobuf:"fixed64,8,opt,name=b_entrust_frzn,json=bEntrustFrzn" json:"b_entrust_frzn,omitempty"`
	SEntrustFrzn         float64  `protobuf:"fixed64,9,opt,name=s_entrust_frzn,json=sEntrustFrzn" json:"s_entrust_frzn,omitempty"`
	Commi                float64  `protobuf:"fixed64,10,opt,name=commi" json:"commi,omitempty"`
	BMargin              float64  `protobuf:"fixed64,11,opt,name=b_margin,json=bMargin" json:"b_margin,omitempty"`
	SMargin              float64  `protobuf:"fixed64,12,opt,name=s_margin,json=sMargin" json:"s_margin,omitempty"`
	DropProfit           float64  `protobuf:"fixed64,13,opt,name=drop_profit,json=dropProfit" json:"drop_profit,omitempty"`
	HoldProfit           float64  `protobuf:"fixed64,14,opt,name=hold_profit,json=holdProfit" json:"hold_profit,omitempty"`
	WayMoney             float64  `protobuf:"fixed64,15,opt,name=way_money,json=wayMoney" json:"way_money,omitempty"`
	UndelivProfit        float64  `protobuf:"fixed64,16,opt,name=undeliv_profit,json=undelivProfit" json:"undeliv_profit,omitempty"`
	DynRights            float64  `protobuf:"fixed64,17,opt,name=dyn_rights,json=dynRights" json:"dyn_rights,omitempty"`
	TodayInout           float64  `protobuf:"fixed64,18,opt,name=today_inout,json=todayInout" json:"today_inout,omitempty"`
	TotalFrzn            float64  `protobuf:"fixed64,19,opt,name=total_frzn,json=totalFrzn" json:"total_frzn,omitempty"`
	Margin               float64  `protobuf:"fixed64,20,opt,name=margin" json:"margin,omitempty"`
	ExchMargin           float64  `protobuf:"fixed64,21,opt,name=exch_margin,json=exchMargin" json:"exch_margin,omitempty"`
	PledgeAmt            float64  `protobuf:"fixed64,22,opt,name=pledge_amt,json=pledgeAmt" json:"pledge_amt,omitempty"`
	CreditAmt            float64  `protobuf:"fixed64,23,opt,name=credit_amt,json=creditAmt" json:"credit_amt,omitempty"`
	RiskDegree0          float64  `protobuf:"fixed64,24,opt,name=risk_degree0,json=riskDegree0" json:"risk_degree0,omitempty"`
	RiskDegree1          float64  `protobuf:"fixed64,25,opt,name=risk_degree1,json=riskDegree1" json:"risk_degree1,omitempty"`
	RiskDegree2          float64  `protobuf:"fixed64,26,opt,name=risk_degree2,json=riskDegree2" json:"risk_degree2,omitempty"`
	RiskDegree3          float64  `protobuf:"fixed64,27,opt,name=risk_degree3,json=riskDegree3" json:"risk_degree3,omitempty"`
	RiskDegree4          float64  `protobuf:"fixed64,28,opt,name=risk_degree4,json=riskDegree4" json:"risk_degree4,omitempty"`
	RiskLevel            []byte   `protobuf:"bytes,29,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`
	FrznCommi            float64  `protobuf:"fixed64,30,opt,name=frzn_commi,json=frznCommi" json:"frzn_commi,omitempty"`
	CurrencyIn           float64  `protobuf:"fixed64,31,opt,name=currency_in,json=currencyIn" json:"currency_in,omitempty"`
	CurrencyOut          float64  `protobuf:"fixed64,32,opt,name=currency_out,json=currencyOut" json:"currency_out,omitempty"`
	InitialFund          float64  `protobuf:"fixed64,33,opt,name=initial_fund,json=initialFund" json:"initial_fund,omitempty"`
	PledgeBalance        float64  `protobuf:"fixed64,34,opt,name=pledge_balance,json=pledgeBalance" json:"pledge_balance,omitempty"`
	BorrowAmt            float64  `protobuf:"fixed64,35,opt,name=borrow_amt,json=borrowAmt" json:"borrow_amt,omitempty"`
	LendAmt              float64  `protobuf:"fixed64,36,opt,name=lend_amt,json=lendAmt" json:"lend_amt,omitempty"`
	SpecTotalFrzn        float64  `protobuf:"fixed64,37,opt,name=spec_total_frzn,json=specTotalFrzn" json:"spec_total_frzn,omitempty"`
	SpecBEntrustFrzn     float64  `protobuf:"fixed64,38,opt,name=spec_b_entrust_frzn,json=specBEntrustFrzn" json:"spec_b_entrust_frzn,omitempty"`
	SpecSEntrustFrzn     float64  `protobuf:"fixed64,39,opt,name=spec_s_entrust_frzn,json=specSEntrustFrzn" json:"spec_s_entrust_frzn,omitempty"`
	SpecBMargin          float64  `protobuf:"fixed64,40,opt,name=spec_b_margin,json=specBMargin" json:"spec_b_margin,omitempty"`
	SpecSMargin          float64  `protobuf:"fixed64,41,opt,name=spec_s_margin,json=specSMargin" json:"spec_s_margin,omitempty"`
	SpecMargin           float64  `protobuf:"fixed64,42,opt,name=spec_margin,json=specMargin" json:"spec_margin,omitempty"`
	SpecExchMargin       float64  `protobuf:"fixed64,43,opt,name=spec_exch_margin,json=specExchMargin" json:"spec_exch_margin,omitempty"`
	SpecFrznCommi        float64  `protobuf:"fixed64,44,opt,name=spec_frzn_commi,json=specFrznCommi" json:"spec_frzn_commi,omitempty"`
	SpecCommi            float64  `protobuf:"fixed64,45,opt,name=spec_commi,json=specCommi" json:"spec_commi,omitempty"`
	SpecDropProfit       float64  `protobuf:"fixed64,46,opt,name=spec_drop_profit,json=specDropProfit" json:"spec_drop_profit,omitempty"`
	SpecHoldProfit       float64  `protobuf:"fixed64,47,opt,name=spec_hold_profit,json=specHoldProfit" json:"spec_hold_profit,omitempty"`
	PledgeCurrencyIn     float64  `protobuf:"fixed64,48,opt,name=pledge_currency_in,json=pledgeCurrencyIn" json:"pledge_currency_in,omitempty"`
	PledgeCurrencyOut    float64  `protobuf:"fixed64,49,opt,name=pledge_currency_out,json=pledgeCurrencyOut" json:"pledge_currency_out,omitempty"`
	MarginDiscount       float64  `protobuf:"fixed64,50,opt,name=margin_discount,json=marginDiscount" json:"margin_discount,omitempty"`
	RoyaltyIn            float64  `protobuf:"fixed64,51,opt,name=royalty_in,json=royaltyIn" json:"royalty_in,omitempty"`
	RoyaltyOut           float64  `protobuf:"fixed64,52,opt,name=royalty_out,json=royaltyOut" json:"royalty_out,omitempty"`
	FrznRoyalty          float64  `protobuf:"fixed64,53,opt,name=frzn_royalty,json=frznRoyalty" json:"frzn_royalty,omitempty"`
	StrikeFrznMargin     float64  `protobuf:"fixed64,54,opt,name=strike_frzn_margin,json=strikeFrznMargin" json:"strike_frzn_margin,omitempty"`
	OptionCap            float64  `protobuf:"fixed64,55,opt,name=option_cap,json=optionCap" json:"option_cap,omitempty"`
	DynCapRight          float64  `protobuf:"fixed64,56,opt,name=dyn_cap_right,json=dynCapRight" json:"dyn_cap_right,omitempty"`
	RoyaltyInout         float64  `protobuf:"fixed64,57,opt,name=royalty_inout,json=royaltyInout" json:"royalty_inout,omitempty"`
	OptionDynMargin      float64  `protobuf:"fixed64,58,opt,name=option_dyn_margin,json=optionDynMargin" json:"option_dyn_margin,omitempty"`
	ExchDynMargin        float64  `protobuf:"fixed64,59,opt,name=exch_dyn_margin,json=exchDynMargin" json:"exch_dyn_margin,omitempty"`
	BFrznExchMargin      float64  `protobuf:"fixed64,60,opt,name=b_frzn_exch_margin,json=bFrznExchMargin" json:"b_frzn_exch_margin,omitempty"`
	SFrznExchMargin      float64  `protobuf:"fixed64,61,opt,name=s_frzn_exch_margin,json=sFrznExchMargin" json:"s_frzn_exch_margin,omitempty"`
	NowMargin            float64  `protobuf:"fixed64,62,opt,name=now_margin,json=nowMargin" json:"now_margin,omitempty"`
	ExchNowMargin        float64  `protobuf:"fixed64,63,opt,name=exch_now_margin,json=exchNowMargin" json:"exch_now_margin,omitempty"`
	StrikeFrznFund       float64  `protobuf:"fixed64,64,opt,name=strike_frzn_fund,json=strikeFrznFund" json:"strike_frzn_fund,omitempty"`
	StrikeFrznOtherCommi float64  `protobuf:"fixed64,65,opt,name=strike_frzn_other_commi,json=strikeFrznOtherCommi" json:"strike_frzn_other_commi,omitempty"`
	IniTotalFrzn         float64  `protobuf:"fixed64,66,opt,name=ini_total_frzn,json=iniTotalFrzn" json:"ini_total_frzn,omitempty"`
	AccountStatus        []byte   `protobuf:"bytes,67,opt,name=account_status,json=accountStatus,proto3" json:"account_status,omitempty"`
	FundStatus           []byte   `protobuf:"bytes,68,opt,name=fund_status,json=fundStatus,proto3" json:"fund_status,omitempty"`
	TradeStatus          []byte   `protobuf:"bytes,69,opt,name=trade_status,json=tradeStatus,proto3" json:"trade_status,omitempty"`
	HoldProfitOp         float64  `protobuf:"fixed64,70,opt,name=hold_profit_op,json=holdProfitOp" json:"hold_profit_op,omitempty"`
	OpDropProfit         float64  `protobuf:"fixed64,71,opt,name=op_drop_profit,json=opDropProfit" json:"op_drop_profit,omitempty"`
	YestPledgeFrznAmt    float64  `protobuf:"fixed64,72,opt,name=yest_pledge_frzn_amt,json=yestPledgeFrznAmt" json:"yest_pledge_frzn_amt,omitempty"`
	TRemainSwapLimit     float64  `protobuf:"fixed64,73,opt,name=t_remain_swap_limit,json=tRemainSwapLimit" json:"t_remain_swap_limit,omitempty"`
	T1RiskFundFrzn       float64  `protobuf:"fixed64,74,opt,name=t1_risk_fund_frzn,json=t1RiskFundFrzn" json:"t1_risk_fund_frzn,omitempty"`
	MoneyPlegeAmt        float64  `protobuf:"fixed64,75,opt,name=money_plege_amt,json=moneyPlegeAmt" json:"money_plege_amt,omitempty"`
	RspInfo              *RspInfo `protobuf:"bytes,76,opt,name=rspInfo" json:"rspInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryRealFundRsp) Reset()         { *m = QryRealFundRsp{} }
func (m *QryRealFundRsp) String() string { return proto.CompactTextString(m) }
func (*QryRealFundRsp) ProtoMessage()    {}
func (*QryRealFundRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{14}
}
func (m *QryRealFundRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryRealFundRsp.Unmarshal(m, b)
}
func (m *QryRealFundRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryRealFundRsp.Marshal(b, m, deterministic)
}
func (dst *QryRealFundRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryRealFundRsp.Merge(dst, src)
}
func (m *QryRealFundRsp) XXX_Size() int {
	return xxx_messageInfo_QryRealFundRsp.Size(m)
}
func (m *QryRealFundRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QryRealFundRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QryRealFundRsp proto.InternalMessageInfo

func (m *QryRealFundRsp) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *QryRealFundRsp) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *QryRealFundRsp) GetCustName() []byte {
	if m != nil {
		return m.CustName
	}
	return nil
}

func (m *QryRealFundRsp) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

func (m *QryRealFundRsp) GetFundAccountNo() []byte {
	if m != nil {
		return m.FundAccountNo
	}
	return nil
}

func (m *QryRealFundRsp) GetLastRemain() float64 {
	if m != nil {
		return m.LastRemain
	}
	return 0
}

func (m *QryRealFundRsp) GetAvailFund() float64 {
	if m != nil {
		return m.AvailFund
	}
	return 0
}

func (m *QryRealFundRsp) GetBEntrustFrzn() float64 {
	if m != nil {
		return m.BEntrustFrzn
	}
	return 0
}

func (m *QryRealFundRsp) GetSEntrustFrzn() float64 {
	if m != nil {
		return m.SEntrustFrzn
	}
	return 0
}

func (m *QryRealFundRsp) GetCommi() float64 {
	if m != nil {
		return m.Commi
	}
	return 0
}

func (m *QryRealFundRsp) GetBMargin() float64 {
	if m != nil {
		return m.BMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetSMargin() float64 {
	if m != nil {
		return m.SMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetDropProfit() float64 {
	if m != nil {
		return m.DropProfit
	}
	return 0
}

func (m *QryRealFundRsp) GetHoldProfit() float64 {
	if m != nil {
		return m.HoldProfit
	}
	return 0
}

func (m *QryRealFundRsp) GetWayMoney() float64 {
	if m != nil {
		return m.WayMoney
	}
	return 0
}

func (m *QryRealFundRsp) GetUndelivProfit() float64 {
	if m != nil {
		return m.UndelivProfit
	}
	return 0
}

func (m *QryRealFundRsp) GetDynRights() float64 {
	if m != nil {
		return m.DynRights
	}
	return 0
}

func (m *QryRealFundRsp) GetTodayInout() float64 {
	if m != nil {
		return m.TodayInout
	}
	return 0
}

func (m *QryRealFundRsp) GetTotalFrzn() float64 {
	if m != nil {
		return m.TotalFrzn
	}
	return 0
}

func (m *QryRealFundRsp) GetMargin() float64 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *QryRealFundRsp) GetExchMargin() float64 {
	if m != nil {
		return m.ExchMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetPledgeAmt() float64 {
	if m != nil {
		return m.PledgeAmt
	}
	return 0
}

func (m *QryRealFundRsp) GetCreditAmt() float64 {
	if m != nil {
		return m.CreditAmt
	}
	return 0
}

func (m *QryRealFundRsp) GetRiskDegree0() float64 {
	if m != nil {
		return m.RiskDegree0
	}
	return 0
}

func (m *QryRealFundRsp) GetRiskDegree1() float64 {
	if m != nil {
		return m.RiskDegree1
	}
	return 0
}

func (m *QryRealFundRsp) GetRiskDegree2() float64 {
	if m != nil {
		return m.RiskDegree2
	}
	return 0
}

func (m *QryRealFundRsp) GetRiskDegree3() float64 {
	if m != nil {
		return m.RiskDegree3
	}
	return 0
}

func (m *QryRealFundRsp) GetRiskDegree4() float64 {
	if m != nil {
		return m.RiskDegree4
	}
	return 0
}

func (m *QryRealFundRsp) GetRiskLevel() []byte {
	if m != nil {
		return m.RiskLevel
	}
	return nil
}

func (m *QryRealFundRsp) GetFrznCommi() float64 {
	if m != nil {
		return m.FrznCommi
	}
	return 0
}

func (m *QryRealFundRsp) GetCurrencyIn() float64 {
	if m != nil {
		return m.CurrencyIn
	}
	return 0
}

func (m *QryRealFundRsp) GetCurrencyOut() float64 {
	if m != nil {
		return m.CurrencyOut
	}
	return 0
}

func (m *QryRealFundRsp) GetInitialFund() float64 {
	if m != nil {
		return m.InitialFund
	}
	return 0
}

func (m *QryRealFundRsp) GetPledgeBalance() float64 {
	if m != nil {
		return m.PledgeBalance
	}
	return 0
}

func (m *QryRealFundRsp) GetBorrowAmt() float64 {
	if m != nil {
		return m.BorrowAmt
	}
	return 0
}

func (m *QryRealFundRsp) GetLendAmt() float64 {
	if m != nil {
		return m.LendAmt
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecTotalFrzn() float64 {
	if m != nil {
		return m.SpecTotalFrzn
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecBEntrustFrzn() float64 {
	if m != nil {
		return m.SpecBEntrustFrzn
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecSEntrustFrzn() float64 {
	if m != nil {
		return m.SpecSEntrustFrzn
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecBMargin() float64 {
	if m != nil {
		return m.SpecBMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecSMargin() float64 {
	if m != nil {
		return m.SpecSMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecMargin() float64 {
	if m != nil {
		return m.SpecMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecExchMargin() float64 {
	if m != nil {
		return m.SpecExchMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecFrznCommi() float64 {
	if m != nil {
		return m.SpecFrznCommi
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecCommi() float64 {
	if m != nil {
		return m.SpecCommi
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecDropProfit() float64 {
	if m != nil {
		return m.SpecDropProfit
	}
	return 0
}

func (m *QryRealFundRsp) GetSpecHoldProfit() float64 {
	if m != nil {
		return m.SpecHoldProfit
	}
	return 0
}

func (m *QryRealFundRsp) GetPledgeCurrencyIn() float64 {
	if m != nil {
		return m.PledgeCurrencyIn
	}
	return 0
}

func (m *QryRealFundRsp) GetPledgeCurrencyOut() float64 {
	if m != nil {
		return m.PledgeCurrencyOut
	}
	return 0
}

func (m *QryRealFundRsp) GetMarginDiscount() float64 {
	if m != nil {
		return m.MarginDiscount
	}
	return 0
}

func (m *QryRealFundRsp) GetRoyaltyIn() float64 {
	if m != nil {
		return m.RoyaltyIn
	}
	return 0
}

func (m *QryRealFundRsp) GetRoyaltyOut() float64 {
	if m != nil {
		return m.RoyaltyOut
	}
	return 0
}

func (m *QryRealFundRsp) GetFrznRoyalty() float64 {
	if m != nil {
		return m.FrznRoyalty
	}
	return 0
}

func (m *QryRealFundRsp) GetStrikeFrznMargin() float64 {
	if m != nil {
		return m.StrikeFrznMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetOptionCap() float64 {
	if m != nil {
		return m.OptionCap
	}
	return 0
}

func (m *QryRealFundRsp) GetDynCapRight() float64 {
	if m != nil {
		return m.DynCapRight
	}
	return 0
}

func (m *QryRealFundRsp) GetRoyaltyInout() float64 {
	if m != nil {
		return m.RoyaltyInout
	}
	return 0
}

func (m *QryRealFundRsp) GetOptionDynMargin() float64 {
	if m != nil {
		return m.OptionDynMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetExchDynMargin() float64 {
	if m != nil {
		return m.ExchDynMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetBFrznExchMargin() float64 {
	if m != nil {
		return m.BFrznExchMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetSFrznExchMargin() float64 {
	if m != nil {
		return m.SFrznExchMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetNowMargin() float64 {
	if m != nil {
		return m.NowMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetExchNowMargin() float64 {
	if m != nil {
		return m.ExchNowMargin
	}
	return 0
}

func (m *QryRealFundRsp) GetStrikeFrznFund() float64 {
	if m != nil {
		return m.StrikeFrznFund
	}
	return 0
}

func (m *QryRealFundRsp) GetStrikeFrznOtherCommi() float64 {
	if m != nil {
		return m.StrikeFrznOtherCommi
	}
	return 0
}

func (m *QryRealFundRsp) GetIniTotalFrzn() float64 {
	if m != nil {
		return m.IniTotalFrzn
	}
	return 0
}

func (m *QryRealFundRsp) GetAccountStatus() []byte {
	if m != nil {
		return m.AccountStatus
	}
	return nil
}

func (m *QryRealFundRsp) GetFundStatus() []byte {
	if m != nil {
		return m.FundStatus
	}
	return nil
}

func (m *QryRealFundRsp) GetTradeStatus() []byte {
	if m != nil {
		return m.TradeStatus
	}
	return nil
}

func (m *QryRealFundRsp) GetHoldProfitOp() float64 {
	if m != nil {
		return m.HoldProfitOp
	}
	return 0
}

func (m *QryRealFundRsp) GetOpDropProfit() float64 {
	if m != nil {
		return m.OpDropProfit
	}
	return 0
}

func (m *QryRealFundRsp) GetYestPledgeFrznAmt() float64 {
	if m != nil {
		return m.YestPledgeFrznAmt
	}
	return 0
}

func (m *QryRealFundRsp) GetTRemainSwapLimit() float64 {
	if m != nil {
		return m.TRemainSwapLimit
	}
	return 0
}

func (m *QryRealFundRsp) GetT1RiskFundFrzn() float64 {
	if m != nil {
		return m.T1RiskFundFrzn
	}
	return 0
}

func (m *QryRealFundRsp) GetMoneyPlegeAmt() float64 {
	if m != nil {
		return m.MoneyPlegeAmt
	}
	return 0
}

func (m *QryRealFundRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

// 通道资金推送
type TunnelRealFundRtn struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte   `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	TunnelCode           []byte   `protobuf:"bytes,4,opt,name=tunnel_code,json=tunnelCode,proto3" json:"tunnel_code,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	AvailMarginBalance   float64  `protobuf:"fixed64,6,opt,name=avail_margin_balance,json=availMarginBalance" json:"avail_margin_balance,omitempty"`
	TodayMarginBalance   float64  `protobuf:"fixed64,7,opt,name=today_margin_balance,json=todayMarginBalance" json:"today_margin_balance,omitempty"`
	OccupiedMargin       float64  `protobuf:"fixed64,8,opt,name=occupied_margin,json=occupiedMargin" json:"occupied_margin,omitempty"`
	MarginOccupiedRate   float64  `protobuf:"fixed64,9,opt,name=margin_occupied_rate,json=marginOccupiedRate" json:"margin_occupied_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TunnelRealFundRtn) Reset()         { *m = TunnelRealFundRtn{} }
func (m *TunnelRealFundRtn) String() string { return proto.CompactTextString(m) }
func (*TunnelRealFundRtn) ProtoMessage()    {}
func (*TunnelRealFundRtn) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{15}
}
func (m *TunnelRealFundRtn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelRealFundRtn.Unmarshal(m, b)
}
func (m *TunnelRealFundRtn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelRealFundRtn.Marshal(b, m, deterministic)
}
func (dst *TunnelRealFundRtn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelRealFundRtn.Merge(dst, src)
}
func (m *TunnelRealFundRtn) XXX_Size() int {
	return xxx_messageInfo_TunnelRealFundRtn.Size(m)
}
func (m *TunnelRealFundRtn) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelRealFundRtn.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelRealFundRtn proto.InternalMessageInfo

func (m *TunnelRealFundRtn) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *TunnelRealFundRtn) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *TunnelRealFundRtn) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *TunnelRealFundRtn) GetTunnelCode() []byte {
	if m != nil {
		return m.TunnelCode
	}
	return nil
}

func (m *TunnelRealFundRtn) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

func (m *TunnelRealFundRtn) GetAvailMarginBalance() float64 {
	if m != nil {
		return m.AvailMarginBalance
	}
	return 0
}

func (m *TunnelRealFundRtn) GetTodayMarginBalance() float64 {
	if m != nil {
		return m.TodayMarginBalance
	}
	return 0
}

func (m *TunnelRealFundRtn) GetOccupiedMargin() float64 {
	if m != nil {
		return m.OccupiedMargin
	}
	return 0
}

func (m *TunnelRealFundRtn) GetMarginOccupiedRate() float64 {
	if m != nil {
		return m.MarginOccupiedRate
	}
	return 0
}

// 公司持仓监控推送
type CorpHoldMonRtn struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte   `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	SmarketCode          []byte   `protobuf:"bytes,4,opt,name=smarket_code,json=smarketCode,proto3" json:"smarket_code,omitempty"`
	SecCode              []byte   `protobuf:"bytes,5,opt,name=sec_code,json=secCode,proto3" json:"sec_code,omitempty"`
	SecName              []byte   `protobuf:"bytes,6,opt,name=sec_name,json=secName,proto3" json:"sec_name,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,7,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	DirectionType        []byte   `protobuf:"bytes,8,opt,name=direction_type,json=directionType,proto3" json:"direction_type,omitempty"`
	HoldQty              uint32   `protobuf:"varint,9,opt,name=hold_qty,json=holdQty" json:"hold_qty,omitempty"`
	HoldRate             float64  `protobuf:"fixed64,10,opt,name=hold_rate,json=holdRate" json:"hold_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CorpHoldMonRtn) Reset()         { *m = CorpHoldMonRtn{} }
func (m *CorpHoldMonRtn) String() string { return proto.CompactTextString(m) }
func (*CorpHoldMonRtn) ProtoMessage()    {}
func (*CorpHoldMonRtn) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{16}
}
func (m *CorpHoldMonRtn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorpHoldMonRtn.Unmarshal(m, b)
}
func (m *CorpHoldMonRtn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorpHoldMonRtn.Marshal(b, m, deterministic)
}
func (dst *CorpHoldMonRtn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorpHoldMonRtn.Merge(dst, src)
}
func (m *CorpHoldMonRtn) XXX_Size() int {
	return xxx_messageInfo_CorpHoldMonRtn.Size(m)
}
func (m *CorpHoldMonRtn) XXX_DiscardUnknown() {
	xxx_messageInfo_CorpHoldMonRtn.DiscardUnknown(m)
}

var xxx_messageInfo_CorpHoldMonRtn proto.InternalMessageInfo

func (m *CorpHoldMonRtn) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *CorpHoldMonRtn) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *CorpHoldMonRtn) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *CorpHoldMonRtn) GetSmarketCode() []byte {
	if m != nil {
		return m.SmarketCode
	}
	return nil
}

func (m *CorpHoldMonRtn) GetSecCode() []byte {
	if m != nil {
		return m.SecCode
	}
	return nil
}

func (m *CorpHoldMonRtn) GetSecName() []byte {
	if m != nil {
		return m.SecName
	}
	return nil
}

func (m *CorpHoldMonRtn) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *CorpHoldMonRtn) GetDirectionType() []byte {
	if m != nil {
		return m.DirectionType
	}
	return nil
}

func (m *CorpHoldMonRtn) GetHoldQty() uint32 {
	if m != nil {
		return m.HoldQty
	}
	return 0
}

func (m *CorpHoldMonRtn) GetHoldRate() float64 {
	if m != nil {
		return m.HoldRate
	}
	return 0
}

// 客户持仓查询请求
type QryCustHoldReq struct {
	CustNo               []byte   `protobuf:"bytes,1,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,2,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	QueryHoldFlag        []byte   `protobuf:"bytes,3,opt,name=query_hold_flag,json=queryHoldFlag,proto3" json:"query_hold_flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryCustHoldReq) Reset()         { *m = QryCustHoldReq{} }
func (m *QryCustHoldReq) String() string { return proto.CompactTextString(m) }
func (*QryCustHoldReq) ProtoMessage()    {}
func (*QryCustHoldReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{17}
}
func (m *QryCustHoldReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryCustHoldReq.Unmarshal(m, b)
}
func (m *QryCustHoldReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryCustHoldReq.Marshal(b, m, deterministic)
}
func (dst *QryCustHoldReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryCustHoldReq.Merge(dst, src)
}
func (m *QryCustHoldReq) XXX_Size() int {
	return xxx_messageInfo_QryCustHoldReq.Size(m)
}
func (m *QryCustHoldReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryCustHoldReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryCustHoldReq proto.InternalMessageInfo

func (m *QryCustHoldReq) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *QryCustHoldReq) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *QryCustHoldReq) GetQueryHoldFlag() []byte {
	if m != nil {
		return m.QueryHoldFlag
	}
	return nil
}

// 客户持仓查询应答
type QryCustHoldRsp struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	CustNo               []byte   `protobuf:"bytes,2,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustClass            []byte   `protobuf:"bytes,3,opt,name=cust_class,json=custClass,proto3" json:"cust_class,omitempty"`
	CustName             []byte   `protobuf:"bytes,4,opt,name=cust_name,json=custName,proto3" json:"cust_name,omitempty"`
	TxDate               []byte   `protobuf:"bytes,5,opt,name=tx_date,json=txDate,proto3" json:"tx_date,omitempty"`
	ExchCode             []byte   `protobuf:"bytes,6,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode             []byte   `protobuf:"bytes,7,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,8,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	DelivDate            []byte   `protobuf:"bytes,9,opt,name=deliv_date,json=delivDate,proto3" json:"deliv_date,omitempty"`
	ShFlag               []byte   `protobuf:"bytes,10,opt,name=sh_flag,json=shFlag,proto3" json:"sh_flag,omitempty"`
	BsFlag               []byte   `protobuf:"bytes,11,opt,name=bs_flag,json=bsFlag,proto3" json:"bs_flag,omitempty"`
	HoldBSum             uint32   `protobuf:"varint,12,opt,name=hold_b_sum,json=holdBSum" json:"hold_b_sum,omitempty"`
	HoldBTodaySum        uint32   `protobuf:"varint,13,opt,name=hold_b_today_sum,json=holdBTodaySum" json:"hold_b_today_sum,omitempty"`
	HoldBAvgPrice        float64  `protobuf:"fixed64,14,opt,name=hold_b_avg_price,json=holdBAvgPrice" json:"hold_b_avg_price,omitempty"`
	HoldProfit           float64  `protobuf:"fixed64,15,opt,name=hold_profit,json=holdProfit" json:"hold_profit,omitempty"`
	HoldSAvgPrice        float64  `protobuf:"fixed64,16,opt,name=hold_s_avg_price,json=holdSAvgPrice" json:"hold_s_avg_price,omitempty"`
	Hands                uint32   `protobuf:"varint,17,opt,name=hands" json:"hands,omitempty"`
	NewPrice             float64  `protobuf:"fixed64,18,opt,name=new_price,json=newPrice" json:"new_price,omitempty"`
	HoldSSum             uint32   `protobuf:"varint,19,opt,name=hold_s_sum,json=holdSSum" json:"hold_s_sum,omitempty"`
	HoldSTodaySum        uint32   `protobuf:"varint,20,opt,name=hold_s_today_sum,json=holdSTodaySum" json:"hold_s_today_sum,omitempty"`
	BMargin              float64  `protobuf:"fixed64,21,opt,name=b_margin,json=bMargin" json:"b_margin,omitempty"`
	SMargin              float64  `protobuf:"fixed64,22,opt,name=s_margin,json=sMargin" json:"s_margin,omitempty"`
	StrategyCode         []byte   `protobuf:"bytes,23,opt,name=strategy_code,json=strategyCode,proto3" json:"strategy_code,omitempty"`
	StrategyName         []byte   `protobuf:"bytes,24,opt,name=strategy_name,json=strategyName,proto3" json:"strategy_name,omitempty"`
	CaContract           []byte   `protobuf:"bytes,25,opt,name=ca_contract,json=caContract,proto3" json:"ca_contract,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,26,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	ContractShortName    []byte   `protobuf:"bytes,27,opt,name=contract_short_name,json=contractShortName,proto3" json:"contract_short_name,omitempty"`
	TradeType            []byte   `protobuf:"bytes,28,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	Royalty              float64  `protobuf:"fixed64,29,opt,name=royalty" json:"royalty,omitempty"`
	ExchMargin           float64  `protobuf:"fixed64,30,opt,name=exch_margin,json=exchMargin" json:"exch_margin,omitempty"`
	ExpireDays           uint32   `protobuf:"varint,31,opt,name=expire_days,json=expireDays" json:"expire_days,omitempty"`
	TodayDegree          float64  `protobuf:"fixed64,32,opt,name=today_degree,json=todayDegree" json:"today_degree,omitempty"`
	OptHoldProfit        float64  `protobuf:"fixed64,33,opt,name=opt_hold_profit,json=optHoldProfit" json:"opt_hold_profit,omitempty"`
	FrznQty              uint32   `protobuf:"varint,34,opt,name=frzn_qty,json=frznQty" json:"frzn_qty,omitempty"`
	ExerFrznQty          uint32   `protobuf:"varint,35,opt,name=exer_frzn_qty,json=exerFrznQty" json:"exer_frzn_qty,omitempty"`
	ExecDate             []byte   `protobuf:"bytes,36,opt,name=exec_date,json=execDate,proto3" json:"exec_date,omitempty"`
	CpFlag               []byte   `protobuf:"bytes,37,opt,name=cp_flag,json=cpFlag,proto3" json:"cp_flag,omitempty"`
	HoldOptCap           float64  `protobuf:"fixed64,38,opt,name=hold_opt_cap,json=holdOptCap" json:"hold_opt_cap,omitempty"`
	CloseAllPosition     float64  `protobuf:"fixed64,39,opt,name=close_all_position,json=closeAllPosition" json:"close_all_position,omitempty"`
	VariName             []byte   `protobuf:"bytes,40,opt,name=vari_name,json=variName,proto3" json:"vari_name,omitempty"`
	RspInfo              *RspInfo `protobuf:"bytes,41,opt,name=rspInfo" json:"rspInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryCustHoldRsp) Reset()         { *m = QryCustHoldRsp{} }
func (m *QryCustHoldRsp) String() string { return proto.CompactTextString(m) }
func (*QryCustHoldRsp) ProtoMessage()    {}
func (*QryCustHoldRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{18}
}
func (m *QryCustHoldRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryCustHoldRsp.Unmarshal(m, b)
}
func (m *QryCustHoldRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryCustHoldRsp.Marshal(b, m, deterministic)
}
func (dst *QryCustHoldRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryCustHoldRsp.Merge(dst, src)
}
func (m *QryCustHoldRsp) XXX_Size() int {
	return xxx_messageInfo_QryCustHoldRsp.Size(m)
}
func (m *QryCustHoldRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QryCustHoldRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QryCustHoldRsp proto.InternalMessageInfo

func (m *QryCustHoldRsp) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *QryCustHoldRsp) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *QryCustHoldRsp) GetCustClass() []byte {
	if m != nil {
		return m.CustClass
	}
	return nil
}

func (m *QryCustHoldRsp) GetCustName() []byte {
	if m != nil {
		return m.CustName
	}
	return nil
}

func (m *QryCustHoldRsp) GetTxDate() []byte {
	if m != nil {
		return m.TxDate
	}
	return nil
}

func (m *QryCustHoldRsp) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *QryCustHoldRsp) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *QryCustHoldRsp) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *QryCustHoldRsp) GetDelivDate() []byte {
	if m != nil {
		return m.DelivDate
	}
	return nil
}

func (m *QryCustHoldRsp) GetShFlag() []byte {
	if m != nil {
		return m.ShFlag
	}
	return nil
}

func (m *QryCustHoldRsp) GetBsFlag() []byte {
	if m != nil {
		return m.BsFlag
	}
	return nil
}

func (m *QryCustHoldRsp) GetHoldBSum() uint32 {
	if m != nil {
		return m.HoldBSum
	}
	return 0
}

func (m *QryCustHoldRsp) GetHoldBTodaySum() uint32 {
	if m != nil {
		return m.HoldBTodaySum
	}
	return 0
}

func (m *QryCustHoldRsp) GetHoldBAvgPrice() float64 {
	if m != nil {
		return m.HoldBAvgPrice
	}
	return 0
}

func (m *QryCustHoldRsp) GetHoldProfit() float64 {
	if m != nil {
		return m.HoldProfit
	}
	return 0
}

func (m *QryCustHoldRsp) GetHoldSAvgPrice() float64 {
	if m != nil {
		return m.HoldSAvgPrice
	}
	return 0
}

func (m *QryCustHoldRsp) GetHands() uint32 {
	if m != nil {
		return m.Hands
	}
	return 0
}

func (m *QryCustHoldRsp) GetNewPrice() float64 {
	if m != nil {
		return m.NewPrice
	}
	return 0
}

func (m *QryCustHoldRsp) GetHoldSSum() uint32 {
	if m != nil {
		return m.HoldSSum
	}
	return 0
}

func (m *QryCustHoldRsp) GetHoldSTodaySum() uint32 {
	if m != nil {
		return m.HoldSTodaySum
	}
	return 0
}

func (m *QryCustHoldRsp) GetBMargin() float64 {
	if m != nil {
		return m.BMargin
	}
	return 0
}

func (m *QryCustHoldRsp) GetSMargin() float64 {
	if m != nil {
		return m.SMargin
	}
	return 0
}

func (m *QryCustHoldRsp) GetStrategyCode() []byte {
	if m != nil {
		return m.StrategyCode
	}
	return nil
}

func (m *QryCustHoldRsp) GetStrategyName() []byte {
	if m != nil {
		return m.StrategyName
	}
	return nil
}

func (m *QryCustHoldRsp) GetCaContract() []byte {
	if m != nil {
		return m.CaContract
	}
	return nil
}

func (m *QryCustHoldRsp) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

func (m *QryCustHoldRsp) GetContractShortName() []byte {
	if m != nil {
		return m.ContractShortName
	}
	return nil
}

func (m *QryCustHoldRsp) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *QryCustHoldRsp) GetRoyalty() float64 {
	if m != nil {
		return m.Royalty
	}
	return 0
}

func (m *QryCustHoldRsp) GetExchMargin() float64 {
	if m != nil {
		return m.ExchMargin
	}
	return 0
}

func (m *QryCustHoldRsp) GetExpireDays() uint32 {
	if m != nil {
		return m.ExpireDays
	}
	return 0
}

func (m *QryCustHoldRsp) GetTodayDegree() float64 {
	if m != nil {
		return m.TodayDegree
	}
	return 0
}

func (m *QryCustHoldRsp) GetOptHoldProfit() float64 {
	if m != nil {
		return m.OptHoldProfit
	}
	return 0
}

func (m *QryCustHoldRsp) GetFrznQty() uint32 {
	if m != nil {
		return m.FrznQty
	}
	return 0
}

func (m *QryCustHoldRsp) GetExerFrznQty() uint32 {
	if m != nil {
		return m.ExerFrznQty
	}
	return 0
}

func (m *QryCustHoldRsp) GetExecDate() []byte {
	if m != nil {
		return m.ExecDate
	}
	return nil
}

func (m *QryCustHoldRsp) GetCpFlag() []byte {
	if m != nil {
		return m.CpFlag
	}
	return nil
}

func (m *QryCustHoldRsp) GetHoldOptCap() float64 {
	if m != nil {
		return m.HoldOptCap
	}
	return 0
}

func (m *QryCustHoldRsp) GetCloseAllPosition() float64 {
	if m != nil {
		return m.CloseAllPosition
	}
	return 0
}

func (m *QryCustHoldRsp) GetVariName() []byte {
	if m != nil {
		return m.VariName
	}
	return nil
}

func (m *QryCustHoldRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

// 客户委托信息查询请求
type QrySingleCustEntrustReq struct {
	CustNo               []byte   `protobuf:"bytes,1,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QrySingleCustEntrustReq) Reset()         { *m = QrySingleCustEntrustReq{} }
func (m *QrySingleCustEntrustReq) String() string { return proto.CompactTextString(m) }
func (*QrySingleCustEntrustReq) ProtoMessage()    {}
func (*QrySingleCustEntrustReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{19}
}
func (m *QrySingleCustEntrustReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QrySingleCustEntrustReq.Unmarshal(m, b)
}
func (m *QrySingleCustEntrustReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QrySingleCustEntrustReq.Marshal(b, m, deterministic)
}
func (dst *QrySingleCustEntrustReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QrySingleCustEntrustReq.Merge(dst, src)
}
func (m *QrySingleCustEntrustReq) XXX_Size() int {
	return xxx_messageInfo_QrySingleCustEntrustReq.Size(m)
}
func (m *QrySingleCustEntrustReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QrySingleCustEntrustReq.DiscardUnknown(m)
}

var xxx_messageInfo_QrySingleCustEntrustReq proto.InternalMessageInfo

func (m *QrySingleCustEntrustReq) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

// 客户委托信息查询应答
type QrySingleCustEntrustRsp struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	CustNo               []byte   `protobuf:"bytes,2,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustName             []byte   `protobuf:"bytes,3,opt,name=cust_name,json=custName,proto3" json:"cust_name,omitempty"`
	EntrustNo            []byte   `protobuf:"bytes,4,opt,name=entrust_no,json=entrustNo,proto3" json:"entrust_no,omitempty"`
	EntrustOper          []byte   `protobuf:"bytes,5,opt,name=entrust_oper,json=entrustOper,proto3" json:"entrust_oper,omitempty"`
	ExchCode             []byte   `protobuf:"bytes,6,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode             []byte   `protobuf:"bytes,7,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,8,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	DelivDate            []byte   `protobuf:"bytes,9,opt,name=deliv_date,json=delivDate,proto3" json:"deliv_date,omitempty"`
	ShFlag               []byte   `protobuf:"bytes,10,opt,name=sh_flag,json=shFlag,proto3" json:"sh_flag,omitempty"`
	BsFlag               []byte   `protobuf:"bytes,11,opt,name=bs_flag,json=bsFlag,proto3" json:"bs_flag,omitempty"`
	EoFlag               []byte   `protobuf:"bytes,12,opt,name=eo_flag,json=eoFlag,proto3" json:"eo_flag,omitempty"`
	EntrustStatus        []byte   `protobuf:"bytes,13,opt,name=entrust_status,json=entrustStatus,proto3" json:"entrust_status,omitempty"`
	EntrustQty           uint32   `protobuf:"varint,14,opt,name=entrust_qty,json=entrustQty" json:"entrust_qty,omitempty"`
	EntrustPrice         float64  `protobuf:"fixed64,15,opt,name=entrust_price,json=entrustPrice" json:"entrust_price,omitempty"`
	RemainQty            uint32   `protobuf:"varint,16,opt,name=remain_qty,json=remainQty" json:"remain_qty,omitempty"`
	DonePrice            float64  `protobuf:"fixed64,17,opt,name=done_price,json=donePrice" json:"done_price,omitempty"`
	DoneQty              uint32   `protobuf:"varint,18,opt,name=done_qty,json=doneQty" json:"done_qty,omitempty"`
	SysNo                []byte   `protobuf:"bytes,19,opt,name=sys_no,json=sysNo,proto3" json:"sys_no,omitempty"`
	EntrustTime          []byte   `protobuf:"bytes,20,opt,name=entrust_time,json=entrustTime,proto3" json:"entrust_time,omitempty"`
	OrderTime            []byte   `protobuf:"bytes,21,opt,name=order_time,json=orderTime,proto3" json:"order_time,omitempty"`
	TxNo                 []byte   `protobuf:"bytes,22,opt,name=tx_no,json=txNo,proto3" json:"tx_no,omitempty"`
	EntrustWay           []byte   `protobuf:"bytes,23,opt,name=entrust_way,json=entrustWay,proto3" json:"entrust_way,omitempty"`
	CancelOper           []byte   `protobuf:"bytes,24,opt,name=cancel_oper,json=cancelOper,proto3" json:"cancel_oper,omitempty"`
	CancelTime           []byte   `protobuf:"bytes,25,opt,name=cancel_time,json=cancelTime,proto3" json:"cancel_time,omitempty"`
	EntrustType          []byte   `protobuf:"bytes,26,opt,name=entrust_type,json=entrustType,proto3" json:"entrust_type,omitempty"`
	TunnelCode           []byte   `protobuf:"bytes,27,opt,name=tunnel_code,json=tunnelCode,proto3" json:"tunnel_code,omitempty"`
	Remark               []byte   `protobuf:"bytes,28,opt,name=remark,proto3" json:"remark,omitempty"`
	UpdateBatch          uint32   `protobuf:"varint,29,opt,name=update_batch,json=updateBatch" json:"update_batch,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,30,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	ForceOffset          []byte   `protobuf:"bytes,31,opt,name=force_offset,json=forceOffset,proto3" json:"force_offset,omitempty"`
	CmdNo                uint32   `protobuf:"varint,32,opt,name=cmd_no,json=cmdNo" json:"cmd_no,omitempty"`
	EntrustSeatNo        []byte   `protobuf:"bytes,33,opt,name=entrust_seat_no,json=entrustSeatNo,proto3" json:"entrust_seat_no,omitempty"`
	OtherSystem          []byte   `protobuf:"bytes,34,opt,name=other_system,json=otherSystem,proto3" json:"other_system,omitempty"`
	StrategyCode         []byte   `protobuf:"bytes,35,opt,name=strategy_code,json=strategyCode,proto3" json:"strategy_code,omitempty"`
	OrderType            []byte   `protobuf:"bytes,36,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	DoneAttribute        []byte   `protobuf:"bytes,37,opt,name=done_attribute,json=doneAttribute,proto3" json:"done_attribute,omitempty"`
	SlpPrice             float64  `protobuf:"fixed64,38,opt,name=slp_price,json=slpPrice" json:"slp_price,omitempty"`
	CombinationType      []byte   `protobuf:"bytes,39,opt,name=combination_type,json=combinationType,proto3" json:"combination_type,omitempty"`
	TriggerTime          []byte   `protobuf:"bytes,40,opt,name=trigger_time,json=triggerTime,proto3" json:"trigger_time,omitempty"`
	EnOperType           []byte   `protobuf:"bytes,41,opt,name=en_oper_type,json=enOperType,proto3" json:"en_oper_type,omitempty"`
	PrivateInfo          []byte   `protobuf:"bytes,42,opt,name=private_info,json=privateInfo,proto3" json:"private_info,omitempty"`
	PrivateFlag          []byte   `protobuf:"bytes,43,opt,name=private_flag,json=privateFlag,proto3" json:"private_flag,omitempty"`
	PrivateSerialNo      []byte   `protobuf:"bytes,44,opt,name=private_serial_no,json=privateSerialNo,proto3" json:"private_serial_no,omitempty"`
	SessionId            uint32   `protobuf:"varint,45,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	CancelSessionId      uint32   `protobuf:"varint,46,opt,name=cancel_session_id,json=cancelSessionId" json:"cancel_session_id,omitempty"`
	FrznMargin           float64  `protobuf:"fixed64,47,opt,name=frzn_margin,json=frznMargin" json:"frzn_margin,omitempty"`
	FrznCommi            float64  `protobuf:"fixed64,48,opt,name=frzn_commi,json=frznCommi" json:"frzn_commi,omitempty"`
	MinDoneQty           uint32   `protobuf:"varint,49,opt,name=min_done_qty,json=minDoneQty" json:"min_done_qty,omitempty"`
	TradeType            []byte   `protobuf:"bytes,50,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	ContractShortName    []byte   `protobuf:"bytes,51,opt,name=contract_short_name,json=contractShortName,proto3" json:"contract_short_name,omitempty"`
	FrznRoyalty          float64  `protobuf:"fixed64,52,opt,name=frzn_royalty,json=frznRoyalty" json:"frzn_royalty,omitempty"`
	RspInfo              *RspInfo `protobuf:"bytes,53,opt,name=rspInfo" json:"rspInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QrySingleCustEntrustRsp) Reset()         { *m = QrySingleCustEntrustRsp{} }
func (m *QrySingleCustEntrustRsp) String() string { return proto.CompactTextString(m) }
func (*QrySingleCustEntrustRsp) ProtoMessage()    {}
func (*QrySingleCustEntrustRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{20}
}
func (m *QrySingleCustEntrustRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QrySingleCustEntrustRsp.Unmarshal(m, b)
}
func (m *QrySingleCustEntrustRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QrySingleCustEntrustRsp.Marshal(b, m, deterministic)
}
func (dst *QrySingleCustEntrustRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QrySingleCustEntrustRsp.Merge(dst, src)
}
func (m *QrySingleCustEntrustRsp) XXX_Size() int {
	return xxx_messageInfo_QrySingleCustEntrustRsp.Size(m)
}
func (m *QrySingleCustEntrustRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QrySingleCustEntrustRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QrySingleCustEntrustRsp proto.InternalMessageInfo

func (m *QrySingleCustEntrustRsp) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetCustName() []byte {
	if m != nil {
		return m.CustName
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEntrustNo() []byte {
	if m != nil {
		return m.EntrustNo
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEntrustOper() []byte {
	if m != nil {
		return m.EntrustOper
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetDelivDate() []byte {
	if m != nil {
		return m.DelivDate
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetShFlag() []byte {
	if m != nil {
		return m.ShFlag
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetBsFlag() []byte {
	if m != nil {
		return m.BsFlag
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEoFlag() []byte {
	if m != nil {
		return m.EoFlag
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEntrustStatus() []byte {
	if m != nil {
		return m.EntrustStatus
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEntrustQty() uint32 {
	if m != nil {
		return m.EntrustQty
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetEntrustPrice() float64 {
	if m != nil {
		return m.EntrustPrice
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetRemainQty() uint32 {
	if m != nil {
		return m.RemainQty
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetDonePrice() float64 {
	if m != nil {
		return m.DonePrice
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetDoneQty() uint32 {
	if m != nil {
		return m.DoneQty
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetSysNo() []byte {
	if m != nil {
		return m.SysNo
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEntrustTime() []byte {
	if m != nil {
		return m.EntrustTime
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetOrderTime() []byte {
	if m != nil {
		return m.OrderTime
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetTxNo() []byte {
	if m != nil {
		return m.TxNo
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEntrustWay() []byte {
	if m != nil {
		return m.EntrustWay
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetCancelOper() []byte {
	if m != nil {
		return m.CancelOper
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetCancelTime() []byte {
	if m != nil {
		return m.CancelTime
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEntrustType() []byte {
	if m != nil {
		return m.EntrustType
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetTunnelCode() []byte {
	if m != nil {
		return m.TunnelCode
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetRemark() []byte {
	if m != nil {
		return m.Remark
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetUpdateBatch() uint32 {
	if m != nil {
		return m.UpdateBatch
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetForceOffset() []byte {
	if m != nil {
		return m.ForceOffset
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetCmdNo() uint32 {
	if m != nil {
		return m.CmdNo
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetEntrustSeatNo() []byte {
	if m != nil {
		return m.EntrustSeatNo
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetOtherSystem() []byte {
	if m != nil {
		return m.OtherSystem
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetStrategyCode() []byte {
	if m != nil {
		return m.StrategyCode
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetOrderType() []byte {
	if m != nil {
		return m.OrderType
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetDoneAttribute() []byte {
	if m != nil {
		return m.DoneAttribute
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetSlpPrice() float64 {
	if m != nil {
		return m.SlpPrice
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetCombinationType() []byte {
	if m != nil {
		return m.CombinationType
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetTriggerTime() []byte {
	if m != nil {
		return m.TriggerTime
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetEnOperType() []byte {
	if m != nil {
		return m.EnOperType
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetPrivateInfo() []byte {
	if m != nil {
		return m.PrivateInfo
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetPrivateFlag() []byte {
	if m != nil {
		return m.PrivateFlag
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetPrivateSerialNo() []byte {
	if m != nil {
		return m.PrivateSerialNo
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetSessionId() uint32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetCancelSessionId() uint32 {
	if m != nil {
		return m.CancelSessionId
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetFrznMargin() float64 {
	if m != nil {
		return m.FrznMargin
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetFrznCommi() float64 {
	if m != nil {
		return m.FrznCommi
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetMinDoneQty() uint32 {
	if m != nil {
		return m.MinDoneQty
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetContractShortName() []byte {
	if m != nil {
		return m.ContractShortName
	}
	return nil
}

func (m *QrySingleCustEntrustRsp) GetFrznRoyalty() float64 {
	if m != nil {
		return m.FrznRoyalty
	}
	return 0
}

func (m *QrySingleCustEntrustRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

// 交易所对应品种查询请求
type QryExchVariReq struct {
	ExchCode             []byte   `protobuf:"bytes,1,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	TradeType            []byte   `protobuf:"bytes,2,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryExchVariReq) Reset()         { *m = QryExchVariReq{} }
func (m *QryExchVariReq) String() string { return proto.CompactTextString(m) }
func (*QryExchVariReq) ProtoMessage()    {}
func (*QryExchVariReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{21}
}
func (m *QryExchVariReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryExchVariReq.Unmarshal(m, b)
}
func (m *QryExchVariReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryExchVariReq.Marshal(b, m, deterministic)
}
func (dst *QryExchVariReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryExchVariReq.Merge(dst, src)
}
func (m *QryExchVariReq) XXX_Size() int {
	return xxx_messageInfo_QryExchVariReq.Size(m)
}
func (m *QryExchVariReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryExchVariReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryExchVariReq proto.InternalMessageInfo

func (m *QryExchVariReq) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *QryExchVariReq) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

// 交易所对应品种查询应答
type QryExchVariRsp struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ExchCode             []byte   `protobuf:"bytes,2,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	VariCode             []byte   `protobuf:"bytes,3,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	VariName             []byte   `protobuf:"bytes,4,opt,name=vari_name,json=variName,proto3" json:"vari_name,omitempty"`
	TradeType            []byte   `protobuf:"bytes,5,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	RspInfo              *RspInfo `protobuf:"bytes,6,opt,name=rspInfo" json:"rspInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryExchVariRsp) Reset()         { *m = QryExchVariRsp{} }
func (m *QryExchVariRsp) String() string { return proto.CompactTextString(m) }
func (*QryExchVariRsp) ProtoMessage()    {}
func (*QryExchVariRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{22}
}
func (m *QryExchVariRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryExchVariRsp.Unmarshal(m, b)
}
func (m *QryExchVariRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryExchVariRsp.Marshal(b, m, deterministic)
}
func (dst *QryExchVariRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryExchVariRsp.Merge(dst, src)
}
func (m *QryExchVariRsp) XXX_Size() int {
	return xxx_messageInfo_QryExchVariRsp.Size(m)
}
func (m *QryExchVariRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QryExchVariRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QryExchVariRsp proto.InternalMessageInfo

func (m *QryExchVariRsp) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *QryExchVariRsp) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *QryExchVariRsp) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *QryExchVariRsp) GetVariName() []byte {
	if m != nil {
		return m.VariName
	}
	return nil
}

func (m *QryExchVariRsp) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *QryExchVariRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

// 合约查询请求
type QryContractReq struct {
	ExchCode             []byte   `protobuf:"bytes,1,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	TradeType            []byte   `protobuf:"bytes,2,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,3,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	VariCode             []byte   `protobuf:"bytes,4,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryContractReq) Reset()         { *m = QryContractReq{} }
func (m *QryContractReq) String() string { return proto.CompactTextString(m) }
func (*QryContractReq) ProtoMessage()    {}
func (*QryContractReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{23}
}
func (m *QryContractReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryContractReq.Unmarshal(m, b)
}
func (m *QryContractReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryContractReq.Marshal(b, m, deterministic)
}
func (dst *QryContractReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryContractReq.Merge(dst, src)
}
func (m *QryContractReq) XXX_Size() int {
	return xxx_messageInfo_QryContractReq.Size(m)
}
func (m *QryContractReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryContractReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryContractReq proto.InternalMessageInfo

func (m *QryContractReq) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *QryContractReq) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *QryContractReq) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *QryContractReq) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

// 合约查询应答
type QryContractRsp struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ExchCode             []byte   `protobuf:"bytes,2,opt,name=exch_code,json=exchCode,proto3" json:"exch_code,omitempty"`
	ExchName             []byte   `protobuf:"bytes,3,opt,name=exch_name,json=exchName,proto3" json:"exch_name,omitempty"`
	VariCode             []byte   `protobuf:"bytes,4,opt,name=vari_code,json=variCode,proto3" json:"vari_code,omitempty"`
	VariName             []byte   `protobuf:"bytes,5,opt,name=vari_name,json=variName,proto3" json:"vari_name,omitempty"`
	DelivDate            []byte   `protobuf:"bytes,6,opt,name=deliv_date,json=delivDate,proto3" json:"deliv_date,omitempty"`
	ContractCode         []byte   `protobuf:"bytes,7,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	TradeType            []byte   `protobuf:"bytes,8,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	Hands                uint32   `protobuf:"varint,9,opt,name=hands" json:"hands,omitempty"`
	TradeRule            []byte   `protobuf:"bytes,10,opt,name=trade_rule,json=tradeRule,proto3" json:"trade_rule,omitempty"`
	MinHand              uint32   `protobuf:"varint,11,opt,name=min_hand,json=minHand" json:"min_hand,omitempty"`
	MaxHand              uint32   `protobuf:"varint,12,opt,name=max_hand,json=maxHand" json:"max_hand,omitempty"`
	MarketMaxHand        uint32   `protobuf:"varint,13,opt,name=market_max_hand,json=marketMaxHand" json:"market_max_hand,omitempty"`
	MaxHold              uint32   `protobuf:"varint,14,opt,name=max_hold,json=maxHold" json:"max_hold,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,15,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	PriceUnit            float64  `protobuf:"fixed64,16,opt,name=price_unit,json=priceUnit" json:"price_unit,omitempty"`
	ContractStatus       []byte   `protobuf:"bytes,17,opt,name=contract_status,json=contractStatus,proto3" json:"contract_status,omitempty"`
	ContractShortName    []byte   `protobuf:"bytes,18,opt,name=contract_short_name,json=contractShortName,proto3" json:"contract_short_name,omitempty"`
	FundAlgorithm        []byte   `protobuf:"bytes,19,opt,name=fund_algorithm,json=fundAlgorithm,proto3" json:"fund_algorithm,omitempty"`
	IfMarginDis          []byte   `protobuf:"bytes,20,opt,name=if_margin_dis,json=ifMarginDis,proto3" json:"if_margin_dis,omitempty"`
	ListingPrice         float64  `protobuf:"fixed64,21,opt,name=listing_price,json=listingPrice" json:"listing_price,omitempty"`
	StrikePrice          float64  `protobuf:"fixed64,22,opt,name=strike_price,json=strikePrice" json:"strike_price,omitempty"`
	OptionType           []byte   `protobuf:"bytes,23,opt,name=option_type,json=optionType,proto3" json:"option_type,omitempty"`
	CpFlag               []byte   `protobuf:"bytes,24,opt,name=cp_flag,json=cpFlag,proto3" json:"cp_flag,omitempty"`
	LastTradeDate        []byte   `protobuf:"bytes,25,opt,name=last_trade_date,json=lastTradeDate,proto3" json:"last_trade_date,omitempty"`
	TradeCode            []byte   `protobuf:"bytes,26,opt,name=trade_code,json=tradeCode,proto3" json:"trade_code,omitempty"`
	ContractType         []byte   `protobuf:"bytes,27,opt,name=contract_type,json=contractType,proto3" json:"contract_type,omitempty"`
	YesClosePrice        float64  `protobuf:"fixed64,28,opt,name=yes_close_price,json=yesClosePrice" json:"yes_close_price,omitempty"`
	YesSettlePrice       float64  `protobuf:"fixed64,29,opt,name=yes_settle_price,json=yesSettlePrice" json:"yes_settle_price,omitempty"`
	ContractUnit         uint32   `protobuf:"varint,30,opt,name=contract_unit,json=contractUnit" json:"contract_unit,omitempty"`
	VariType             []byte   `protobuf:"bytes,31,opt,name=vari_type,json=variType,proto3" json:"vari_type,omitempty"`
	ExecDate             []byte   `protobuf:"bytes,32,opt,name=exec_date,json=execDate,proto3" json:"exec_date,omitempty"`
	ExpireDate           []byte   `protobuf:"bytes,33,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	UnoverPisitionNum    uint32   `protobuf:"varint,34,opt,name=unover_pisition_num,json=unoverPisitionNum" json:"unover_pisition_num,omitempty"`
	LastVariPrice        float64  `protobuf:"fixed64,35,opt,name=last_vari_price,json=lastVariPrice" json:"last_vari_price,omitempty"`
	MarginUnit           float64  `protobuf:"fixed64,36,opt,name=margin_unit,json=marginUnit" json:"margin_unit,omitempty"`
	MarginRatio1         uint32   `protobuf:"varint,44,opt,name=margin_ratio1,json=marginRatio1" json:"margin_ratio1,omitempty"`
	MarginRatio2         uint32   `protobuf:"varint,45,opt,name=margin_ratio2,json=marginRatio2" json:"margin_ratio2,omitempty"`
	MarketMinHands       uint32   `protobuf:"varint,46,opt,name=market_min_hands,json=marketMinHands" json:"market_min_hands,omitempty"`
	ListingDate          []byte   `protobuf:"bytes,47,opt,name=listing_date,json=listingDate,proto3" json:"listing_date,omitempty"`
	ExpireDays           uint32   `protobuf:"varint,48,opt,name=expire_days,json=expireDays" json:"expire_days,omitempty"`
	NewPrice             float64  `protobuf:"fixed64,49,opt,name=new_price,json=newPrice" json:"new_price,omitempty"`
	TodaySettlePrice     float64  `protobuf:"fixed64,50,opt,name=today_settle_price,json=todaySettlePrice" json:"today_settle_price,omitempty"`
	LastPrice            float64  `protobuf:"fixed64,51,opt,name=last_price,json=lastPrice" json:"last_price,omitempty"`
	VolatilityRate       float64  `protobuf:"fixed64,52,opt,name=volatility_rate,json=volatilityRate" json:"volatility_rate,omitempty"`
	RspInfo              *RspInfo `protobuf:"bytes,53,opt,name=rspInfo" json:"rspInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryContractRsp) Reset()         { *m = QryContractRsp{} }
func (m *QryContractRsp) String() string { return proto.CompactTextString(m) }
func (*QryContractRsp) ProtoMessage()    {}
func (*QryContractRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{24}
}
func (m *QryContractRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryContractRsp.Unmarshal(m, b)
}
func (m *QryContractRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryContractRsp.Marshal(b, m, deterministic)
}
func (dst *QryContractRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryContractRsp.Merge(dst, src)
}
func (m *QryContractRsp) XXX_Size() int {
	return xxx_messageInfo_QryContractRsp.Size(m)
}
func (m *QryContractRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QryContractRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QryContractRsp proto.InternalMessageInfo

func (m *QryContractRsp) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *QryContractRsp) GetExchCode() []byte {
	if m != nil {
		return m.ExchCode
	}
	return nil
}

func (m *QryContractRsp) GetExchName() []byte {
	if m != nil {
		return m.ExchName
	}
	return nil
}

func (m *QryContractRsp) GetVariCode() []byte {
	if m != nil {
		return m.VariCode
	}
	return nil
}

func (m *QryContractRsp) GetVariName() []byte {
	if m != nil {
		return m.VariName
	}
	return nil
}

func (m *QryContractRsp) GetDelivDate() []byte {
	if m != nil {
		return m.DelivDate
	}
	return nil
}

func (m *QryContractRsp) GetContractCode() []byte {
	if m != nil {
		return m.ContractCode
	}
	return nil
}

func (m *QryContractRsp) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *QryContractRsp) GetHands() uint32 {
	if m != nil {
		return m.Hands
	}
	return 0
}

func (m *QryContractRsp) GetTradeRule() []byte {
	if m != nil {
		return m.TradeRule
	}
	return nil
}

func (m *QryContractRsp) GetMinHand() uint32 {
	if m != nil {
		return m.MinHand
	}
	return 0
}

func (m *QryContractRsp) GetMaxHand() uint32 {
	if m != nil {
		return m.MaxHand
	}
	return 0
}

func (m *QryContractRsp) GetMarketMaxHand() uint32 {
	if m != nil {
		return m.MarketMaxHand
	}
	return 0
}

func (m *QryContractRsp) GetMaxHold() uint32 {
	if m != nil {
		return m.MaxHold
	}
	return 0
}

func (m *QryContractRsp) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

func (m *QryContractRsp) GetPriceUnit() float64 {
	if m != nil {
		return m.PriceUnit
	}
	return 0
}

func (m *QryContractRsp) GetContractStatus() []byte {
	if m != nil {
		return m.ContractStatus
	}
	return nil
}

func (m *QryContractRsp) GetContractShortName() []byte {
	if m != nil {
		return m.ContractShortName
	}
	return nil
}

func (m *QryContractRsp) GetFundAlgorithm() []byte {
	if m != nil {
		return m.FundAlgorithm
	}
	return nil
}

func (m *QryContractRsp) GetIfMarginDis() []byte {
	if m != nil {
		return m.IfMarginDis
	}
	return nil
}

func (m *QryContractRsp) GetListingPrice() float64 {
	if m != nil {
		return m.ListingPrice
	}
	return 0
}

func (m *QryContractRsp) GetStrikePrice() float64 {
	if m != nil {
		return m.StrikePrice
	}
	return 0
}

func (m *QryContractRsp) GetOptionType() []byte {
	if m != nil {
		return m.OptionType
	}
	return nil
}

func (m *QryContractRsp) GetCpFlag() []byte {
	if m != nil {
		return m.CpFlag
	}
	return nil
}

func (m *QryContractRsp) GetLastTradeDate() []byte {
	if m != nil {
		return m.LastTradeDate
	}
	return nil
}

func (m *QryContractRsp) GetTradeCode() []byte {
	if m != nil {
		return m.TradeCode
	}
	return nil
}

func (m *QryContractRsp) GetContractType() []byte {
	if m != nil {
		return m.ContractType
	}
	return nil
}

func (m *QryContractRsp) GetYesClosePrice() float64 {
	if m != nil {
		return m.YesClosePrice
	}
	return 0
}

func (m *QryContractRsp) GetYesSettlePrice() float64 {
	if m != nil {
		return m.YesSettlePrice
	}
	return 0
}

func (m *QryContractRsp) GetContractUnit() uint32 {
	if m != nil {
		return m.ContractUnit
	}
	return 0
}

func (m *QryContractRsp) GetVariType() []byte {
	if m != nil {
		return m.VariType
	}
	return nil
}

func (m *QryContractRsp) GetExecDate() []byte {
	if m != nil {
		return m.ExecDate
	}
	return nil
}

func (m *QryContractRsp) GetExpireDate() []byte {
	if m != nil {
		return m.ExpireDate
	}
	return nil
}

func (m *QryContractRsp) GetUnoverPisitionNum() uint32 {
	if m != nil {
		return m.UnoverPisitionNum
	}
	return 0
}

func (m *QryContractRsp) GetLastVariPrice() float64 {
	if m != nil {
		return m.LastVariPrice
	}
	return 0
}

func (m *QryContractRsp) GetMarginUnit() float64 {
	if m != nil {
		return m.MarginUnit
	}
	return 0
}

func (m *QryContractRsp) GetMarginRatio1() uint32 {
	if m != nil {
		return m.MarginRatio1
	}
	return 0
}

func (m *QryContractRsp) GetMarginRatio2() uint32 {
	if m != nil {
		return m.MarginRatio2
	}
	return 0
}

func (m *QryContractRsp) GetMarketMinHands() uint32 {
	if m != nil {
		return m.MarketMinHands
	}
	return 0
}

func (m *QryContractRsp) GetListingDate() []byte {
	if m != nil {
		return m.ListingDate
	}
	return nil
}

func (m *QryContractRsp) GetExpireDays() uint32 {
	if m != nil {
		return m.ExpireDays
	}
	return 0
}

func (m *QryContractRsp) GetNewPrice() float64 {
	if m != nil {
		return m.NewPrice
	}
	return 0
}

func (m *QryContractRsp) GetTodaySettlePrice() float64 {
	if m != nil {
		return m.TodaySettlePrice
	}
	return 0
}

func (m *QryContractRsp) GetLastPrice() float64 {
	if m != nil {
		return m.LastPrice
	}
	return 0
}

func (m *QryContractRsp) GetVolatilityRate() float64 {
	if m != nil {
		return m.VolatilityRate
	}
	return 0
}

func (m *QryContractRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

// 合约范围项
type ContrRangeField struct {
	Name                 []byte   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type                 []byte   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContrRangeField) Reset()         { *m = ContrRangeField{} }
func (m *ContrRangeField) String() string { return proto.CompactTextString(m) }
func (*ContrRangeField) ProtoMessage()    {}
func (*ContrRangeField) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{25}
}
func (m *ContrRangeField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContrRangeField.Unmarshal(m, b)
}
func (m *ContrRangeField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContrRangeField.Marshal(b, m, deterministic)
}
func (dst *ContrRangeField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContrRangeField.Merge(dst, src)
}
func (m *ContrRangeField) XXX_Size() int {
	return xxx_messageInfo_ContrRangeField.Size(m)
}
func (m *ContrRangeField) XXX_DiscardUnknown() {
	xxx_messageInfo_ContrRangeField.DiscardUnknown(m)
}

var xxx_messageInfo_ContrRangeField proto.InternalMessageInfo

func (m *ContrRangeField) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ContrRangeField) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ContrRangeField) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// 行情监控设置
type QuoteMonitorSetting struct {
	PackFlag             uint32               `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32               `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte               `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	TradeType            []byte               `protobuf:"bytes,4,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	FilterFields         []*SettingValueField `protobuf:"bytes,5,rep,name=filter_fields,json=filterFields" json:"filter_fields,omitempty"`
	RangeFields          []*ContrRangeField   `protobuf:"bytes,6,rep,name=range_fields,json=rangeFields" json:"range_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *QuoteMonitorSetting) Reset()         { *m = QuoteMonitorSetting{} }
func (m *QuoteMonitorSetting) String() string { return proto.CompactTextString(m) }
func (*QuoteMonitorSetting) ProtoMessage()    {}
func (*QuoteMonitorSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{26}
}
func (m *QuoteMonitorSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuoteMonitorSetting.Unmarshal(m, b)
}
func (m *QuoteMonitorSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuoteMonitorSetting.Marshal(b, m, deterministic)
}
func (dst *QuoteMonitorSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteMonitorSetting.Merge(dst, src)
}
func (m *QuoteMonitorSetting) XXX_Size() int {
	return xxx_messageInfo_QuoteMonitorSetting.Size(m)
}
func (m *QuoteMonitorSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteMonitorSetting.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteMonitorSetting proto.InternalMessageInfo

func (m *QuoteMonitorSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *QuoteMonitorSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *QuoteMonitorSetting) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *QuoteMonitorSetting) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *QuoteMonitorSetting) GetFilterFields() []*SettingValueField {
	if m != nil {
		return m.FilterFields
	}
	return nil
}

func (m *QuoteMonitorSetting) GetRangeFields() []*ContrRangeField {
	if m != nil {
		return m.RangeFields
	}
	return nil
}

// 风险合约级别设置
type RiskContrLevelSetting struct {
	PackFlag             uint32    `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32    `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	SettingNo            []byte    `protobuf:"bytes,3,opt,name=setting_no,json=settingNo,proto3" json:"setting_no,omitempty"`
	SmarketCode          []byte    `protobuf:"bytes,4,opt,name=smarket_code,json=smarketCode,proto3" json:"smarket_code,omitempty"`
	SecCode              []byte    `protobuf:"bytes,5,opt,name=sec_code,json=secCode,proto3" json:"sec_code,omitempty"`
	TradeType            []byte    `protobuf:"bytes,6,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	LevelValues          []float64 `protobuf:"fixed64,7,rep,packed,name=level_values,json=levelValues" json:"level_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RiskContrLevelSetting) Reset()         { *m = RiskContrLevelSetting{} }
func (m *RiskContrLevelSetting) String() string { return proto.CompactTextString(m) }
func (*RiskContrLevelSetting) ProtoMessage()    {}
func (*RiskContrLevelSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{27}
}
func (m *RiskContrLevelSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RiskContrLevelSetting.Unmarshal(m, b)
}
func (m *RiskContrLevelSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RiskContrLevelSetting.Marshal(b, m, deterministic)
}
func (dst *RiskContrLevelSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RiskContrLevelSetting.Merge(dst, src)
}
func (m *RiskContrLevelSetting) XXX_Size() int {
	return xxx_messageInfo_RiskContrLevelSetting.Size(m)
}
func (m *RiskContrLevelSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_RiskContrLevelSetting.DiscardUnknown(m)
}

var xxx_messageInfo_RiskContrLevelSetting proto.InternalMessageInfo

func (m *RiskContrLevelSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *RiskContrLevelSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *RiskContrLevelSetting) GetSettingNo() []byte {
	if m != nil {
		return m.SettingNo
	}
	return nil
}

func (m *RiskContrLevelSetting) GetSmarketCode() []byte {
	if m != nil {
		return m.SmarketCode
	}
	return nil
}

func (m *RiskContrLevelSetting) GetSecCode() []byte {
	if m != nil {
		return m.SecCode
	}
	return nil
}

func (m *RiskContrLevelSetting) GetTradeType() []byte {
	if m != nil {
		return m.TradeType
	}
	return nil
}

func (m *RiskContrLevelSetting) GetLevelValues() []float64 {
	if m != nil {
		return m.LevelValues
	}
	return nil
}

// 合约组配置
type ContrGroupSetting struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	ContrGroupNo         []byte   `protobuf:"bytes,3,opt,name=contr_group_no,json=contrGroupNo,proto3" json:"contr_group_no,omitempty"`
	ContrGroupName       []byte   `protobuf:"bytes,4,opt,name=contr_group_name,json=contrGroupName,proto3" json:"contr_group_name,omitempty"`
	Contrs               [][]byte `protobuf:"bytes,5,rep,name=contrs,proto3" json:"contrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContrGroupSetting) Reset()         { *m = ContrGroupSetting{} }
func (m *ContrGroupSetting) String() string { return proto.CompactTextString(m) }
func (*ContrGroupSetting) ProtoMessage()    {}
func (*ContrGroupSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{28}
}
func (m *ContrGroupSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContrGroupSetting.Unmarshal(m, b)
}
func (m *ContrGroupSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContrGroupSetting.Marshal(b, m, deterministic)
}
func (dst *ContrGroupSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContrGroupSetting.Merge(dst, src)
}
func (m *ContrGroupSetting) XXX_Size() int {
	return xxx_messageInfo_ContrGroupSetting.Size(m)
}
func (m *ContrGroupSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ContrGroupSetting.DiscardUnknown(m)
}

var xxx_messageInfo_ContrGroupSetting proto.InternalMessageInfo

func (m *ContrGroupSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *ContrGroupSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *ContrGroupSetting) GetContrGroupNo() []byte {
	if m != nil {
		return m.ContrGroupNo
	}
	return nil
}

func (m *ContrGroupSetting) GetContrGroupName() []byte {
	if m != nil {
		return m.ContrGroupName
	}
	return nil
}

func (m *ContrGroupSetting) GetContrs() [][]byte {
	if m != nil {
		return m.Contrs
	}
	return nil
}

// 商品组监控设置
type ProductGroupMonitorSetting struct {
	PackFlag             uint32               `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32               `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte               `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	ContrGroupNos        [][]byte             `protobuf:"bytes,4,rep,name=contr_group_nos,json=contrGroupNos,proto3" json:"contr_group_nos,omitempty"`
	FilterFields         []*SettingValueField `protobuf:"bytes,5,rep,name=filter_fields,json=filterFields" json:"filter_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ProductGroupMonitorSetting) Reset()         { *m = ProductGroupMonitorSetting{} }
func (m *ProductGroupMonitorSetting) String() string { return proto.CompactTextString(m) }
func (*ProductGroupMonitorSetting) ProtoMessage()    {}
func (*ProductGroupMonitorSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{29}
}
func (m *ProductGroupMonitorSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductGroupMonitorSetting.Unmarshal(m, b)
}
func (m *ProductGroupMonitorSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductGroupMonitorSetting.Marshal(b, m, deterministic)
}
func (dst *ProductGroupMonitorSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductGroupMonitorSetting.Merge(dst, src)
}
func (m *ProductGroupMonitorSetting) XXX_Size() int {
	return xxx_messageInfo_ProductGroupMonitorSetting.Size(m)
}
func (m *ProductGroupMonitorSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductGroupMonitorSetting.DiscardUnknown(m)
}

var xxx_messageInfo_ProductGroupMonitorSetting proto.InternalMessageInfo

func (m *ProductGroupMonitorSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *ProductGroupMonitorSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *ProductGroupMonitorSetting) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *ProductGroupMonitorSetting) GetContrGroupNos() [][]byte {
	if m != nil {
		return m.ContrGroupNos
	}
	return nil
}

func (m *ProductGroupMonitorSetting) GetFilterFields() []*SettingValueField {
	if m != nil {
		return m.FilterFields
	}
	return nil
}

// 客户风险监控设置
type CustRiskMonitorSetting struct {
	PackFlag             uint32               `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32               `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte               `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	Custs                [][]byte             `protobuf:"bytes,5,rep,name=custs,proto3" json:"custs,omitempty"`
	FilterFields         []*SettingValueField `protobuf:"bytes,4,rep,name=filter_fields,json=filterFields" json:"filter_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CustRiskMonitorSetting) Reset()         { *m = CustRiskMonitorSetting{} }
func (m *CustRiskMonitorSetting) String() string { return proto.CompactTextString(m) }
func (*CustRiskMonitorSetting) ProtoMessage()    {}
func (*CustRiskMonitorSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{30}
}
func (m *CustRiskMonitorSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustRiskMonitorSetting.Unmarshal(m, b)
}
func (m *CustRiskMonitorSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustRiskMonitorSetting.Marshal(b, m, deterministic)
}
func (dst *CustRiskMonitorSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustRiskMonitorSetting.Merge(dst, src)
}
func (m *CustRiskMonitorSetting) XXX_Size() int {
	return xxx_messageInfo_CustRiskMonitorSetting.Size(m)
}
func (m *CustRiskMonitorSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_CustRiskMonitorSetting.DiscardUnknown(m)
}

var xxx_messageInfo_CustRiskMonitorSetting proto.InternalMessageInfo

func (m *CustRiskMonitorSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *CustRiskMonitorSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *CustRiskMonitorSetting) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *CustRiskMonitorSetting) GetCusts() [][]byte {
	if m != nil {
		return m.Custs
	}
	return nil
}

func (m *CustRiskMonitorSetting) GetFilterFields() []*SettingValueField {
	if m != nil {
		return m.FilterFields
	}
	return nil
}

// 客户组设置
type CustGroupSetting struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32   `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	CustGroupNo          []byte   `protobuf:"bytes,3,opt,name=cust_group_no,json=custGroupNo,proto3" json:"cust_group_no,omitempty"`
	CustGroupName        []byte   `protobuf:"bytes,4,opt,name=cust_group_name,json=custGroupName,proto3" json:"cust_group_name,omitempty"`
	Custs                [][]byte `protobuf:"bytes,5,rep,name=custs,proto3" json:"custs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustGroupSetting) Reset()         { *m = CustGroupSetting{} }
func (m *CustGroupSetting) String() string { return proto.CompactTextString(m) }
func (*CustGroupSetting) ProtoMessage()    {}
func (*CustGroupSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{31}
}
func (m *CustGroupSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustGroupSetting.Unmarshal(m, b)
}
func (m *CustGroupSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustGroupSetting.Marshal(b, m, deterministic)
}
func (dst *CustGroupSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustGroupSetting.Merge(dst, src)
}
func (m *CustGroupSetting) XXX_Size() int {
	return xxx_messageInfo_CustGroupSetting.Size(m)
}
func (m *CustGroupSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_CustGroupSetting.DiscardUnknown(m)
}

var xxx_messageInfo_CustGroupSetting proto.InternalMessageInfo

func (m *CustGroupSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *CustGroupSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *CustGroupSetting) GetCustGroupNo() []byte {
	if m != nil {
		return m.CustGroupNo
	}
	return nil
}

func (m *CustGroupSetting) GetCustGroupName() []byte {
	if m != nil {
		return m.CustGroupName
	}
	return nil
}

func (m *CustGroupSetting) GetCusts() [][]byte {
	if m != nil {
		return m.Custs
	}
	return nil
}

// 公司持仓监控设置
type CorpHoldMonitorSetting struct {
	PackFlag             uint32               `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	ActionFlag           uint32               `protobuf:"varint,2,opt,name=action_flag,json=actionFlag" json:"action_flag,omitempty"`
	MonitorNo            []byte               `protobuf:"bytes,3,opt,name=monitor_no,json=monitorNo,proto3" json:"monitor_no,omitempty"`
	Contrs               [][]byte             `protobuf:"bytes,4,rep,name=contrs,proto3" json:"contrs,omitempty"`
	FilterFields         []*SettingValueField `protobuf:"bytes,5,rep,name=filter_fields,json=filterFields" json:"filter_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CorpHoldMonitorSetting) Reset()         { *m = CorpHoldMonitorSetting{} }
func (m *CorpHoldMonitorSetting) String() string { return proto.CompactTextString(m) }
func (*CorpHoldMonitorSetting) ProtoMessage()    {}
func (*CorpHoldMonitorSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{32}
}
func (m *CorpHoldMonitorSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorpHoldMonitorSetting.Unmarshal(m, b)
}
func (m *CorpHoldMonitorSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorpHoldMonitorSetting.Marshal(b, m, deterministic)
}
func (dst *CorpHoldMonitorSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorpHoldMonitorSetting.Merge(dst, src)
}
func (m *CorpHoldMonitorSetting) XXX_Size() int {
	return xxx_messageInfo_CorpHoldMonitorSetting.Size(m)
}
func (m *CorpHoldMonitorSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_CorpHoldMonitorSetting.DiscardUnknown(m)
}

var xxx_messageInfo_CorpHoldMonitorSetting proto.InternalMessageInfo

func (m *CorpHoldMonitorSetting) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *CorpHoldMonitorSetting) GetActionFlag() uint32 {
	if m != nil {
		return m.ActionFlag
	}
	return 0
}

func (m *CorpHoldMonitorSetting) GetMonitorNo() []byte {
	if m != nil {
		return m.MonitorNo
	}
	return nil
}

func (m *CorpHoldMonitorSetting) GetContrs() [][]byte {
	if m != nil {
		return m.Contrs
	}
	return nil
}

func (m *CorpHoldMonitorSetting) GetFilterFields() []*SettingValueField {
	if m != nil {
		return m.FilterFields
	}
	return nil
}

// 强平客户信息查询请求
type QryForceCustInfoReq struct {
	CustNo               []byte   `protobuf:"bytes,1,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QryForceCustInfoReq) Reset()         { *m = QryForceCustInfoReq{} }
func (m *QryForceCustInfoReq) String() string { return proto.CompactTextString(m) }
func (*QryForceCustInfoReq) ProtoMessage()    {}
func (*QryForceCustInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{33}
}
func (m *QryForceCustInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QryForceCustInfoReq.Unmarshal(m, b)
}
func (m *QryForceCustInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QryForceCustInfoReq.Marshal(b, m, deterministic)
}
func (dst *QryForceCustInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QryForceCustInfoReq.Merge(dst, src)
}
func (m *QryForceCustInfoReq) XXX_Size() int {
	return xxx_messageInfo_QryForceCustInfoReq.Size(m)
}
func (m *QryForceCustInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QryForceCustInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_QryForceCustInfoReq proto.InternalMessageInfo

func (m *QryForceCustInfoReq) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *QryForceCustInfoReq) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

// 强平客户信息应答
type ForceCustInfoRsp struct {
	PackFlag             uint32   `protobuf:"varint,1,opt,name=pack_flag,json=packFlag" json:"pack_flag,omitempty"`
	CustNo               []byte   `protobuf:"bytes,2,opt,name=cust_no,json=custNo,proto3" json:"cust_no,omitempty"`
	CustName             []byte   `protobuf:"bytes,3,opt,name=cust_name,json=custName,proto3" json:"cust_name,omitempty"`
	CustClass            []byte   `protobuf:"bytes,4,opt,name=cust_class,json=custClass,proto3" json:"cust_class,omitempty"`
	Phone                []byte   `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Mobile               []byte   `protobuf:"bytes,6,opt,name=mobile,proto3" json:"mobile,omitempty"`
	BrokerList           []byte   `protobuf:"bytes,7,opt,name=broker_list,json=brokerList,proto3" json:"broker_list,omitempty"`
	DynRight             float64  `protobuf:"fixed64,8,opt,name=dyn_right,json=dynRight" json:"dyn_right,omitempty"`
	Margin               float64  `protobuf:"fixed64,9,opt,name=margin" json:"margin,omitempty"`
	AddMargin            float64  `protobuf:"fixed64,10,opt,name=add_margin,json=addMargin" json:"add_margin,omitempty"`
	LastAddMargin        float64  `protobuf:"fixed64,11,opt,name=last_add_margin,json=lastAddMargin" json:"last_add_margin,omitempty"`
	TodayInout           float64  `protobuf:"fixed64,12,opt,name=today_inout,json=todayInout" json:"today_inout,omitempty"`
	CmdAssign            []byte   `protobuf:"bytes,13,opt,name=cmd_assign,json=cmdAssign,proto3" json:"cmd_assign,omitempty"`
	ExchMargin           float64  `protobuf:"fixed64,14,opt,name=exch_margin,json=exchMargin" json:"exch_margin,omitempty"`
	ExchAddMargin        float64  `protobuf:"fixed64,15,opt,name=exch_add_margin,json=exchAddMargin" json:"exch_add_margin,omitempty"`
	CreditLevel          []byte   `protobuf:"bytes,16,opt,name=credit_level,json=creditLevel,proto3" json:"credit_level,omitempty"`
	RiskLevel            []byte   `protobuf:"bytes,17,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`
	RiskType             []byte   `protobuf:"bytes,18,opt,name=risk_type,json=riskType,proto3" json:"risk_type,omitempty"`
	BatchForceOffset     []byte   `protobuf:"bytes,19,opt,name=batch_force_offset,json=batchForceOffset,proto3" json:"batch_force_offset,omitempty"`
	FundAllot1           []byte   `protobuf:"bytes,20,opt,name=fund_allot1,json=fundAllot1,proto3" json:"fund_allot1,omitempty"`
	FundAllotTel1        []byte   `protobuf:"bytes,21,opt,name=fund_allot_tel1,json=fundAllotTel1,proto3" json:"fund_allot_tel1,omitempty"`
	CmdAssign1Tell       []byte   `protobuf:"bytes,22,opt,name=cmd_assign1_tell,json=cmdAssign1Tell,proto3" json:"cmd_assign1_tell,omitempty"`
	LastAvailFund        float64  `protobuf:"fixed64,23,opt,name=last_avail_fund,json=lastAvailFund" json:"last_avail_fund,omitempty"`
	LastRights           float64  `protobuf:"fixed64,24,opt,name=last_rights,json=lastRights" json:"last_rights,omitempty"`
	RiskDegree1          float64  `protobuf:"fixed64,25,opt,name=risk_degree1,json=riskDegree1" json:"risk_degree1,omitempty"`
	NotifyStatus         []byte   `protobuf:"bytes,26,opt,name=notify_status,json=notifyStatus,proto3" json:"notify_status,omitempty"`
	TopNotifyLevel       []byte   `protobuf:"bytes,27,opt,name=top_notify_level,json=topNotifyLevel,proto3" json:"top_notify_level,omitempty"`
	RiskDegree2          float64  `protobuf:"fixed64,28,opt,name=risk_degree2,json=riskDegree2" json:"risk_degree2,omitempty"`
	NotifyInfo           []byte   `protobuf:"bytes,29,opt,name=notify_info,json=notifyInfo,proto3" json:"notify_info,omitempty"`
	CurrencyCode         []byte   `protobuf:"bytes,30,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	RoyaltyInout         float64  `protobuf:"fixed64,31,opt,name=royalty_inout,json=royaltyInout" json:"royalty_inout,omitempty"`
	OptionCap            float64  `protobuf:"fixed64,32,opt,name=option_cap,json=optionCap" json:"option_cap,omitempty"`
	DyncCapRight         float64  `protobuf:"fixed64,33,opt,name=dync_cap_right,json=dyncCapRight" json:"dync_cap_right,omitempty"`
	OptionDynMargin      float64  `protobuf:"fixed64,34,opt,name=option_dyn_margin,json=optionDynMargin" json:"option_dyn_margin,omitempty"`
	ExchOptionDynMargin  float64  `protobuf:"fixed64,35,opt,name=exch_option_dyn_margin,json=exchOptionDynMargin" json:"exch_option_dyn_margin,omitempty"`
	FrznMargin           float64  `protobuf:"fixed64,36,opt,name=frzn_margin,json=frznMargin" json:"frzn_margin,omitempty"`
	ExchFrznMargin       float64  `protobuf:"fixed64,37,opt,name=exch_frzn_margin,json=exchFrznMargin" json:"exch_frzn_margin,omitempty"`
	FrznStrikeMargin     float64  `protobuf:"fixed64,38,opt,name=frzn_strike_margin,json=frznStrikeMargin" json:"frzn_strike_margin,omitempty"`
	FrznRoyalty          float64  `protobuf:"fixed64,39,opt,name=frzn_royalty,json=frznRoyalty" json:"frzn_royalty,omitempty"`
	TradeLevel           uint32   `protobuf:"varint,40,opt,name=trade_level,json=tradeLevel" json:"trade_level,omitempty"`
	TradeLevelSzse       uint32   `protobuf:"varint,41,opt,name=trade_level_szse,json=tradeLevelSzse" json:"trade_level_szse,omitempty"`
	Clientmode           []byte   `protobuf:"bytes,42,opt,name=clientmode,proto3" json:"clientmode,omitempty"`
	AvailFund            float64  `protobuf:"fixed64,43,opt,name=avail_fund,json=availFund" json:"avail_fund,omitempty"`
	RspInfo              *RspInfo `protobuf:"bytes,44,opt,name=rspInfo" json:"rspInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForceCustInfoRsp) Reset()         { *m = ForceCustInfoRsp{} }
func (m *ForceCustInfoRsp) String() string { return proto.CompactTextString(m) }
func (*ForceCustInfoRsp) ProtoMessage()    {}
func (*ForceCustInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_monitor_server_d760d86102bb67c7, []int{34}
}
func (m *ForceCustInfoRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForceCustInfoRsp.Unmarshal(m, b)
}
func (m *ForceCustInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForceCustInfoRsp.Marshal(b, m, deterministic)
}
func (dst *ForceCustInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceCustInfoRsp.Merge(dst, src)
}
func (m *ForceCustInfoRsp) XXX_Size() int {
	return xxx_messageInfo_ForceCustInfoRsp.Size(m)
}
func (m *ForceCustInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceCustInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ForceCustInfoRsp proto.InternalMessageInfo

func (m *ForceCustInfoRsp) GetPackFlag() uint32 {
	if m != nil {
		return m.PackFlag
	}
	return 0
}

func (m *ForceCustInfoRsp) GetCustNo() []byte {
	if m != nil {
		return m.CustNo
	}
	return nil
}

func (m *ForceCustInfoRsp) GetCustName() []byte {
	if m != nil {
		return m.CustName
	}
	return nil
}

func (m *ForceCustInfoRsp) GetCustClass() []byte {
	if m != nil {
		return m.CustClass
	}
	return nil
}

func (m *ForceCustInfoRsp) GetPhone() []byte {
	if m != nil {
		return m.Phone
	}
	return nil
}

func (m *ForceCustInfoRsp) GetMobile() []byte {
	if m != nil {
		return m.Mobile
	}
	return nil
}

func (m *ForceCustInfoRsp) GetBrokerList() []byte {
	if m != nil {
		return m.BrokerList
	}
	return nil
}

func (m *ForceCustInfoRsp) GetDynRight() float64 {
	if m != nil {
		return m.DynRight
	}
	return 0
}

func (m *ForceCustInfoRsp) GetMargin() float64 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetAddMargin() float64 {
	if m != nil {
		return m.AddMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetLastAddMargin() float64 {
	if m != nil {
		return m.LastAddMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetTodayInout() float64 {
	if m != nil {
		return m.TodayInout
	}
	return 0
}

func (m *ForceCustInfoRsp) GetCmdAssign() []byte {
	if m != nil {
		return m.CmdAssign
	}
	return nil
}

func (m *ForceCustInfoRsp) GetExchMargin() float64 {
	if m != nil {
		return m.ExchMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetExchAddMargin() float64 {
	if m != nil {
		return m.ExchAddMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetCreditLevel() []byte {
	if m != nil {
		return m.CreditLevel
	}
	return nil
}

func (m *ForceCustInfoRsp) GetRiskLevel() []byte {
	if m != nil {
		return m.RiskLevel
	}
	return nil
}

func (m *ForceCustInfoRsp) GetRiskType() []byte {
	if m != nil {
		return m.RiskType
	}
	return nil
}

func (m *ForceCustInfoRsp) GetBatchForceOffset() []byte {
	if m != nil {
		return m.BatchForceOffset
	}
	return nil
}

func (m *ForceCustInfoRsp) GetFundAllot1() []byte {
	if m != nil {
		return m.FundAllot1
	}
	return nil
}

func (m *ForceCustInfoRsp) GetFundAllotTel1() []byte {
	if m != nil {
		return m.FundAllotTel1
	}
	return nil
}

func (m *ForceCustInfoRsp) GetCmdAssign1Tell() []byte {
	if m != nil {
		return m.CmdAssign1Tell
	}
	return nil
}

func (m *ForceCustInfoRsp) GetLastAvailFund() float64 {
	if m != nil {
		return m.LastAvailFund
	}
	return 0
}

func (m *ForceCustInfoRsp) GetLastRights() float64 {
	if m != nil {
		return m.LastRights
	}
	return 0
}

func (m *ForceCustInfoRsp) GetRiskDegree1() float64 {
	if m != nil {
		return m.RiskDegree1
	}
	return 0
}

func (m *ForceCustInfoRsp) GetNotifyStatus() []byte {
	if m != nil {
		return m.NotifyStatus
	}
	return nil
}

func (m *ForceCustInfoRsp) GetTopNotifyLevel() []byte {
	if m != nil {
		return m.TopNotifyLevel
	}
	return nil
}

func (m *ForceCustInfoRsp) GetRiskDegree2() float64 {
	if m != nil {
		return m.RiskDegree2
	}
	return 0
}

func (m *ForceCustInfoRsp) GetNotifyInfo() []byte {
	if m != nil {
		return m.NotifyInfo
	}
	return nil
}

func (m *ForceCustInfoRsp) GetCurrencyCode() []byte {
	if m != nil {
		return m.CurrencyCode
	}
	return nil
}

func (m *ForceCustInfoRsp) GetRoyaltyInout() float64 {
	if m != nil {
		return m.RoyaltyInout
	}
	return 0
}

func (m *ForceCustInfoRsp) GetOptionCap() float64 {
	if m != nil {
		return m.OptionCap
	}
	return 0
}

func (m *ForceCustInfoRsp) GetDyncCapRight() float64 {
	if m != nil {
		return m.DyncCapRight
	}
	return 0
}

func (m *ForceCustInfoRsp) GetOptionDynMargin() float64 {
	if m != nil {
		return m.OptionDynMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetExchOptionDynMargin() float64 {
	if m != nil {
		return m.ExchOptionDynMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetFrznMargin() float64 {
	if m != nil {
		return m.FrznMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetExchFrznMargin() float64 {
	if m != nil {
		return m.ExchFrznMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetFrznStrikeMargin() float64 {
	if m != nil {
		return m.FrznStrikeMargin
	}
	return 0
}

func (m *ForceCustInfoRsp) GetFrznRoyalty() float64 {
	if m != nil {
		return m.FrznRoyalty
	}
	return 0
}

func (m *ForceCustInfoRsp) GetTradeLevel() uint32 {
	if m != nil {
		return m.TradeLevel
	}
	return 0
}

func (m *ForceCustInfoRsp) GetTradeLevelSzse() uint32 {
	if m != nil {
		return m.TradeLevelSzse
	}
	return 0
}

func (m *ForceCustInfoRsp) GetClientmode() []byte {
	if m != nil {
		return m.Clientmode
	}
	return nil
}

func (m *ForceCustInfoRsp) GetAvailFund() float64 {
	if m != nil {
		return m.AvailFund
	}
	return 0
}

func (m *ForceCustInfoRsp) GetRspInfo() *RspInfo {
	if m != nil {
		return m.RspInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscribeReq)(nil), "riskmonitorserver.SubscribeReq")
	proto.RegisterType((*QryReq)(nil), "riskmonitorserver.QryReq")
	proto.RegisterType((*RspInfo)(nil), "riskmonitorserver.RspInfo")
	proto.RegisterType((*SettingValueField)(nil), "riskmonitorserver.SettingValueField")
	proto.RegisterType((*QryHoldCustsByContractReq)(nil), "riskmonitorserver.QryHoldCustsByContractReq")
	proto.RegisterType((*QryHoldCustsByContractRsp)(nil), "riskmonitorserver.QryHoldCustsByContractRsp")
	proto.RegisterType((*QuoteMonRtn)(nil), "riskmonitorserver.QuoteMonRtn")
	proto.RegisterType((*CustRiskRtn)(nil), "riskmonitorserver.CustRiskRtn")
	proto.RegisterType((*CustHoldRtn)(nil), "riskmonitorserver.CustHoldRtn")
	proto.RegisterType((*CustGroupHoldRtn)(nil), "riskmonitorserver.CustGroupHoldRtn")
	proto.RegisterType((*ProuctGroupRiskRtn)(nil), "riskmonitorserver.ProuctGroupRiskRtn")
	proto.RegisterType((*QryCustSimpleInfoReq)(nil), "riskmonitorserver.QryCustSimpleInfoReq")
	proto.RegisterType((*QryCustSimpleInfoRsp)(nil), "riskmonitorserver.QryCustSimpleInfoRsp")
	proto.RegisterType((*QryRealFundReq)(nil), "riskmonitorserver.QryRealFundReq")
	proto.RegisterType((*QryRealFundRsp)(nil), "riskmonitorserver.QryRealFundRsp")
	proto.RegisterType((*TunnelRealFundRtn)(nil), "riskmonitorserver.TunnelRealFundRtn")
	proto.RegisterType((*CorpHoldMonRtn)(nil), "riskmonitorserver.CorpHoldMonRtn")
	proto.RegisterType((*QryCustHoldReq)(nil), "riskmonitorserver.QryCustHoldReq")
	proto.RegisterType((*QryCustHoldRsp)(nil), "riskmonitorserver.QryCustHoldRsp")
	proto.RegisterType((*QrySingleCustEntrustReq)(nil), "riskmonitorserver.QrySingleCustEntrustReq")
	proto.RegisterType((*QrySingleCustEntrustRsp)(nil), "riskmonitorserver.QrySingleCustEntrustRsp")
	proto.RegisterType((*QryExchVariReq)(nil), "riskmonitorserver.QryExchVariReq")
	proto.RegisterType((*QryExchVariRsp)(nil), "riskmonitorserver.QryExchVariRsp")
	proto.RegisterType((*QryContractReq)(nil), "riskmonitorserver.QryContractReq")
	proto.RegisterType((*QryContractRsp)(nil), "riskmonitorserver.QryContractRsp")
	proto.RegisterType((*ContrRangeField)(nil), "riskmonitorserver.ContrRangeField")
	proto.RegisterType((*QuoteMonitorSetting)(nil), "riskmonitorserver.QuoteMonitorSetting")
	proto.RegisterType((*RiskContrLevelSetting)(nil), "riskmonitorserver.RiskContrLevelSetting")
	proto.RegisterType((*ContrGroupSetting)(nil), "riskmonitorserver.ContrGroupSetting")
	proto.RegisterType((*ProductGroupMonitorSetting)(nil), "riskmonitorserver.ProductGroupMonitorSetting")
	proto.RegisterType((*CustRiskMonitorSetting)(nil), "riskmonitorserver.CustRiskMonitorSetting")
	proto.RegisterType((*CustGroupSetting)(nil), "riskmonitorserver.CustGroupSetting")
	proto.RegisterType((*CorpHoldMonitorSetting)(nil), "riskmonitorserver.CorpHoldMonitorSetting")
	proto.RegisterType((*QryForceCustInfoReq)(nil), "riskmonitorserver.QryForceCustInfoReq")
	proto.RegisterType((*ForceCustInfoRsp)(nil), "riskmonitorserver.ForceCustInfoRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RiskMonitorServer service

type RiskMonitorServerClient interface {
	// 可以本地缓存处理的查询请求
	// 客户信息查询
	QryCustSimpleInfo(ctx context.Context, in *QryCustSimpleInfoReq, opts ...grpc.CallOption) (RiskMonitorServer_QryCustSimpleInfoClient, error)
	// 交易所对应品种查询
	QryExchVari(ctx context.Context, in *QryExchVariReq, opts ...grpc.CallOption) (RiskMonitorServer_QryExchVariClient, error)
	// 合约查询
	QryContract(ctx context.Context, in *QryContractReq, opts ...grpc.CallOption) (RiskMonitorServer_QryContractClient, error)
	// 订阅行情监控
	SubscribeQuoteMon(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeQuoteMonClient, error)
	// 订阅风险客户推送
	SubscribeCustRisk(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeCustRiskClient, error)
	// 风险监控配置项交互接口
	// 设置风险合约级别
	SetRiskContrLevel(ctx context.Context, opts ...grpc.CallOption) (RiskMonitorServer_SetRiskContrLevelClient, error)
	// 设置客户风险监控
	SetCustRiskMonitor(ctx context.Context, opts ...grpc.CallOption) (RiskMonitorServer_SetCustRiskMonitorClient, error)
	// 设置行情监控
	SetQuoteMonitor(ctx context.Context, opts ...grpc.CallOption) (RiskMonitorServer_SetQuoteMonitorClient, error)
}

type riskMonitorServerClient struct {
	cc *grpc.ClientConn
}

func NewRiskMonitorServerClient(cc *grpc.ClientConn) RiskMonitorServerClient {
	return &riskMonitorServerClient{cc}
}

func (c *riskMonitorServerClient) QryCustSimpleInfo(ctx context.Context, in *QryCustSimpleInfoReq, opts ...grpc.CallOption) (RiskMonitorServer_QryCustSimpleInfoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RiskMonitorServer_serviceDesc.Streams[0], c.cc, "/riskmonitorserver.RiskMonitorServer/QryCustSimpleInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &riskMonitorServerQryCustSimpleInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RiskMonitorServer_QryCustSimpleInfoClient interface {
	Recv() (*QryCustSimpleInfoRsp, error)
	grpc.ClientStream
}

type riskMonitorServerQryCustSimpleInfoClient struct {
	grpc.ClientStream
}

func (x *riskMonitorServerQryCustSimpleInfoClient) Recv() (*QryCustSimpleInfoRsp, error) {
	m := new(QryCustSimpleInfoRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *riskMonitorServerClient) QryExchVari(ctx context.Context, in *QryExchVariReq, opts ...grpc.CallOption) (RiskMonitorServer_QryExchVariClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RiskMonitorServer_serviceDesc.Streams[1], c.cc, "/riskmonitorserver.RiskMonitorServer/QryExchVari", opts...)
	if err != nil {
		return nil, err
	}
	x := &riskMonitorServerQryExchVariClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RiskMonitorServer_QryExchVariClient interface {
	Recv() (*QryExchVariRsp, error)
	grpc.ClientStream
}

type riskMonitorServerQryExchVariClient struct {
	grpc.ClientStream
}

func (x *riskMonitorServerQryExchVariClient) Recv() (*QryExchVariRsp, error) {
	m := new(QryExchVariRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *riskMonitorServerClient) QryContract(ctx context.Context, in *QryContractReq, opts ...grpc.CallOption) (RiskMonitorServer_QryContractClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RiskMonitorServer_serviceDesc.Streams[2], c.cc, "/riskmonitorserver.RiskMonitorServer/QryContract", opts...)
	if err != nil {
		return nil, err
	}
	x := &riskMonitorServerQryContractClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RiskMonitorServer_QryContractClient interface {
	Recv() (*QryContractRsp, error)
	grpc.ClientStream
}

type riskMonitorServerQryContractClient struct {
	grpc.ClientStream
}

func (x *riskMonitorServerQryContractClient) Recv() (*QryContractRsp, error) {
	m := new(QryContractRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *riskMonitorServerClient) SubscribeQuoteMon(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeQuoteMonClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RiskMonitorServer_serviceDesc.Streams[3], c.cc, "/riskmonitorserver.RiskMonitorServer/SubscribeQuoteMon", opts...)
	if err != nil {
		return nil, err
	}
	x := &riskMonitorServerSubscribeQuoteMonClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RiskMonitorServer_SubscribeQuoteMonClient interface {
	Recv() (*QuoteMonRtn, error)
	grpc.ClientStream
}

type riskMonitorServerSubscribeQuoteMonClient struct {
	grpc.ClientStream
}

func (x *riskMonitorServerSubscribeQuoteMonClient) Recv() (*QuoteMonRtn, error) {
	m := new(QuoteMonRtn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *riskMonitorServerClient) SubscribeCustRisk(ctx context.Context, in *SubscribeReq, opts ...grpc.CallOption) (RiskMonitorServer_SubscribeCustRiskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RiskMonitorServer_serviceDesc.Streams[4], c.cc, "/riskmonitorserver.RiskMonitorServer/SubscribeCustRisk", opts...)
	if err != nil {
		return nil, err
	}
	x := &riskMonitorServerSubscribeCustRiskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RiskMonitorServer_SubscribeCustRiskClient interface {
	Recv() (*CustRiskRtn, error)
	grpc.ClientStream
}

type riskMonitorServerSubscribeCustRiskClient struct {
	grpc.ClientStream
}

func (x *riskMonitorServerSubscribeCustRiskClient) Recv() (*CustRiskRtn, error) {
	m := new(CustRiskRtn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *riskMonitorServerClient) SetRiskContrLevel(ctx context.Context, opts ...grpc.CallOption) (RiskMonitorServer_SetRiskContrLevelClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RiskMonitorServer_serviceDesc.Streams[5], c.cc, "/riskmonitorserver.RiskMonitorServer/SetRiskContrLevel", opts...)
	if err != nil {
		return nil, err
	}
	x := &riskMonitorServerSetRiskContrLevelClient{stream}
	return x, nil
}

type RiskMonitorServer_SetRiskContrLevelClient interface {
	Send(*RiskContrLevelSetting) error
	CloseAndRecv() (*RspInfo, error)
	grpc.ClientStream
}

type riskMonitorServerSetRiskContrLevelClient struct {
	grpc.ClientStream
}

func (x *riskMonitorServerSetRiskContrLevelClient) Send(m *RiskContrLevelSetting) error {
	return x.ClientStream.SendMsg(m)
}

func (x *riskMonitorServerSetRiskContrLevelClient) CloseAndRecv() (*RspInfo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RspInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *riskMonitorServerClient) SetCustRiskMonitor(ctx context.Context, opts ...grpc.CallOption) (RiskMonitorServer_SetCustRiskMonitorClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RiskMonitorServer_serviceDesc.Streams[6], c.cc, "/riskmonitorserver.RiskMonitorServer/SetCustRiskMonitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &riskMonitorServerSetCustRiskMonitorClient{stream}
	return x, nil
}

type RiskMonitorServer_SetCustRiskMonitorClient interface {
	Send(*CustRiskMonitorSetting) error
	CloseAndRecv() (*RspInfo, error)
	grpc.ClientStream
}

type riskMonitorServerSetCustRiskMonitorClient struct {
	grpc.ClientStream
}

func (x *riskMonitorServerSetCustRiskMonitorClient) Send(m *CustRiskMonitorSetting) error {
	return x.ClientStream.SendMsg(m)
}

func (x *riskMonitorServerSetCustRiskMonitorClient) CloseAndRecv() (*RspInfo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RspInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *riskMonitorServerClient) SetQuoteMonitor(ctx context.Context, opts ...grpc.CallOption) (RiskMonitorServer_SetQuoteMonitorClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RiskMonitorServer_serviceDesc.Streams[7], c.cc, "/riskmonitorserver.RiskMonitorServer/SetQuoteMonitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &riskMonitorServerSetQuoteMonitorClient{stream}
	return x, nil
}

type RiskMonitorServer_SetQuoteMonitorClient interface {
	Send(*QuoteMonitorSetting) error
	CloseAndRecv() (*RspInfo, error)
	grpc.ClientStream
}

type riskMonitorServerSetQuoteMonitorClient struct {
	grpc.ClientStream
}

func (x *riskMonitorServerSetQuoteMonitorClient) Send(m *QuoteMonitorSetting) error {
	return x.ClientStream.SendMsg(m)
}

func (x *riskMonitorServerSetQuoteMonitorClient) CloseAndRecv() (*RspInfo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RspInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RiskMonitorServer service

type RiskMonitorServerServer interface {
	// 可以本地缓存处理的查询请求
	// 客户信息查询
	QryCustSimpleInfo(*QryCustSimpleInfoReq, RiskMonitorServer_QryCustSimpleInfoServer) error
	// 交易所对应品种查询
	QryExchVari(*QryExchVariReq, RiskMonitorServer_QryExchVariServer) error
	// 合约查询
	QryContract(*QryContractReq, RiskMonitorServer_QryContractServer) error
	// 订阅行情监控
	SubscribeQuoteMon(*SubscribeReq, RiskMonitorServer_SubscribeQuoteMonServer) error
	// 订阅风险客户推送
	SubscribeCustRisk(*SubscribeReq, RiskMonitorServer_SubscribeCustRiskServer) error
	// 风险监控配置项交互接口
	// 设置风险合约级别
	SetRiskContrLevel(RiskMonitorServer_SetRiskContrLevelServer) error
	// 设置客户风险监控
	SetCustRiskMonitor(RiskMonitorServer_SetCustRiskMonitorServer) error
	// 设置行情监控
	SetQuoteMonitor(RiskMonitorServer_SetQuoteMonitorServer) error
}

func RegisterRiskMonitorServerServer(s *grpc.Server, srv RiskMonitorServerServer) {
	s.RegisterService(&_RiskMonitorServer_serviceDesc, srv)
}

func _RiskMonitorServer_QryCustSimpleInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QryCustSimpleInfoReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RiskMonitorServerServer).QryCustSimpleInfo(m, &riskMonitorServerQryCustSimpleInfoServer{stream})
}

type RiskMonitorServer_QryCustSimpleInfoServer interface {
	Send(*QryCustSimpleInfoRsp) error
	grpc.ServerStream
}

type riskMonitorServerQryCustSimpleInfoServer struct {
	grpc.ServerStream
}

func (x *riskMonitorServerQryCustSimpleInfoServer) Send(m *QryCustSimpleInfoRsp) error {
	return x.ServerStream.SendMsg(m)
}

func _RiskMonitorServer_QryExchVari_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QryExchVariReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RiskMonitorServerServer).QryExchVari(m, &riskMonitorServerQryExchVariServer{stream})
}

type RiskMonitorServer_QryExchVariServer interface {
	Send(*QryExchVariRsp) error
	grpc.ServerStream
}

type riskMonitorServerQryExchVariServer struct {
	grpc.ServerStream
}

func (x *riskMonitorServerQryExchVariServer) Send(m *QryExchVariRsp) error {
	return x.ServerStream.SendMsg(m)
}

func _RiskMonitorServer_QryContract_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QryContractReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RiskMonitorServerServer).QryContract(m, &riskMonitorServerQryContractServer{stream})
}

type RiskMonitorServer_QryContractServer interface {
	Send(*QryContractRsp) error
	grpc.ServerStream
}

type riskMonitorServerQryContractServer struct {
	grpc.ServerStream
}

func (x *riskMonitorServerQryContractServer) Send(m *QryContractRsp) error {
	return x.ServerStream.SendMsg(m)
}

func _RiskMonitorServer_SubscribeQuoteMon_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RiskMonitorServerServer).SubscribeQuoteMon(m, &riskMonitorServerSubscribeQuoteMonServer{stream})
}

type RiskMonitorServer_SubscribeQuoteMonServer interface {
	Send(*QuoteMonRtn) error
	grpc.ServerStream
}

type riskMonitorServerSubscribeQuoteMonServer struct {
	grpc.ServerStream
}

func (x *riskMonitorServerSubscribeQuoteMonServer) Send(m *QuoteMonRtn) error {
	return x.ServerStream.SendMsg(m)
}

func _RiskMonitorServer_SubscribeCustRisk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RiskMonitorServerServer).SubscribeCustRisk(m, &riskMonitorServerSubscribeCustRiskServer{stream})
}

type RiskMonitorServer_SubscribeCustRiskServer interface {
	Send(*CustRiskRtn) error
	grpc.ServerStream
}

type riskMonitorServerSubscribeCustRiskServer struct {
	grpc.ServerStream
}

func (x *riskMonitorServerSubscribeCustRiskServer) Send(m *CustRiskRtn) error {
	return x.ServerStream.SendMsg(m)
}

func _RiskMonitorServer_SetRiskContrLevel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RiskMonitorServerServer).SetRiskContrLevel(&riskMonitorServerSetRiskContrLevelServer{stream})
}

type RiskMonitorServer_SetRiskContrLevelServer interface {
	SendAndClose(*RspInfo) error
	Recv() (*RiskContrLevelSetting, error)
	grpc.ServerStream
}

type riskMonitorServerSetRiskContrLevelServer struct {
	grpc.ServerStream
}

func (x *riskMonitorServerSetRiskContrLevelServer) SendAndClose(m *RspInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *riskMonitorServerSetRiskContrLevelServer) Recv() (*RiskContrLevelSetting, error) {
	m := new(RiskContrLevelSetting)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RiskMonitorServer_SetCustRiskMonitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RiskMonitorServerServer).SetCustRiskMonitor(&riskMonitorServerSetCustRiskMonitorServer{stream})
}

type RiskMonitorServer_SetCustRiskMonitorServer interface {
	SendAndClose(*RspInfo) error
	Recv() (*CustRiskMonitorSetting, error)
	grpc.ServerStream
}

type riskMonitorServerSetCustRiskMonitorServer struct {
	grpc.ServerStream
}

func (x *riskMonitorServerSetCustRiskMonitorServer) SendAndClose(m *RspInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *riskMonitorServerSetCustRiskMonitorServer) Recv() (*CustRiskMonitorSetting, error) {
	m := new(CustRiskMonitorSetting)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RiskMonitorServer_SetQuoteMonitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RiskMonitorServerServer).SetQuoteMonitor(&riskMonitorServerSetQuoteMonitorServer{stream})
}

type RiskMonitorServer_SetQuoteMonitorServer interface {
	SendAndClose(*RspInfo) error
	Recv() (*QuoteMonitorSetting, error)
	grpc.ServerStream
}

type riskMonitorServerSetQuoteMonitorServer struct {
	grpc.ServerStream
}

func (x *riskMonitorServerSetQuoteMonitorServer) SendAndClose(m *RspInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *riskMonitorServerSetQuoteMonitorServer) Recv() (*QuoteMonitorSetting, error) {
	m := new(QuoteMonitorSetting)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RiskMonitorServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "riskmonitorserver.RiskMonitorServer",
	HandlerType: (*RiskMonitorServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QryCustSimpleInfo",
			Handler:       _RiskMonitorServer_QryCustSimpleInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QryExchVari",
			Handler:       _RiskMonitorServer_QryExchVari_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QryContract",
			Handler:       _RiskMonitorServer_QryContract_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeQuoteMon",
			Handler:       _RiskMonitorServer_SubscribeQuoteMon_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCustRisk",
			Handler:       _RiskMonitorServer_SubscribeCustRisk_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetRiskContrLevel",
			Handler:       _RiskMonitorServer_SetRiskContrLevel_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SetCustRiskMonitor",
			Handler:       _RiskMonitorServer_SetCustRiskMonitor_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SetQuoteMonitor",
			Handler:       _RiskMonitorServer_SetQuoteMonitor_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "risk_monitor_server.proto",
}

func init() {
	proto.RegisterFile("risk_monitor_server.proto", fileDescriptor_risk_monitor_server_d760d86102bb67c7)
}

var fileDescriptor_risk_monitor_server_d760d86102bb67c7 = []byte{
	// 5145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0x4b, 0x73, 0xdc, 0x48,
	0x72, 0x5e, 0xbe, 0x9b, 0xd9, 0x2f, 0x12, 0xa4, 0xa8, 0x26, 0xb5, 0x92, 0xa8, 0x16, 0x45, 0x51,
	0x1a, 0x8d, 0x46, 0xa4, 0x66, 0xbc, 0x7e, 0x7b, 0x25, 0x6a, 0xb4, 0x23, 0x7b, 0x44, 0x49, 0x68,
	0x79, 0xd6, 0x7b, 0x70, 0x20, 0xc0, 0x46, 0xb1, 0x89, 0x10, 0x1a, 0x80, 0x50, 0x68, 0x4a, 0x3d,
	0xbf, 0xc1, 0xe1, 0x1f, 0xe1, 0x09, 0xff, 0x01, 0xdf, 0xfc, 0x17, 0x7c, 0xb5, 0xc3, 0x8f, 0x9f,
	0xe0, 0x08, 0xfb, 0x66, 0xfb, 0x68, 0x3b, 0x32, 0xb3, 0x0a, 0x28, 0x00, 0xcd, 0xc7, 0xbc, 0x14,
	0xbb, 0x0e, 0xdf, 0x88, 0x2f, 0x13, 0x85, 0xaa, 0xac, 0xcc, 0xac, 0xcc, 0xac, 0x6c, 0xc2, 0x7a,
	0xe2, 0xcb, 0x37, 0xce, 0x30, 0x0a, 0xfd, 0x34, 0x4a, 0x1c, 0x29, 0x92, 0x13, 0x91, 0xdc, 0x8f,
	0x93, 0x28, 0x8d, 0xac, 0x65, 0x24, 0x29, 0x0a, 0x13, 0xba, 0x2d, 0x68, 0xf4, 0x46, 0x87, 0xb2,
	0x9f, 0xf8, 0x87, 0xc2, 0x16, 0x6f, 0xbb, 0x35, 0x98, 0x7f, 0x95, 0x8c, 0xf1, 0xaf, 0x9f, 0xc1,
	0x82, 0x2d, 0xe3, 0x67, 0xe1, 0x51, 0x64, 0xad, 0xc2, 0x9c, 0x48, 0x12, 0xdf, 0xeb, 0x4c, 0x6d,
	0x4e, 0xed, 0x34, 0x6d, 0x7e, 0xb0, 0xd6, 0x60, 0x5e, 0x24, 0xc9, 0x50, 0x0e, 0x3a, 0xd3, 0x9b,
	0x53, 0x3b, 0x0d, 0x5b, 0x3d, 0x75, 0x7f, 0x05, 0xcb, 0x3d, 0x91, 0xa6, 0x7e, 0x38, 0xf8, 0xca,
	0x0d, 0x46, 0xe2, 0xa9, 0x2f, 0x02, 0xcf, 0xb2, 0x60, 0x36, 0x74, 0x87, 0x82, 0x46, 0x68, 0xd8,
	0xf4, 0xb7, 0xb5, 0x01, 0xb5, 0x28, 0x16, 0x89, 0x9b, 0x46, 0x09, 0x0d, 0xd1, 0xb4, 0xb3, 0x67,
	0xfc, 0xe4, 0x09, 0xbe, 0xdd, 0x99, 0xa1, 0x17, 0xf8, 0xa1, 0xfb, 0x73, 0x58, 0x7f, 0x95, 0x8c,
	0xbf, 0x88, 0x02, 0x6f, 0x7f, 0x24, 0x53, 0xf9, 0x78, 0xbc, 0x1f, 0x85, 0x69, 0xe2, 0xf6, 0x53,
	0x5b, 0xbc, 0xb5, 0x6e, 0x42, 0xb3, 0xaf, 0x1e, 0x9d, 0x7e, 0xe4, 0xe9, 0x6f, 0x35, 0x34, 0xb8,
	0x1f, 0x79, 0xa2, 0x1b, 0x9c, 0x3a, 0x82, 0x8c, 0xad, 0x75, 0xa8, 0xf5, 0x47, 0x32, 0x75, 0xc2,
	0x48, 0x76, 0xa6, 0x36, 0x67, 0x76, 0x1a, 0xf6, 0x02, 0x3e, 0x1f, 0x44, 0xd2, 0xfa, 0x14, 0x16,
	0x12, 0x96, 0x06, 0x4d, 0xb5, 0xbe, 0xb7, 0x71, 0xbf, 0x22, 0xcc, 0xfb, 0x4a, 0x5e, 0xb6, 0x66,
	0xed, 0xfe, 0xfb, 0x2c, 0xd4, 0x5f, 0x8d, 0xa2, 0x54, 0x3c, 0x8f, 0x42, 0x3b, 0x0d, 0xad, 0x2b,
	0xb0, 0x18, 0xbb, 0xfd, 0x37, 0xce, 0x51, 0xe0, 0x0e, 0x94, 0x30, 0x6b, 0x08, 0x3c, 0x0d, 0xdc,
	0x81, 0x75, 0x1d, 0xea, 0x6e, 0x3f, 0xf5, 0xa3, 0x90, 0xc9, 0x2c, 0x11, 0x60, 0x88, 0x18, 0xae,
	0x02, 0xe8, 0x6d, 0x0d, 0x23, 0x25, 0x98, 0x45, 0x85, 0x1c, 0x44, 0xd6, 0x0d, 0x68, 0xc8, 0xa1,
	0x9b, 0xbc, 0x11, 0x6a, 0xf9, 0xb3, 0xc4, 0x50, 0x57, 0x18, 0xae, 0x1e, 0x17, 0x28, 0x45, 0x9f,
	0xc9, 0x73, 0x44, 0x5e, 0x90, 0xa2, 0x4f, 0xa4, 0x8a, 0xf4, 0xe6, 0xab, 0xd2, 0xc3, 0x19, 0xa4,
	0x89, 0xeb, 0x09, 0x27, 0x1d, 0xc7, 0xa2, 0xb3, 0xc0, 0x33, 0x20, 0xe4, 0xf5, 0x38, 0x26, 0x72,
	0xe0, 0xca, 0xd4, 0x89, 0x13, 0xbf, 0x2f, 0x3a, 0xb5, 0xcd, 0xa9, 0x9d, 0x29, 0x7b, 0x11, 0x91,
	0x97, 0x08, 0x58, 0x0f, 0x60, 0x35, 0x4e, 0x84, 0x23, 0x45, 0x9a, 0x06, 0x62, 0x28, 0x42, 0xcd,
	0xb8, 0x48, 0x8c, 0x56, 0x9c, 0x88, 0x5e, 0x46, 0xe2, 0x37, 0xee, 0xc0, 0x52, 0x85, 0x1b, 0x88,
	0xbb, 0x2d, 0x4b, 0xac, 0x5b, 0xd0, 0x4a, 0x8e, 0x9c, 0xc0, 0x1f, 0xfa, 0x9a, 0xb1, 0x4e, 0x8c,
	0x8d, 0xe4, 0xe8, 0x4b, 0x04, 0x99, 0x6b, 0x09, 0x66, 0xfa, 0xc7, 0x83, 0x4e, 0x83, 0x48, 0xf8,
	0x27, 0xce, 0x99, 0x0c, 0x26, 0x10, 0x27, 0x22, 0xe8, 0x34, 0x79, 0x49, 0x88, 0x7c, 0x89, 0x00,
	0x8a, 0x25, 0x8a, 0x45, 0xe8, 0xf8, 0x61, 0x2a, 0x12, 0x21, 0xd3, 0x4e, 0x8b, 0xb6, 0xa5, 0x81,
	0xe0, 0x33, 0x85, 0xd1, 0xc6, 0xf8, 0xa1, 0x33, 0x74, 0x93, 0x81, 0x1f, 0x76, 0xda, 0xbc, 0xee,
	0xa1, 0x1f, 0x3e, 0x27, 0x00, 0x37, 0x86, 0x49, 0x4e, 0xe2, 0xa6, 0x7e, 0xd4, 0x59, 0x22, 0x86,
	0x3a, 0x63, 0x36, 0x42, 0xb8, 0xf7, 0x8a, 0xc5, 0xf3, 0x8f, 0x8e, 0x3a, 0xcb, 0xc4, 0x01, 0x0c,
	0x3d, 0xf1, 0x8f, 0x8e, 0x70, 0x79, 0xa9, 0xdf, 0x7f, 0xc3, 0x4b, 0x73, 0xc2, 0xd1, 0xb0, 0x63,
	0xf1, 0x44, 0x10, 0xa5, 0xb5, 0x1d, 0x8c, 0x86, 0xdd, 0x6f, 0x00, 0xea, 0xa8, 0xd7, 0xb6, 0x2f,
	0xdf, 0xfc, 0xe8, 0xfa, 0x76, 0x19, 0x16, 0x94, 0xb5, 0x28, 0x55, 0x9b, 0x67, 0x63, 0xc1, 0xf7,
	0x88, 0xd0, 0x0f, 0x5c, 0x29, 0x95, 0x9e, 0x2d, 0x22, 0xb2, 0x8f, 0x00, 0x4e, 0x8a, 0xdf, 0x43,
	0x7f, 0xc0, 0x5a, 0x46, 0x66, 0x77, 0x80, 0x3e, 0x01, 0x65, 0x15, 0x1d, 0xfa, 0x81, 0x70, 0xe2,
	0xe3, 0x28, 0xd4, 0x3a, 0x56, 0x67, 0xec, 0x25, 0x42, 0xd6, 0x35, 0x80, 0x7e, 0xe0, 0x8b, 0x30,
	0x1d, 0xa2, 0x9a, 0xd6, 0x88, 0xc1, 0x40, 0x4a, 0x3b, 0xba, 0x58, 0xde, 0xd1, 0x1b, 0xd0, 0x20,
	0xb2, 0x27, 0x06, 0x89, 0x10, 0x0f, 0x94, 0x3e, 0xd5, 0x11, 0x7b, 0xc2, 0x50, 0x89, 0x65, 0x57,
	0x69, 0x92, 0xc1, 0xb2, 0x5b, 0x62, 0xd9, 0x53, 0x1a, 0x65, 0xb0, 0xec, 0x95, 0x58, 0x1e, 0x92,
	0x6e, 0x15, 0x58, 0x1e, 0x5a, 0xdb, 0xd0, 0x26, 0x83, 0x31, 0xe6, 0xdb, 0xa2, 0xf9, 0x36, 0x11,
	0xb6, 0xb3, 0x39, 0x5f, 0x87, 0x3a, 0xf3, 0x89, 0xa1, 0x9b, 0x69, 0x18, 0xd9, 0x9a, 0x4d, 0x08,
	0xfa, 0x62, 0xa5, 0x7d, 0xac, 0x5c, 0xea, 0x09, 0x5f, 0xf4, 0x92, 0x28, 0x76, 0xe2, 0x24, 0x3a,
	0xf2, 0x53, 0xad, 0x57, 0x08, 0xbd, 0x24, 0x04, 0x19, 0x8e, 0xa3, 0xc0, 0xd3, 0x0c, 0x16, 0x33,
	0x20, 0x94, 0x33, 0xa4, 0x91, 0xe7, 0x8e, 0x1d, 0x3f, 0x8c, 0x46, 0x69, 0x67, 0x85, 0x19, 0x08,
	0x7a, 0x86, 0x08, 0x5a, 0x48, 0x12, 0x8d, 0xdd, 0x20, 0xd5, 0x2c, 0xab, 0xca, 0xee, 0x18, 0x64,
	0xa6, 0x2e, 0x34, 0xbd, 0x71, 0xe8, 0xf4, 0xdd, 0xd8, 0x49, 0xfc, 0xc1, 0x71, 0xda, 0xb9, 0xc4,
	0xc2, 0xf0, 0xc6, 0xe1, 0xbe, 0x1b, 0xdb, 0x08, 0xe1, 0x97, 0xc4, 0xfb, 0xfe, 0xb1, 0x36, 0xa3,
	0x35, 0xfe, 0x12, 0x42, 0xca, 0x8e, 0xae, 0x02, 0xb8, 0x27, 0xae, 0x1f, 0x38, 0x47, 0xa3, 0xd0,
	0xeb, 0x5c, 0x66, 0x33, 0x23, 0xe4, 0xe9, 0x28, 0xf4, 0x90, 0x1c, 0xc5, 0xa4, 0xcf, 0x7d, 0x37,
	0xee, 0x74, 0x98, 0xcc, 0xc8, 0xbe, 0x1b, 0x23, 0x19, 0xa7, 0x40, 0x9f, 0x97, 0x9d, 0x75, 0x26,
	0x7b, 0xe3, 0x90, 0x3e, 0x2e, 0xad, 0xbb, 0xb0, 0xac, 0xde, 0x46, 0x2e, 0x35, 0x87, 0x0d, 0xf6,
	0x35, 0x4c, 0x78, 0x32, 0xd6, 0x06, 0x7d, 0x1d, 0xea, 0x47, 0xc9, 0xd7, 0x19, 0xd7, 0x15, 0x9e,
	0x29, 0x42, 0xb9, 0xc5, 0x13, 0x83, 0x92, 0x41, 0xe7, 0xa7, 0xbc, 0x5a, 0xc4, 0x6c, 0x86, 0xac,
	0x1d, 0x58, 0xa2, 0xd5, 0x9a, 0x03, 0x5d, 0x25, 0xb6, 0x16, 0xe2, 0x4f, 0xf3, 0xc1, 0xee, 0x81,
	0x45, 0x4c, 0x32, 0x4d, 0xfc, 0x37, 0x42, 0xf3, 0x5e, 0x23, 0xde, 0x25, 0xa4, 0xf4, 0x88, 0xa0,
	0xb8, 0xf3, 0x75, 0x84, 0xd1, 0x3b, 0xcd, 0x7c, 0xdd, 0x5c, 0xc7, 0x41, 0xf4, 0x4e, 0xf1, 0x3e,
	0x84, 0x35, 0x9a, 0x43, 0xf5, 0x85, 0x4d, 0x7a, 0x61, 0x05, 0xa9, 0x2f, 0xce, 0x7e, 0xc9, 0x90,
	0xd6, 0x8d, 0xf2, 0x4b, 0xb9, 0xc4, 0xee, 0x02, 0xc5, 0x1e, 0x4e, 0x76, 0xc4, 0xbc, 0x4d, 0xc7,
	0x9d, 0x2e, 0x79, 0x9c, 0x36, 0x12, 0xf4, 0x29, 0xfc, 0x2a, 0x1d, 0xd3, 0x49, 0x34, 0x4a, 0x12,
	0x11, 0xf6, 0xc7, 0x7c, 0x12, 0xdd, 0x54, 0x27, 0x91, 0x02, 0xcd, 0x93, 0xc8, 0x0f, 0x07, 0xe8,
	0x7f, 0xb6, 0xf2, 0x93, 0xc8, 0x0f, 0x07, 0x07, 0x11, 0xfa, 0x18, 0xda, 0x6c, 0xf2, 0xb7, 0xb7,
	0x68, 0x5e, 0x35, 0xdc, 0x6b, 0x7c, 0xee, 0xfe, 0xf5, 0x1c, 0x7b, 0x49, 0x8c, 0x02, 0x7e, 0x9d,
	0xbd, 0x24, 0x89, 0xd9, 0x38, 0x8b, 0x6b, 0x08, 0xd0, 0xea, 0xaf, 0xc0, 0xe2, 0x89, 0x9b, 0xf8,
	0x4c, 0x64, 0x17, 0x59, 0x43, 0x60, 0xf2, 0x49, 0x5e, 0x9b, 0x7c, 0x92, 0x7b, 0x22, 0xf0, 0x4f,
	0x1c, 0xcf, 0x4d, 0x85, 0x76, 0x92, 0x84, 0x3c, 0x71, 0x53, 0x81, 0xb3, 0x96, 0xc7, 0xbc, 0x62,
	0xe0, 0x59, 0xcb, 0x63, 0x5a, 0xed, 0x65, 0x58, 0x38, 0x94, 0x4c, 0xa8, 0x33, 0xe1, 0x50, 0x12,
	0xe1, 0xa7, 0x40, 0x5e, 0xc3, 0x39, 0x74, 0xe4, 0x68, 0x48, 0xee, 0xb0, 0x69, 0xd7, 0x10, 0x79,
	0xdc, 0x1b, 0x0d, 0x33, 0xaa, 0x24, 0x6a, 0x33, 0xa7, 0xf6, 0x90, 0xba, 0x0e, 0x35, 0xa6, 0x8e,
	0x86, 0xea, 0x7c, 0x5d, 0x20, 0xda, 0x68, 0x58, 0x8a, 0x38, 0xda, 0xe5, 0x88, 0x03, 0xa5, 0x1b,
	0xf3, 0x74, 0x96, 0x94, 0x74, 0x63, 0x63, 0x57, 0x52, 0xb5, 0x86, 0xe5, 0x6c, 0x57, 0xd2, 0x63,
	0xbd, 0xab, 0x1c, 0x2a, 0xb0, 0x86, 0x28, 0xb7, 0x47, 0x10, 0x1f, 0xc8, 0x37, 0xa0, 0xc1, 0x0c,
	0x27, 0x51, 0x30, 0x1c, 0x09, 0xf2, 0x7b, 0x4d, 0x9b, 0x5f, 0xfa, 0x8a, 0x20, 0x1c, 0x23, 0x3a,
	0x11, 0x09, 0x72, 0x8c, 0x86, 0x82, 0xdc, 0x5e, 0xd3, 0x06, 0x84, 0xbe, 0x22, 0x84, 0x1d, 0x5a,
	0xec, 0x27, 0xc2, 0xf1, 0xdc, 0xb1, 0x24, 0x97, 0xd7, 0x44, 0x87, 0x86, 0xd0, 0x13, 0x77, 0x2c,
	0x29, 0x5e, 0xa2, 0x8f, 0x1c, 0xba, 0x52, 0x90, 0xc3, 0x6b, 0xda, 0x8b, 0x84, 0x3c, 0x76, 0xa5,
	0xe8, 0xfe, 0xf7, 0x2c, 0x2c, 0xa1, 0x9e, 0xfe, 0x22, 0x89, 0x46, 0xf1, 0x07, 0x51, 0xd6, 0x2e,
	0x9a, 0x9e, 0x4c, 0x9d, 0x01, 0x7e, 0x31, 0x57, 0xd9, 0x7a, 0x5f, 0xcf, 0xe2, 0x20, 0xc2, 0x33,
	0xcb, 0xe4, 0xc1, 0x43, 0x9c, 0x95, 0xb7, 0x99, 0x73, 0xe1, 0x49, 0xfe, 0xff, 0x0a, 0xfc, 0x9b,
	0xae, 0xc0, 0xdd, 0xbf, 0x9a, 0x07, 0xeb, 0x65, 0x12, 0x8d, 0xfa, 0xbc, 0xad, 0x1f, 0x24, 0xaa,
	0xdc, 0x81, 0xa5, 0x38, 0x89, 0xbc, 0x51, 0xbf, 0xa2, 0x85, 0x2d, 0x85, 0x6b, 0x45, 0xbc, 0x07,
	0x56, 0x89, 0x33, 0xd7, 0xc5, 0xa5, 0x02, 0x2f, 0xaa, 0xe3, 0x2a, 0xcc, 0xf5, 0xa3, 0x51, 0x98,
	0x92, 0x2a, 0x36, 0x6d, 0x7e, 0xc8, 0x62, 0x45, 0x26, 0x2d, 0xb0, 0x05, 0xf2, 0x81, 0x84, 0xe4,
	0xeb, 0x50, 0x37, 0x42, 0x38, 0x95, 0xd1, 0x40, 0x1e, 0xc1, 0x55, 0x72, 0xae, 0xc5, 0xb3, 0x73,
	0x2e, 0x38, 0x27, 0xe7, 0xaa, 0x9f, 0x9b, 0x73, 0x35, 0xce, 0xce, 0xb9, 0x9a, 0x17, 0xcd, 0xb9,
	0x5a, 0xdf, 0x2a, 0xe7, 0x6a, 0x5f, 0x34, 0xe7, 0x5a, 0x3a, 0x3d, 0xe7, 0x5a, 0x3e, 0x2d, 0xe7,
	0xb2, 0xce, 0xcd, 0xb9, 0x56, 0xce, 0xcd, 0xb9, 0x56, 0xcf, 0xcb, 0xb9, 0x2e, 0x9d, 0x9b, 0x73,
	0xad, 0x5d, 0x20, 0xe7, 0xba, 0x3c, 0x21, 0xe7, 0xfa, 0x8b, 0x29, 0x58, 0x7d, 0x95, 0x8c, 0xd1,
	0x51, 0xf7, 0xfc, 0x61, 0x1c, 0x08, 0x2a, 0x01, 0x88, 0xb7, 0xe6, 0xc9, 0x3f, 0x75, 0xc6, 0xc9,
	0x3f, 0x5d, 0x3e, 0xf9, 0xaf, 0x03, 0xf9, 0x5b, 0x47, 0xa6, 0x6e, 0x3a, 0x92, 0xca, 0x42, 0xe8,
	0x8d, 0x1e, 0x21, 0xc5, 0x04, 0x6a, 0xb6, 0x98, 0x40, 0x75, 0xff, 0x69, 0x66, 0xd2, 0x74, 0x64,
	0x6c, 0x56, 0x30, 0xa6, 0x2e, 0x5c, 0xc1, 0x28, 0xda, 0xfa, 0x74, 0xc9, 0xd6, 0x8d, 0x15, 0xce,
	0x9c, 0xb1, 0xc2, 0xd9, 0x73, 0x56, 0x38, 0x77, 0xf6, 0x0a, 0xcb, 0x29, 0xe2, 0x2a, 0xcc, 0x99,
	0xb9, 0x21, 0x3f, 0xa0, 0x96, 0x1d, 0xb9, 0xef, 0xd5, 0x51, 0x81, 0x7f, 0x5a, 0x16, 0xcc, 0xba,
	0x9e, 0x97, 0x28, 0x9b, 0xa4, 0xbf, 0xe9, 0xcb, 0x43, 0xcf, 0x71, 0xa5, 0xf4, 0x07, 0xe1, 0xae,
	0xb2, 0x47, 0xe8, 0x0f, 0xbd, 0x47, 0x8c, 0x50, 0x68, 0x3f, 0x0a, 0x3d, 0xc7, 0x0d, 0x82, 0x28,
	0xdd, 0x55, 0x06, 0x09, 0x08, 0x3d, 0x22, 0x84, 0x6a, 0x61, 0x43, 0xd7, 0x0f, 0x94, 0x25, 0xf2,
	0x43, 0x71, 0xdc, 0x3d, 0x55, 0x46, 0xc8, 0xc7, 0xdd, 0xab, 0xe4, 0xb5, 0xad, 0xf3, 0xf2, 0xda,
	0x76, 0x39, 0xaf, 0xed, 0x1e, 0x40, 0x8b, 0x4a, 0x73, 0x2e, 0xa5, 0x3b, 0x67, 0x6a, 0x58, 0x25,
	0x84, 0x9e, 0xae, 0x86, 0xd0, 0xdd, 0x7f, 0xbd, 0x54, 0x1c, 0x50, 0xc6, 0x67, 0x7b, 0x76, 0xe3,
	0x6b, 0xd3, 0x85, 0xaf, 0x15, 0x76, 0x6b, 0xa6, 0xb4, 0x5b, 0x95, 0xa9, 0xcc, 0x4e, 0x88, 0xe6,
	0xb7, 0xa1, 0xcd, 0x52, 0xef, 0x93, 0x23, 0xc6, 0x4f, 0xa8, 0x98, 0x82, 0x24, 0xcf, 0xe8, 0x41,
	0x54, 0xce, 0x83, 0xe7, 0x2b, 0x79, 0x70, 0x31, 0x45, 0x5c, 0x28, 0xa7, 0x88, 0x5b, 0xd0, 0x3a,
	0x74, 0x44, 0x98, 0x26, 0x38, 0x5d, 0x4c, 0x9d, 0x94, 0x4b, 0x6f, 0x1c, 0x7e, 0xce, 0x20, 0xa6,
	0x5d, 0xc8, 0x25, 0x8b, 0x5c, 0x5c, 0xa1, 0x6a, 0x48, 0x93, 0x8b, 0x0e, 0x94, 0xe1, 0xd0, 0x57,
	0x05, 0x04, 0x7e, 0x40, 0x6f, 0x7f, 0xa8, 0x9d, 0x12, 0x97, 0x0d, 0x16, 0x0e, 0x95, 0x4b, 0xc2,
	0x83, 0x40, 0x93, 0xb8, 0x5c, 0xb0, 0x20, 0x9f, 0x4f, 0x4c, 0xd3, 0x9b, 0xe7, 0xa5, 0xe9, 0xad,
	0x4a, 0x9a, 0x7e, 0x05, 0x16, 0xdf, 0xb9, 0x63, 0x67, 0x18, 0x85, 0x62, 0xac, 0xdc, 0x75, 0xed,
	0x9d, 0x3b, 0x7e, 0x8e, 0xcf, 0xd6, 0x2d, 0x68, 0x8d, 0x42, 0x8e, 0x96, 0xd4, 0x00, 0xec, 0xa7,
	0x9b, 0x0a, 0x55, 0x63, 0x14, 0x33, 0xe4, 0xe5, 0x72, 0x86, 0x5c, 0xaa, 0x04, 0x58, 0x95, 0x4a,
	0x00, 0x9e, 0x54, 0x51, 0xea, 0x06, 0x2c, 0x33, 0xae, 0x14, 0x2c, 0x12, 0x42, 0x02, 0xcb, 0x6b,
	0x14, 0xab, 0xe5, 0x1a, 0x85, 0x99, 0xf7, 0x5f, 0x9a, 0x94, 0xf7, 0xc7, 0x81, 0xf0, 0x06, 0xc2,
	0x71, 0x87, 0xa9, 0xf2, 0xd3, 0x8b, 0x8c, 0x3c, 0x1a, 0xd2, 0x67, 0xfb, 0x89, 0xf0, 0xfc, 0x94,
	0xc8, 0xaa, 0x2c, 0xc0, 0x08, 0x92, 0xcb, 0xf5, 0x9e, 0xce, 0xf9, 0xf5, 0x9e, 0xf5, 0xf3, 0xeb,
	0x3d, 0x1b, 0xe7, 0xd7, 0x7b, 0xae, 0x54, 0xeb, 0x3d, 0x45, 0x96, 0x4f, 0x75, 0x5d, 0x20, 0x67,
	0xf9, 0xb4, 0x74, 0x36, 0x5e, 0x2d, 0x9f, 0x8d, 0x57, 0x81, 0xea, 0x0c, 0x0e, 0xab, 0x1e, 0x17,
	0x01, 0x16, 0x11, 0xd9, 0x27, 0xf5, 0x23, 0xcf, 0xaa, 0xac, 0x2d, 0xcb, 0xfb, 0x41, 0x43, 0xcf,
	0xe8, 0x5c, 0xcc, 0x18, 0x70, 0x17, 0x39, 0xd1, 0xcf, 0x5e, 0x7a, 0x31, 0x22, 0x81, 0xf9, 0xa1,
	0x9f, 0xfa, 0xae, 0xb2, 0x22, 0x4e, 0xeb, 0xeb, 0x0a, 0x23, 0x3b, 0xba, 0x05, 0x2d, 0xb5, 0x23,
	0x87, 0x6e, 0xe0, 0x86, 0x7d, 0x41, 0xb9, 0xfc, 0x94, 0xdd, 0x64, 0xf4, 0x31, 0x83, 0x38, 0xd9,
	0xc3, 0x28, 0x49, 0xa2, 0x77, 0xb4, 0x33, 0x37, 0x79, 0xb2, 0x8c, 0xe0, 0xce, 0xac, 0x43, 0x2d,
	0x10, 0x68, 0xf5, 0xc3, 0x94, 0x32, 0xf8, 0x29, 0x7b, 0x01, 0x9f, 0x91, 0xb4, 0x0d, 0x6d, 0x19,
	0x8b, 0xbe, 0x63, 0xe8, 0x13, 0x67, 0xf1, 0x4d, 0x84, 0x5f, 0x67, 0x3a, 0xf5, 0x31, 0xac, 0x10,
	0x5f, 0xc9, 0xaa, 0xb7, 0xb9, 0x38, 0x82, 0xa4, 0xc7, 0xa6, 0xcd, 0x6a, 0xf6, 0x92, 0x79, 0xdf,
	0xce, 0xd9, 0x7b, 0x26, 0x7b, 0x17, 0x9a, 0x6a, 0x74, 0xa5, 0x9b, 0x3b, 0x2c, 0x0a, 0x1a, 0x57,
	0x29, 0xa7, 0xe6, 0xc9, 0x4c, 0xfb, 0x4e, 0xce, 0xd3, 0xcb, 0xcd, 0x9b, 0x78, 0x14, 0xc7, 0x5d,
	0xde, 0x15, 0x84, 0x14, 0xc3, 0x0e, 0xd0, 0xc7, 0x1d, 0xd3, 0x0e, 0x3e, 0xe2, 0x62, 0x10, 0xe2,
	0x9f, 0xe7, 0xb6, 0xa0, 0x05, 0x63, 0x28, 0xc1, 0xbd, 0x5c, 0x30, 0x4f, 0x33, 0x45, 0xb8, 0x0a,
	0x34, 0xbe, 0x62, 0xf9, 0x98, 0x45, 0x8f, 0x08, 0x93, 0xf5, 0x07, 0x4d, 0xaf, 0x73, 0x3f, 0xff,
	0xe0, 0x93, 0xdc, 0xf3, 0x68, 0x4e, 0xd3, 0xfd, 0x7c, 0x92, 0x73, 0x7e, 0x91, 0xbb, 0x20, 0x8c,
	0xc7, 0x59, 0x29, 0x4c, 0x15, 0x7c, 0xc0, 0xb2, 0x65, 0xca, 0x7e, 0xae, 0x88, 0xf7, 0x61, 0xa5,
	0xcc, 0x8d, 0xfa, 0xb8, 0x4b, 0xec, 0xcb, 0x45, 0x76, 0xd4, 0xca, 0xdb, 0xd0, 0xce, 0xa2, 0x35,
	0xc9, 0xe1, 0xfa, 0x1e, 0x4f, 0x43, 0x47, 0x6c, 0x32, 0x0f, 0xe9, 0xb3, 0x7a, 0x64, 0xe7, 0x21,
	0xaf, 0x3c, 0x2b, 0x46, 0x52, 0x48, 0xaf, 0xc8, 0xf8, 0xbd, 0x4f, 0x55, 0x48, 0xcf, 0x90, 0x52,
	0xff, 0x42, 0xed, 0xee, 0xb3, 0x6a, 0xed, 0xee, 0x1e, 0x58, 0xaa, 0x18, 0x67, 0x56, 0xef, 0x7e,
	0x4b, 0x69, 0x11, 0x51, 0x8c, 0xfa, 0x5d, 0xb1, 0x2e, 0xf9, 0xb3, 0x72, 0x5d, 0xb2, 0x52, 0x1a,
	0xfd, 0xed, 0x6a, 0x69, 0xb4, 0x52, 0x63, 0xfd, 0x9d, 0x09, 0x35, 0xd6, 0x89, 0x15, 0xcc, 0xdf,
	0x9d, 0x5c, 0xc1, 0xdc, 0x86, 0x36, 0xe9, 0x9a, 0xc1, 0xf9, 0x7b, 0xac, 0x46, 0x08, 0xe7, 0x7c,
	0x1f, 0x81, 0x75, 0xc8, 0x8b, 0x34, 0x55, 0xf3, 0xf7, 0x79, 0xd0, 0x43, 0x5c, 0xa4, 0xa1, 0x9b,
	0x1f, 0x81, 0x25, 0xab, 0xcc, 0x7f, 0xa0, 0x72, 0x87, 0x12, 0xf3, 0x55, 0x00, 0xa3, 0xde, 0xf8,
	0x87, 0x2c, 0x95, 0x30, 0xab, 0x32, 0xea, 0x09, 0x1a, 0x3c, 0x7f, 0x94, 0x4f, 0x30, 0xaf, 0x46,
	0xa2, 0x7a, 0x1a, 0x5b, 0x41, 0x0e, 0xeb, 0xe7, 0x4a, 0x3d, 0xb3, 0x8d, 0x20, 0x9f, 0xf5, 0x19,
	0x5c, 0x36, 0x39, 0xa3, 0xf4, 0x58, 0x24, 0xca, 0x3c, 0x1e, 0xd1, 0x0b, 0xab, 0xf9, 0x0b, 0x2f,
	0x90, 0xc8, 0x96, 0xb2, 0x05, 0x2d, 0x3f, 0xf4, 0x4d, 0x47, 0xf4, 0x98, 0x65, 0xef, 0x87, 0x7e,
	0xee, 0x87, 0x6e, 0x41, 0x4b, 0xc7, 0x2e, 0x2a, 0xa8, 0xdd, 0xe7, 0xf8, 0x45, 0xa1, 0x2a, 0xae,
	0xd5, 0xd1, 0xa5, 0xe2, 0x79, 0x92, 0x47, 0x97, 0x8a, 0xe1, 0x06, 0x34, 0x38, 0xd9, 0x53, 0x1c,
	0x9f, 0x73, 0x98, 0x48, 0x98, 0x62, 0xd9, 0x82, 0x96, 0x61, 0x8b, 0x4e, 0x14, 0x77, 0x9e, 0xf2,
	0x84, 0xf2, 0x68, 0xe0, 0x45, 0x8c, 0x5c, 0x51, 0x5c, 0x30, 0xef, 0x5f, 0x30, 0x57, 0x14, 0x1b,
	0xc6, 0xfd, 0x09, 0xac, 0x8e, 0x05, 0x26, 0x8f, 0x6c, 0x89, 0x24, 0x18, 0xf4, 0xc6, 0x5f, 0xb0,
	0x15, 0x22, 0xed, 0x25, 0x91, 0x70, 0x91, 0xe8, 0x97, 0x3f, 0x86, 0x15, 0x1d, 0x7d, 0x39, 0xf2,
	0x9d, 0x1b, 0x73, 0xf2, 0xd7, 0x79, 0xc6, 0xaa, 0xaf, 0xa2, 0xb0, 0xde, 0x3b, 0x37, 0xa6, 0xfc,
	0xcf, 0xba, 0x03, 0xcb, 0xe9, 0x2e, 0xdf, 0x6e, 0xd0, 0xba, 0x49, 0x7e, 0x7f, 0xcc, 0xdb, 0x93,
	0xee, 0xda, 0xbe, 0x7c, 0x83, 0x5b, 0x43, 0x12, 0xdc, 0x86, 0x36, 0x05, 0x2f, 0x38, 0x17, 0x75,
	0xd2, 0xff, 0x09, 0x6f, 0x38, 0xc1, 0x2f, 0x11, 0xc5, 0x19, 0x18, 0x69, 0xcc, 0x97, 0x17, 0xbf,
	0x88, 0xfd, 0xcf, 0x69, 0x58, 0x7e, 0x3d, 0x0a, 0x43, 0x11, 0x64, 0xe1, 0xee, 0x8f, 0x5d, 0xc8,
	0xc0, 0x70, 0x89, 0xbe, 0x68, 0x86, 0xbd, 0xc0, 0x50, 0x96, 0xfd, 0x17, 0x22, 0xe3, 0xb9, 0x09,
	0x91, 0xf1, 0x03, 0x58, 0xe5, 0x80, 0x56, 0x39, 0x3f, 0x7d, 0xde, 0x72, 0xe8, 0x6b, 0x11, 0x8d,
	0x4d, 0x41, 0x1f, 0xba, 0x0f, 0x60, 0x95, 0xc3, 0xb4, 0xd2, 0x1b, 0x1c, 0x0c, 0x5b, 0x44, 0x2b,
	0xbe, 0x71, 0x1b, 0xda, 0x51, 0xbf, 0x3f, 0x8a, 0x7d, 0xe1, 0x69, 0x5b, 0xe3, 0xb0, 0xb8, 0xa5,
	0x61, 0x65, 0x6c, 0x0f, 0x60, 0x55, 0x0d, 0x9a, 0xf1, 0x27, 0xba, 0xfa, 0x36, 0x65, 0x5b, 0x4c,
	0x7b, 0xa1, 0x48, 0xb6, 0x9b, 0x8a, 0xee, 0xdf, 0x4d, 0x43, 0x6b, 0x3f, 0x4a, 0xa8, 0x7a, 0xf9,
	0xeb, 0x7f, 0x07, 0xae, 0x48, 0x46, 0xd6, 0x89, 0xa4, 0x2c, 0x8d, 0x29, 0x94, 0x6a, 0x16, 0x26,
	0x94, 0x6a, 0x6e, 0x41, 0xcb, 0xf3, 0x13, 0xc1, 0x0b, 0xa0, 0x72, 0x0d, 0xa7, 0xa3, 0xcd, 0x0c,
	0xa5, 0x92, 0x8d, 0xae, 0x16, 0xbe, 0x4d, 0xc7, 0x24, 0x3a, 0x55, 0x2d, 0x7c, 0x95, 0x8e, 0x51,
	0x38, 0x44, 0x22, 0xb1, 0x72, 0x62, 0x41, 0xbc, 0x24, 0xcc, 0x13, 0xca, 0xd7, 0xb2, 0x9b, 0x8b,
	0xf3, 0x12, 0xc0, 0xc2, 0x74, 0xa7, 0x27, 0x4c, 0x77, 0x1b, 0xda, 0x6f, 0x47, 0x22, 0x19, 0xf3,
	0xd9, 0x4e, 0x02, 0x67, 0x81, 0x36, 0x09, 0xc6, 0x8f, 0xa0, 0xcc, 0xbb, 0x7f, 0x0f, 0xc5, 0x0f,
	0x7f, 0xe7, 0x44, 0xb1, 0x58, 0x16, 0x98, 0x39, 0xf3, 0x62, 0xb8, 0x54, 0xd7, 0xc0, 0x41, 0xd3,
	0xf7, 0x5c, 0xec, 0xe5, 0x5d, 0x9b, 0x4f, 0xdf, 0x53, 0xa5, 0xf7, 0xff, 0x56, 0x9d, 0xf9, 0x36,
	0x2c, 0x29, 0x2a, 0x1b, 0x71, 0x5e, 0x6d, 0x6e, 0x12, 0xcf, 0x6b, 0x44, 0x8b, 0x8c, 0xee, 0xc9,
	0xa0, 0x50, 0xd4, 0x63, 0xc6, 0x47, 0x27, 0x03, 0x2e, 0xbf, 0x95, 0x52, 0xc7, 0x76, 0x25, 0x75,
	0xd4, 0x23, 0x49, 0x63, 0xa4, 0xa5, 0x7c, 0xa4, 0x5e, 0x36, 0xd2, 0x2a, 0xcc, 0x1d, 0xbb, 0xa1,
	0xc7, 0xa9, 0x61, 0xd3, 0xe6, 0x07, 0x14, 0x71, 0x28, 0xde, 0xa9, 0xf7, 0x38, 0x29, 0xac, 0x85,
	0xe2, 0x1d, 0xbf, 0x52, 0x2c, 0x9b, 0xaf, 0x94, 0xca, 0xe6, 0xf9, 0x97, 0xf3, 0xc5, 0xae, 0xe6,
	0x8b, 0xed, 0x65, 0x8b, 0x35, 0xb3, 0xea, 0x4b, 0xa7, 0x67, 0xd5, 0x6b, 0xc5, 0xac, 0xfa, 0x26,
	0x34, 0x65, 0x8a, 0x96, 0x34, 0x50, 0x0e, 0xf6, 0x32, 0xef, 0xaf, 0x06, 0xb5, 0x12, 0x64, 0x4c,
	0xa4, 0x78, 0x9d, 0x22, 0x13, 0x29, 0x1f, 0xa6, 0x55, 0x6e, 0x76, 0x79, 0x49, 0xf9, 0x61, 0xc3,
	0x86, 0xbe, 0xab, 0xaf, 0x2d, 0xab, 0xbe, 0x7c, 0x63, 0x82, 0x2f, 0xbf, 0x0f, 0x2b, 0x99, 0xbe,
	0xc9, 0xe3, 0x28, 0x51, 0x9a, 0x7e, 0x85, 0x58, 0x97, 0x35, 0xa9, 0x87, 0x14, 0xfa, 0x6a, 0xb1,
	0xf2, 0xfb, 0xd3, 0x72, 0xe5, 0xb7, 0x03, 0x0b, 0x3a, 0x46, 0xe5, 0x8b, 0x63, 0xfd, 0x58, 0xce,
	0xa8, 0xaf, 0x55, 0x32, 0xea, 0xd2, 0xcd, 0xd4, 0xf5, 0xca, 0xcd, 0x14, 0xc6, 0x21, 0xb4, 0x25,
	0xaa, 0xf2, 0xad, 0xd2, 0x44, 0xc2, 0x54, 0xe9, 0x7b, 0x1b, 0x30, 0xaa, 0x2c, 0xe4, 0x05, 0x9c,
	0x29, 0x36, 0xa3, 0x38, 0x35, 0xd2, 0x82, 0x75, 0xa8, 0x51, 0x5c, 0x91, 0xdf, 0xf8, 0x2e, 0xe0,
	0x33, 0x7a, 0xbb, 0x2e, 0x34, 0xc5, 0x7b, 0x91, 0x38, 0x19, 0xfd, 0x26, 0x5f, 0x52, 0x20, 0xf8,
	0x54, 0xf1, 0x90, 0x79, 0x63, 0xa6, 0x82, 0xe6, 0xb7, 0xa5, 0xcd, 0x5b, 0xf4, 0xb5, 0xf5, 0xe9,
	0xdb, 0x93, 0x5b, 0x85, 0xdb, 0x93, 0x4d, 0xa0, 0x70, 0xc8, 0xc1, 0x19, 0x62, 0xd4, 0xbd, 0x9d,
	0x6b, 0xfd, 0x8b, 0x38, 0xc5, 0xb0, 0xfb, 0x1e, 0x58, 0xfd, 0x20, 0x92, 0xc2, 0x71, 0x83, 0xc0,
	0x89, 0x23, 0xe9, 0xa3, 0x7b, 0xd6, 0x99, 0x20, 0x51, 0x1e, 0x05, 0xc1, 0x4b, 0x85, 0x67, 0x7e,
	0x84, 0x36, 0x6c, 0x27, 0xf7, 0x23, 0xb4, 0x4f, 0x46, 0x48, 0x72, 0xe7, 0xe2, 0x21, 0xc9, 0x1e,
	0x5c, 0x7e, 0x95, 0x8c, 0x7b, 0x7e, 0x38, 0x08, 0x04, 0xba, 0x56, 0x95, 0x78, 0x9e, 0xe5, 0xd6,
	0xbb, 0xff, 0xd5, 0x3c, 0xe5, 0xa5, 0x1f, 0xa7, 0x76, 0x77, 0x15, 0x40, 0xe7, 0xc9, 0xd9, 0x2d,
	0xcc, 0xa2, 0x42, 0xf8, 0xb0, 0xd5, 0xe4, 0x28, 0x16, 0x89, 0xf2, 0xcb, 0x75, 0x85, 0xbd, 0x88,
	0x45, 0xf2, 0x1b, 0xe7, 0x9c, 0x2f, 0xc3, 0x82, 0x88, 0x98, 0xd0, 0x50, 0x4d, 0x8d, 0x11, 0x11,
	0x6e, 0x41, 0x4b, 0xaf, 0x55, 0x85, 0xe6, 0x5c, 0xe3, 0x6d, 0x2a, 0x34, 0x0f, 0xf0, 0x35, 0x1b,
	0xea, 0x73, 0x4b, 0x19, 0x16, 0x43, 0xaa, 0xb9, 0x41, 0x33, 0x98, 0x57, 0x2b, 0x5a, 0x90, 0xec,
	0x35, 0x31, 0x85, 0xe5, 0x18, 0x1b, 0x07, 0x59, 0x52, 0xb7, 0x52, 0x84, 0xe0, 0x18, 0xb8, 0xea,
	0x28, 0x14, 0x6a, 0x00, 0x5d, 0xa7, 0x8b, 0x42, 0xc1, 0x6f, 0xaf, 0x43, 0x8d, 0xc8, 0xf8, 0x2e,
	0x37, 0x89, 0x2d, 0xe0, 0x33, 0xbe, 0x79, 0x09, 0xe6, 0xe5, 0x58, 0xe2, 0x66, 0xae, 0x70, 0xf5,
	0x5a, 0x8e, 0x65, 0x71, 0x23, 0x53, 0x5f, 0xdd, 0x04, 0xe6, 0x1b, 0xf9, 0xda, 0x67, 0x55, 0x88,
	0x12, 0x4f, 0x24, 0xcc, 0x70, 0x89, 0x25, 0x4d, 0x08, 0x91, 0x57, 0x60, 0x2e, 0x7d, 0x8f, 0xe3,
	0xae, 0x71, 0xb1, 0x3d, 0x7d, 0xcf, 0x11, 0xb0, 0x1e, 0xf6, 0x9d, 0x3b, 0x56, 0xde, 0x57, 0x0b,
	0xe3, 0x97, 0xee, 0x98, 0xdd, 0x6a, 0xd8, 0x17, 0x01, 0xeb, 0x4f, 0x47, 0xbb, 0x55, 0x84, 0x48,
	0x7d, 0x72, 0x06, 0xfa, 0xec, 0xba, 0xc9, 0x40, 0xdf, 0x35, 0x67, 0x8e, 0x4e, 0x72, 0xa3, 0x38,
	0x73, 0x74, 0x93, 0xa5, 0x38, 0xfc, 0x4a, 0x25, 0x0e, 0x5f, 0x83, 0x79, 0x94, 0x6d, 0xf2, 0x46,
	0xb9, 0x58, 0xf5, 0x84, 0x63, 0x8f, 0x62, 0x54, 0x2c, 0xe7, 0xd0, 0x4d, 0xfb, 0xc7, 0xe4, 0x64,
	0x9b, 0x76, 0x9d, 0xb1, 0xc7, 0x08, 0x55, 0xdd, 0xfe, 0xb5, 0x09, 0x6e, 0xff, 0x06, 0x34, 0x8e,
	0xa2, 0xa4, 0x2f, 0x9c, 0xe8, 0xe8, 0x48, 0x8a, 0x94, 0xbc, 0x6d, 0xc3, 0xae, 0x13, 0xf6, 0x82,
	0x20, 0xdc, 0x97, 0xfe, 0xd0, 0x43, 0xf9, 0x6d, 0xaa, 0xdb, 0xc9, 0xa1, 0xc7, 0x57, 0xed, 0x99,
	0xd2, 0x09, 0x97, 0x8c, 0xf0, 0x46, 0x51, 0xeb, 0x84, 0xab, 0x0c, 0x91, 0xd3, 0x59, 0x39, 0x96,
	0xa9, 0x18, 0x92, 0x9b, 0x6d, 0xd8, 0x75, 0xc2, 0x7a, 0x04, 0x55, 0xcf, 0xc2, 0x9b, 0x13, 0xce,
	0xc2, 0x7c, 0x93, 0x51, 0x96, 0x5b, 0xe6, 0x26, 0xa3, 0x24, 0x31, 0xbc, 0x45, 0xc5, 0x72, 0xd3,
	0x34, 0xf1, 0x0f, 0x47, 0xa9, 0x50, 0x4e, 0xb7, 0x89, 0xe8, 0x23, 0x0d, 0xa2, 0x59, 0xcb, 0x20,
	0x56, 0xda, 0xc9, 0x8e, 0xb7, 0x26, 0x83, 0x38, 0xbb, 0x5d, 0xec, 0x47, 0xc3, 0x43, 0x3f, 0x74,
	0xf3, 0x20, 0xf9, 0x36, 0x8d, 0xd2, 0x36, 0x70, 0xfa, 0x1c, 0xe5, 0xc2, 0xfe, 0x60, 0xa0, 0x95,
	0x6e, 0x47, 0xe7, 0xc2, 0x84, 0xd1, 0xf6, 0x6f, 0xe2, 0xf6, 0x93, 0xf2, 0xf0, 0x48, 0x77, 0xb4,
	0x8a, 0xa1, 0xf6, 0xe8, 0x41, 0xe2, 0xc4, 0x3f, 0xc1, 0x5d, 0xf4, 0xd1, 0x41, 0xdf, 0xe5, 0x41,
	0x14, 0x46, 0x57, 0x5c, 0x06, 0x0b, 0x19, 0xfe, 0x47, 0x05, 0x16, 0xb2, 0xfe, 0xbb, 0xb0, 0xac,
	0x59, 0xa4, 0x48, 0x7c, 0x37, 0xc0, 0xad, 0xb8, 0xc7, 0xd3, 0x56, 0x84, 0x1e, 0xe1, 0x1c, 0xe4,
	0x4a, 0x21, 0x25, 0xae, 0xce, 0xf7, 0xa8, 0xf2, 0xd6, 0xb4, 0x17, 0x15, 0xf2, 0xcc, 0xc3, 0xa1,
	0x94, 0x4a, 0x1b, 0x5c, 0xf7, 0xb9, 0x13, 0x8a, 0x09, 0xbd, 0x8c, 0xb7, 0xd4, 0x67, 0xf6, 0x49,
	0xa5, 0xcf, 0xac, 0x58, 0x0d, 0x7e, 0x50, 0xae, 0x06, 0x6f, 0x42, 0x63, 0xe8, 0x87, 0x4e, 0xe6,
	0x0d, 0x76, 0xd9, 0x1d, 0x0d, 0xfd, 0xf0, 0x89, 0x72, 0x08, 0xc5, 0x10, 0x63, 0xaf, 0x1c, 0x62,
	0x9c, 0x12, 0xb1, 0x3c, 0x3c, 0x2d, 0x62, 0x29, 0xd7, 0xce, 0x3e, 0xad, 0xd6, 0xce, 0x8c, 0xc3,
	0xf2, 0xb3, 0x8b, 0x1f, 0x96, 0x5f, 0x52, 0x06, 0xf2, 0xf9, 0xfb, 0xfe, 0xf1, 0x57, 0x6e, 0xe2,
	0xe3, 0x19, 0x59, 0x38, 0x59, 0xa6, 0x4a, 0x27, 0x4b, 0x71, 0x59, 0xd3, 0xa5, 0x65, 0x75, 0xff,
	0x65, 0xaa, 0x38, 0xdc, 0x79, 0xa7, 0x67, 0xe1, 0x5b, 0xd3, 0x67, 0x9d, 0x62, 0x33, 0xa5, 0x53,
	0xac, 0x10, 0x37, 0xcc, 0x96, 0xe2, 0x86, 0xe2, 0x2c, 0xe7, 0xca, 0xc2, 0x37, 0x24, 0x35, 0x7f,
	0x71, 0x49, 0xfd, 0x25, 0xaf, 0xcd, 0x6c, 0x8c, 0xff, 0x1e, 0xa2, 0xaa, 0x1e, 0xc3, 0x33, 0x13,
	0x8e, 0xe1, 0x82, 0x08, 0x66, 0x8b, 0x22, 0xe8, 0xfe, 0x43, 0xa3, 0x38, 0xa1, 0xef, 0x2b, 0x6c,
	0x2e, 0x0b, 0x1a, 0xe1, 0x0a, 0x15, 0x04, 0x55, 0xc7, 0xd1, 0xa9, 0xd3, 0x28, 0xee, 0xc4, 0x5c,
	0x75, 0x27, 0x8c, 0x38, 0x62, 0xbe, 0x1c, 0x47, 0x5c, 0x28, 0xf9, 0x2f, 0x0a, 0xb2, 0x56, 0x16,
	0x64, 0x96, 0x3c, 0x2d, 0x9a, 0xc9, 0x53, 0xf6, 0x52, 0x32, 0x0a, 0x74, 0x7b, 0x08, 0xbf, 0x64,
	0x8f, 0x02, 0x3a, 0xca, 0xd1, 0x80, 0x91, 0x97, 0x02, 0x95, 0xa6, 0xbd, 0x30, 0xf4, 0xc3, 0x2f,
	0xdc, 0xd0, 0x23, 0x92, 0xfb, 0x9e, 0x49, 0x0d, 0x45, 0x72, 0xdf, 0x13, 0x69, 0x9b, 0x4a, 0xe5,
	0x6f, 0x44, 0xea, 0x64, 0x1c, 0x2a, 0x85, 0x64, 0xf8, 0xb9, 0xe2, 0xd3, 0x43, 0x44, 0x81, 0xa7,
	0xbb, 0x96, 0x70, 0x88, 0x28, 0xf0, 0xaa, 0x07, 0x5b, 0x7b, 0x72, 0x0f, 0x26, 0xb7, 0x46, 0x8c,
	0xc2, 0xec, 0x4a, 0x71, 0x91, 0x90, 0x3f, 0x0d, 0x29, 0xaf, 0x6c, 0xe7, 0xce, 0x83, 0x63, 0x26,
	0x6e, 0x63, 0x6a, 0x65, 0x8e, 0x83, 0x83, 0xa6, 0x53, 0xbc, 0x8c, 0x75, 0x9a, 0x97, 0xb9, 0x05,
	0x2d, 0x75, 0x47, 0x3f, 0x88, 0x12, 0x3f, 0x3d, 0x1e, 0xaa, 0x68, 0x86, 0x2f, 0x8b, 0x35, 0x88,
	0xd9, 0x85, 0x7f, 0xe4, 0xe4, 0x97, 0x06, 0x3a, 0xac, 0xf1, 0x8f, 0x9e, 0xeb, 0x1b, 0x03, 0x5c,
	0x67, 0xe0, 0xcb, 0xd4, 0x0f, 0x75, 0xe2, 0xcb, 0xd9, 0x65, 0x43, 0x81, 0x7c, 0x66, 0xdd, 0x80,
	0x86, 0xaa, 0x1c, 0x33, 0xcf, 0x9a, 0xba, 0xe1, 0x21, 0x2c, 0x4b, 0xb2, 0x55, 0xed, 0x9d, 0x76,
	0x5f, 0x85, 0x3a, 0x0c, 0x95, 0xfb, 0xbc, 0x3a, 0x85, 0x4c, 0x45, 0xb7, 0x80, 0xb3, 0x1a, 0x90,
	0xfe, 0xad, 0xe7, 0x2d, 0xe0, 0xaf, 0x11, 0x25, 0x1d, 0xcc, 0x34, 0xc5, 0x48, 0x2f, 0x59, 0x53,
	0x2a, 0xe1, 0x32, 0x4d, 0xe1, 0x4a, 0x51, 0x45, 0x69, 0x12, 0xdb, 0xd0, 0x1e, 0x0b, 0xe9, 0x70,
	0xde, 0xc3, 0x6b, 0xe1, 0x1b, 0xc8, 0xe6, 0x58, 0xc8, 0x7d, 0x44, 0x79, 0x35, 0x3b, 0xb0, 0x84,
	0x7c, 0xdc, 0xee, 0xa3, 0x18, 0x55, 0x6f, 0xf2, 0x58, 0x48, 0x6e, 0x18, 0x62, 0x4e, 0xf3, 0xb3,
	0xa4, 0x05, 0xd7, 0xb8, 0x43, 0x46, 0x83, 0xa4, 0x08, 0xda, 0xf4, 0x68, 0x5e, 0xd7, 0x73, 0xd3,
	0xa3, 0x39, 0x15, 0xf2, 0xbb, 0xcd, 0x52, 0x7e, 0x67, 0xe6, 0xa9, 0xa9, 0x50, 0xc1, 0x4f, 0x96,
	0xa7, 0xa6, 0x74, 0x40, 0x8d, 0x42, 0x6a, 0x62, 0x8b, 0x7d, 0x4e, 0xd5, 0xa8, 0x4f, 0x87, 0xf3,
	0xcc, 0x65, 0x26, 0xbd, 0x54, 0x94, 0x83, 0xd1, 0x30, 0x93, 0x36, 0xcd, 0x87, 0x17, 0xc6, 0xd7,
	0x92, 0x24, 0x6d, 0x3c, 0x0c, 0xb2, 0xfd, 0x54, 0x8a, 0x43, 0xab, 0xda, 0x32, 0x7b, 0x83, 0x68,
	0x4d, 0x37, 0xa1, 0x69, 0xf6, 0x17, 0xed, 0x52, 0x34, 0xd0, 0xb4, 0x1b, 0x46, 0x83, 0xd1, 0x6e,
	0x99, 0x69, 0x4f, 0x45, 0x03, 0x26, 0xd3, 0x1e, 0x0a, 0x5b, 0x5b, 0xab, 0x32, 0x75, 0xa9, 0xe2,
	0x81, 0x96, 0x32, 0x57, 0xb6, 0x78, 0xc9, 0x2d, 0x7d, 0xac, 0xac, 0x24, 0x8e, 0x4f, 0x58, 0x9f,
	0x15, 0x56, 0x11, 0xd8, 0x58, 0x52, 0x44, 0x50, 0x4c, 0xec, 0x0b, 0xd5, 0x9a, 0xdd, 0x52, 0xb5,
	0xe6, 0x1e, 0x58, 0xaa, 0x10, 0x63, 0xee, 0xfc, 0x9e, 0x2a, 0xee, 0x53, 0x31, 0xc6, 0xd8, 0xfb,
	0x62, 0xe7, 0xd9, 0xc3, 0x72, 0xe7, 0xd9, 0x6d, 0x68, 0x9f, 0x44, 0x81, 0x9b, 0xfa, 0x81, 0x9f,
	0x8e, 0xb9, 0xa0, 0xc9, 0xe1, 0x40, 0x2b, 0x87, 0x6d, 0x9c, 0xf3, 0x77, 0x8b, 0x08, 0x5e, 0x40,
	0x9b, 0x8e, 0x14, 0xdb, 0x0d, 0x07, 0x67, 0xfc, 0xc6, 0xcc, 0x82, 0x59, 0xe3, 0x60, 0xa3, 0xbf,
	0x4f, 0xf9, 0x6d, 0xd9, 0x37, 0xd3, 0xb0, 0xa2, 0x7f, 0xab, 0x85, 0x1f, 0x56, 0xbf, 0x61, 0xfb,
	0x71, 0xeb, 0xd5, 0xc5, 0x43, 0x63, 0xb6, 0x7c, 0x68, 0x3c, 0x83, 0xe6, 0x91, 0x1f, 0xa4, 0x22,
	0x71, 0x8e, 0x70, 0x85, 0xb2, 0x33, 0xb7, 0x39, 0xb3, 0x53, 0xdf, 0xdb, 0x9a, 0x20, 0xa0, 0xca,
	0x4f, 0xee, 0xec, 0x06, 0xbf, 0x4a, 0x0f, 0xd2, 0xfa, 0x1c, 0x1a, 0x09, 0x8a, 0x4a, 0x8f, 0x34,
	0x4f, 0x23, 0x75, 0x27, 0x8c, 0x54, 0x12, 0xab, 0x5d, 0x4f, 0xb2, 0xbf, 0x65, 0xf7, 0x3f, 0xa6,
	0xe0, 0x92, 0xad, 0x1b, 0xf6, 0xa9, 0x25, 0xe1, 0x07, 0x93, 0x93, 0xe4, 0x81, 0x0c, 0x39, 0x29,
	0xe4, 0x7b, 0xd7, 0xf5, 0x8b, 0x52, 0x9e, 0x2f, 0x4b, 0x19, 0xed, 0x0a, 0x57, 0xe2, 0x90, 0x22,
	0xc8, 0xce, 0xc2, 0xe6, 0x0c, 0xfa, 0x77, 0xc2, 0x48, 0x9e, 0xb2, 0xfb, 0xb7, 0x53, 0xb0, 0x4c,
	0x4b, 0xa6, 0x86, 0xd2, 0x1f, 0x66, 0xc9, 0x5b, 0xc0, 0x07, 0x61, 0xde, 0xe7, 0x6a, 0xc6, 0x56,
	0xba, 0xcb, 0x75, 0x07, 0x13, 0x26, 0x83, 0x2b, 0x0f, 0x24, 0x5b, 0x06, 0x1f, 0xaa, 0xfa, 0x1a,
	0xcc, 0x13, 0xc2, 0x5a, 0x82, 0x27, 0x0c, 0x3d, 0x75, 0xff, 0x6d, 0x0a, 0x36, 0x5e, 0x1a, 0xed,
	0xb0, 0x1f, 0x52, 0xbf, 0xb7, 0x55, 0x0c, 0x90, 0xad, 0x51, 0x76, 0x66, 0x69, 0x72, 0x4d, 0x73,
	0x91, 0xf2, 0x07, 0x54, 0xf4, 0xee, 0x3f, 0x4e, 0xc1, 0x9a, 0xfe, 0x0d, 0xdc, 0x87, 0x5c, 0xea,
	0x2a, 0xcc, 0xf5, 0x47, 0x32, 0xd5, 0xd2, 0xe7, 0x87, 0xea, 0xc2, 0x66, 0xbf, 0xf3, 0xc2, 0xfe,
	0x66, 0xca, 0xf8, 0x39, 0xc0, 0x0f, 0xb3, 0xa4, 0x4a, 0xbf, 0xff, 0xcc, 0x85, 0xfa, 0xfd, 0x67,
	0x27, 0xf5, 0xfb, 0x4f, 0x5c, 0x7f, 0xf7, 0x9f, 0x71, 0x37, 0xf2, 0x0b, 0xc0, 0x0f, 0xb6, 0x1b,
	0xb9, 0x31, 0xcc, 0x9a, 0xc6, 0xf0, 0x43, 0x2a, 0x5a, 0x0f, 0x56, 0x5e, 0x25, 0xe3, 0xa7, 0x51,
	0xd2, 0xa7, 0x52, 0xec, 0xb9, 0x6d, 0xbf, 0x17, 0x6a, 0xca, 0xfc, 0xa6, 0x01, 0x4b, 0xc5, 0x21,
	0x7f, 0xb4, 0xd2, 0xee, 0x59, 0x1d, 0xba, 0x59, 0x8f, 0xed, 0x9c, 0xd9, 0x63, 0xbb, 0x06, 0xf3,
	0xdc, 0xb0, 0xaa, 0x7c, 0xa8, 0x7a, 0xc2, 0xcd, 0x3a, 0x4c, 0xa2, 0x37, 0x22, 0x71, 0x30, 0x16,
	0x51, 0xd9, 0x11, 0x30, 0xf4, 0xa5, 0x2f, 0xd3, 0xec, 0xe7, 0x58, 0xd4, 0xdf, 0x52, 0xcb, 0x7f,
	0x8e, 0x45, 0xcd, 0x2d, 0x79, 0x5f, 0xe0, 0x62, 0xa1, 0x2f, 0xf0, 0x2a, 0x80, 0xeb, 0x65, 0x37,
	0xd2, 0xa0, 0x7a, 0x39, 0x3d, 0x2f, 0xef, 0x10, 0xa1, 0xf0, 0xc3, 0xe0, 0xa9, 0xe7, 0xa1, 0xdc,
	0xa3, 0x8c, 0xaf, 0xd4, 0xb6, 0xd8, 0x98, 0xd4, 0xb6, 0x98, 0xf7, 0xee, 0xea, 0x5f, 0x00, 0x67,
	0xad, 0xbb, 0xe5, 0xcb, 0x94, 0x56, 0xe5, 0x32, 0x45, 0xb7, 0xaa, 0x18, 0x13, 0x69, 0xe7, 0xad,
	0x2a, 0xf9, 0x44, 0x6e, 0x40, 0x43, 0xf5, 0x29, 0x72, 0x6f, 0xdf, 0x92, 0xb2, 0x35, 0xc2, 0xb2,
	0xee, 0x3e, 0xa3, 0xf9, 0x6f, 0xb9, 0xdc, 0xfc, 0x77, 0x05, 0xe8, 0x81, 0x8f, 0x31, 0x4e, 0x8f,
	0x6a, 0x08, 0xd0, 0x29, 0x76, 0x0f, 0x2c, 0xaa, 0x53, 0x3a, 0x85, 0x62, 0x23, 0x67, 0x46, 0x4b,
	0x44, 0x79, 0x6a, 0x54, 0x1c, 0x4b, 0x7d, 0xce, 0xab, 0x95, 0x3e, 0xe7, 0xac, 0x25, 0x17, 0x1f,
	0x9d, 0x54, 0x04, 0xbb, 0xaa, 0xea, 0xdb, 0xcc, 0x98, 0x5e, 0x8b, 0x60, 0x97, 0xce, 0xa7, 0xbc,
	0xa3, 0x1a, 0x19, 0x03, 0x55, 0x04, 0x6e, 0xe5, 0x6d, 0xd5, 0xaf, 0x45, 0x10, 0xe4, 0x1b, 0x56,
	0xfe, 0x0d, 0x27, 0x6f, 0x58, 0xd6, 0xa4, 0x9b, 0x35, 0xf9, 0x72, 0x1f, 0x6a, 0xc7, 0x68, 0xf2,
	0xe5, 0x46, 0xd4, 0x0b, 0xb4, 0x6b, 0xde, 0x84, 0x66, 0x18, 0xa5, 0xfe, 0xd1, 0x58, 0x67, 0x9e,
	0xea, 0x3e, 0x8e, 0x41, 0x95, 0x77, 0xee, 0xc0, 0x52, 0x1a, 0xa1, 0xdb, 0x23, 0x46, 0x96, 0x39,
	0xa7, 0x4d, 0xad, 0x34, 0x8a, 0x0f, 0x08, 0x9e, 0xf4, 0x9b, 0xe1, 0xbd, 0x6a, 0xdf, 0xe6, 0x1e,
	0xce, 0x5a, 0x0d, 0x44, 0x75, 0x46, 0x6e, 0xdc, 0x04, 0x86, 0xa8, 0xcc, 0x78, 0xa1, 0x5a, 0x71,
	0xa5, 0xd1, 0xeb, 0xfa, 0x84, 0x46, 0xaf, 0x62, 0x43, 0xd9, 0x66, 0xb9, 0xa1, 0x6c, 0x0b, 0x5a,
	0xde, 0x38, 0xec, 0x1b, 0x1d, 0x65, 0x7c, 0x2f, 0xd7, 0x40, 0x34, 0x6b, 0x29, 0x9b, 0xd8, 0x2d,
	0xd6, 0x9d, 0xdc, 0x2d, 0x76, 0xfa, 0x4f, 0x3e, 0x6f, 0x9e, 0xfe, 0x93, 0xcf, 0x52, 0xf1, 0x72,
	0xab, 0x52, 0xbc, 0x9c, 0xf4, 0x0b, 0xd8, 0x5b, 0xdf, 0xe2, 0x17, 0xb0, 0xdb, 0xa7, 0xfc, 0x02,
	0xb6, 0x5c, 0x84, 0xbc, 0x5d, 0x2d, 0x42, 0xa2, 0x4f, 0xa0, 0x80, 0x90, 0x37, 0x7d, 0x87, 0x4f,
	0x17, 0x82, 0x78, 0xc3, 0x51, 0x35, 0x72, 0x06, 0x47, 0x7e, 0x2d, 0xb9, 0xb8, 0xdc, 0xb4, 0x5b,
	0x39, 0x57, 0xef, 0x6b, 0x59, 0xee, 0xda, 0xbf, 0x3b, 0xe9, 0xd7, 0xe8, 0x86, 0xc2, 0x7f, 0x54,
	0xee, 0x48, 0x37, 0x92, 0x9f, 0x7b, 0x17, 0x4e, 0x7e, 0xf6, 0xfe, 0x67, 0x0e, 0x96, 0x0b, 0xf1,
	0x0d, 0xb2, 0x59, 0x3e, 0x2c, 0x57, 0x7e, 0xf9, 0x61, 0xdd, 0x9e, 0x30, 0xde, 0xa4, 0x9f, 0xab,
	0x6c, 0x5c, 0x8c, 0x51, 0xc6, 0xdd, 0x9f, 0x3c, 0x98, 0xb2, 0x7e, 0x09, 0x75, 0xa3, 0x80, 0x6a,
	0xdd, 0x98, 0xfc, 0xae, 0x51, 0xaf, 0xdd, 0x38, 0x8f, 0xa5, 0x30, 0x70, 0x76, 0xaf, 0x7e, 0xca,
	0x5b, 0x46, 0x75, 0x73, 0xe3, 0x3c, 0x16, 0x35, 0xf0, 0x9f, 0xc1, 0x72, 0xf6, 0x8f, 0x4e, 0x74,
	0x9a, 0x67, 0x5d, 0x9f, 0x74, 0xec, 0x1b, 0xff, 0x0e, 0x65, 0xe3, 0xda, 0xa4, 0xc1, 0xf3, 0x7f,
	0xe8, 0x51, 0x19, 0x59, 0x07, 0x9e, 0xdf, 0x6d, 0x64, 0xe3, 0x5f, 0x37, 0xd0, 0xc8, 0x7f, 0x4e,
	0xff, 0x49, 0xa5, 0x98, 0x6e, 0x59, 0x3b, 0x93, 0x14, 0x64, 0x52, 0x46, 0xb6, 0x71, 0x86, 0x2a,
	0x75, 0x7f, 0xb2, 0x33, 0x65, 0x39, 0x60, 0xf5, 0x44, 0x5a, 0x8a, 0x95, 0xad, 0x3b, 0x67, 0x4c,
	0xac, 0x18, 0xc1, 0x9d, 0xfb, 0x81, 0x5f, 0x41, 0xbb, 0x27, 0x52, 0x33, 0xa9, 0xb6, 0xb6, 0xcf,
	0x10, 0xe8, 0xb7, 0x18, 0xfa, 0x70, 0x9e, 0xfe, 0xa3, 0xcd, 0xc3, 0xff, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0x52, 0x05, 0xcc, 0xc7, 0xee, 0x46, 0x00, 0x00,
}
